var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { ExtensionContext } from '@microsoft/sp-extension-base';
import { UrlUtilities } from '@microsoft/sp-core-library';
/**
 * This object provides contextual information for BaseListViewCommandSet.
 * @public
 */
var ListViewCommandSetContext = /** @class */ (function (_super) {
    __extends(ListViewCommandSetContext, _super);
    /**
     * @internal
     */
    function ListViewCommandSetContext(extensionContextParameters, listViewCommandSetContextParameters) {
        var _this = _super.call(this, extensionContextParameters) || this;
        _this._listView = listViewCommandSetContextParameters.listView;
        _this._commandArray = [];
        var itemsMap = _this.manifest.items;
        for (var _i = 0, _a = Object.keys(itemsMap); _i < _a.length; _i++) {
            var itemId = _a[_i];
            // Future proof for grouping
            if (itemsMap[itemId].type === 'command') {
                var iconUrl = itemsMap[itemId].iconImageUrl;
                if (iconUrl && !UrlUtilities.isDataUrl(iconUrl)) {
                    iconUrl = UrlUtilities.resolve(iconUrl, _this.manifest.loaderConfig.internalModuleBaseUrls[0]);
                }
                _this._commandArray.push({
                    id: itemId,
                    title: itemsMap[itemId].title.default || '',
                    ariaLabel: itemsMap[itemId].ariaLabel ?
                        itemsMap[itemId].ariaLabel.default : undefined,
                    iconImageUrl: iconUrl,
                    visible: true
                });
            }
        }
        return _this;
    }
    Object.defineProperty(ListViewCommandSetContext.prototype, "listView", {
        /**
         * Provides access to the ListView control that the customizer will operate on.
         */
        get: function () {
            return this._listView;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListViewCommandSetContext.prototype, "_commands", {
        /**
         * Returns an array with all commands.
         *
         * @privateRemarks
         * In the future commands won't be a flat list. This allows us to get all commands together, so we can
         * provide a straight-forward API tryGetCommand in the BaseListViewCommandSet itself.
         *
         * @internal
         */
        get: function () {
            return this._commandArray;
        },
        enumerable: true,
        configurable: true
    });
    return ListViewCommandSetContext;
}(ExtensionContext));
export default ListViewCommandSetContext;
//# sourceMappingURL=ListViewCommandSetContext.js.map