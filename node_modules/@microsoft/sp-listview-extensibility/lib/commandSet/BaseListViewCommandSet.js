var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { virtual } from '@microsoft/decorators';
import { Validate } from '@microsoft/sp-core-library';
import { BaseExtension } from '@microsoft/sp-extension-base';
/**
 * This is the base class that third parties should extend when implementing
 * a client-side extension that provides a command set for a SharePoint list view.
 *
 * @remarks
 * In the component manifest, the "extensionType" should be set to "ListViewCommandSet".
 *
 * @privateRemarks
 *
 * Eventually other command set classes will be introduced, and then we will introduce a base class
 * so the hierarchy goes `BaseListViewCommandSet <- BaseCommandSet <- BaseExtension <- BaseComponent`.
 *
 * @public
 */
var BaseListViewCommandSet = /** @class */ (function (_super) {
    __extends(BaseListViewCommandSet, _super);
    /**
     * @internal
     */
    function BaseListViewCommandSet() {
        return _super.call(this) || this;
    }
    /**
     * Returns the command with the given id.
     * Returns undefined if there is not command with the given id.
     * @param id - Id of the command
     */
    BaseListViewCommandSet.prototype.tryGetCommand = function (id) {
        Validate.isNonemptyString(id, 'id');
        var commands = this.context._commands.filter(function (command) { return command.id === id; });
        return commands[0];
    };
    /**
     * This event occurs whenever the ListView state changes.
     * @remarks
     * This event allows the implementor to tailor the appearance of the command.
     * For example, to hide the command, assign its property visible = false.
     * To customize the title, modify the command property title.
     */
    BaseListViewCommandSet.prototype.onListViewUpdated = function (event) {
        // (implemented by child class)
    };
    /**
     * This event occurs when the command is invoked, e.g. because the user
     * clicked on the toolbar button or menu item.
     */
    BaseListViewCommandSet.prototype.onExecute = function (event) {
        // (implemented by child class)
    };
    __decorate([
        virtual
    ], BaseListViewCommandSet.prototype, "onListViewUpdated", null);
    __decorate([
        virtual
    ], BaseListViewCommandSet.prototype, "onExecute", null);
    return BaseListViewCommandSet;
}(BaseExtension));
export default BaseListViewCommandSet;
//# sourceMappingURL=BaseListViewCommandSet.js.map