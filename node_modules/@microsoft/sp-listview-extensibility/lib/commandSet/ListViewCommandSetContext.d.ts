import { ExtensionContext, _IExtensionContextParameters } from '@microsoft/sp-extension-base';
import { ICommandSetExtensionManifest } from '@microsoft/sp-module-interfaces';
import ListViewAccessor from '../common/ListViewAccessor';
import Command from './Command';
/**
 * Constructor parameters for `ListViewCommandSetContext`.
 *
 * @internal
 */
export interface IListViewCommandSetContextParameters {
    readonly listView: ListViewAccessor;
}
/**
 * This object provides contextual information for BaseListViewCommandSet.
 * @public
 */
export default class ListViewCommandSetContext extends ExtensionContext {
    /**
     * {@inheritDoc @microsoft/sp-component-base#BaseComponentContext.manifest}
     */
    readonly manifest: ICommandSetExtensionManifest;
    private _listView;
    private _commandArray;
    /**
     * @internal
     */
    constructor(extensionContextParameters: _IExtensionContextParameters, listViewCommandSetContextParameters: IListViewCommandSetContextParameters);
    /**
     * Provides access to the ListView control that the customizer will operate on.
     */
    readonly listView: ListViewAccessor;
    /**
     * Returns an array with all commands.
     *
     * @privateRemarks
     * In the future commands won't be a flat list. This allows us to get all commands together, so we can
     * provide a straight-forward API tryGetCommand in the BaseListViewCommandSet itself.
     *
     * @internal
     */
    readonly _commands: ReadonlyArray<Command>;
}
//# sourceMappingURL=ListViewCommandSetContext.d.ts.map