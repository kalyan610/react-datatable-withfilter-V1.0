import { BaseExtension } from '@microsoft/sp-extension-base';
import ListViewCommandSetContext from './ListViewCommandSetContext';
import Command from './Command';
import { RowAccessor } from '../common/ListViewAccessor';
/**
 * Parameters for {@link BaseListViewCommandSet.onListViewUpdated}
 *
 * @public
 */
export interface IListViewCommandSetListViewUpdatedParameters {
    /**
     * The currently selected ListView rows, at the time when the event occurred.
     */
    readonly selectedRows: ReadonlyArray<RowAccessor>;
}
/**
 * Parameters for {@link BaseListViewCommandSet.onExecute}
 *
 * @public
 */
export interface IListViewCommandSetExecuteEventParameters {
    /**
     * The unique identifier for the command.  This is specified as ICommandDefinition.commandId
     * in the component manifest.
     */
    readonly itemId: string;
    /**
     * The currently selected ListView rows, at the time when the event occurred.
     */
    readonly selectedRows: ReadonlyArray<RowAccessor>;
}
/**
 * This is the base class that third parties should extend when implementing
 * a client-side extension that provides a command set for a SharePoint list view.
 *
 * @remarks
 * In the component manifest, the "extensionType" should be set to "ListViewCommandSet".
 *
 * @privateRemarks
 *
 * Eventually other command set classes will be introduced, and then we will introduce a base class
 * so the hierarchy goes `BaseListViewCommandSet <- BaseCommandSet <- BaseExtension <- BaseComponent`.
 *
 * @public
 */
declare abstract class BaseListViewCommandSet<TProperties> extends BaseExtension<TProperties> {
    /**
     * {@inheritDoc @microsoft/sp-extension-base#BaseExtension.context}
     */
    readonly context: ListViewCommandSetContext;
    /**
     * @internal
     */
    constructor();
    /**
     * Returns the command with the given id.
     * Returns undefined if there is not command with the given id.
     * @param id - Id of the command
     */
    tryGetCommand(id: string): Command;
    /**
     * This event occurs whenever the ListView state changes.
     * @remarks
     * This event allows the implementor to tailor the appearance of the command.
     * For example, to hide the command, assign its property visible = false.
     * To customize the title, modify the command property title.
     */
    onListViewUpdated(event: IListViewCommandSetListViewUpdatedParameters): void;
    /**
     * This event occurs when the command is invoked, e.g. because the user
     * clicked on the toolbar button or menu item.
     */
    onExecute(event: IListViewCommandSetExecuteEventParameters): void;
}
export default BaseListViewCommandSet;
//# sourceMappingURL=BaseListViewCommandSet.d.ts.map