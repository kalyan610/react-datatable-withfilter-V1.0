var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { ExtensionContext } from '@microsoft/sp-extension-base';
/**
 * This object provides contextual information for BaseFieldCustomizer.
 * @public
 */
var FieldCustomizerContext = /** @class */ (function (_super) {
    __extends(FieldCustomizerContext, _super);
    /**
     * @internal
     */
    function FieldCustomizerContext(extensionContextParameters, fieldCustomizerContextParameters) {
        var _this = _super.call(this, extensionContextParameters) || this;
        _this._listView = fieldCustomizerContextParameters.listView;
        _this._field = fieldCustomizerContextParameters.field;
        return _this;
    }
    /**
     * If the field customizer is bounded to the SharePoint list view, this provides access
     * to the list view specific functionality; otherwise the value is undefined.
     *
     * @remarks
     * Although the SharePoint list view is the main usage scenario, field customizers
     * can be used by other user interface surfaces.  For example, in the future SharePoint
     * may support field customizers on a display/edit form.
     *
     * @returns the SharePoint list view, or undefined if there is none.
     */
    FieldCustomizerContext.prototype.tryGetListView = function () {
        return this._listView;
    };
    Object.defineProperty(FieldCustomizerContext.prototype, "field", {
        /**
         * Provides access to the SharePoint field that the customizer will operate on.
         */
        get: function () {
            return this._field;
        },
        enumerable: true,
        configurable: true
    });
    return FieldCustomizerContext;
}(ExtensionContext));
export default FieldCustomizerContext;
//# sourceMappingURL=FieldCustomizerContext.js.map