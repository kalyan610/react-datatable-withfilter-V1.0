import { BaseExtension } from '@microsoft/sp-extension-base';
import FieldCustomizerContext from './FieldCustomizerContext';
import ListItemAccessor from '../common/ListItemAccessor';
/**
 * Event parameters for BaseFieldCustomizer.onRenderCell()
 * @public
 */
export interface IFieldCustomizerCellEventParameters {
    /**
     * The HTML "div" element that the extension will take ownership of.
     * This ownership will end when onDisposeCell() is called.
     */
    readonly domElement: HTMLDivElement;
    /**
     * The list item being edited.
     */
    readonly listItem: ListItemAccessor;
    /**
     * The value of the field being rendered.
     */
    readonly fieldValue: any;
    /**
     * An implementation defined storage property.
     *
     * @remarks
     * For example, suppose that resources need to be allocated during rendering
     * (e.g. a renderer object, an HTTP request to be canceled, a cache slot, etc).
     * The onRenderCell() implementation could store a key or handle in this property,
     * and then onDisposeCell() can use this key to find the resource to be freed.
     */
    userData: any;
}
/**
 * This is the base class that third parties should extend when implementing
 * a client-side extension that customizes the appearance of fields in
 * a SharePoint ListView.
 *
 * In the component manifest, the "extensionType" should be set to "FieldCustomizer".
 *
 * @public
 */
declare abstract class BaseFieldCustomizer<TProperties> extends BaseExtension<TProperties> {
    /**
     * {@inheritDoc @microsoft/sp-component-base#BaseComponent.context}
     */
    protected readonly context: FieldCustomizerContext;
    onRenderCell(event: IFieldCustomizerCellEventParameters): void;
    onDisposeCell(event: IFieldCustomizerCellEventParameters): void;
}
export default BaseFieldCustomizer;
//# sourceMappingURL=BaseFieldCustomizer.d.ts.map