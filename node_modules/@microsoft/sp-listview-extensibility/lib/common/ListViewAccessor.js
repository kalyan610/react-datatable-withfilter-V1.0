var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { SPEvent, SPEventArgs } from '@microsoft/sp-core-library';
import ListItemAccessor from './ListItemAccessor';
/**
 * Provides access to a ListView column, which is the visual presentation
 * of a field.
 *
 * @remarks
 *
 * A SharePoint "field" (SPField) defines the data storage for a property of a list item.
 * (If the list item represents a document, then the field is sometimes called a "property".)
 *
 * A "column" is the visual presentation of a field, when displayed by the ListView.
 *
 * @public
 */
var ColumnAccessor = /** @class */ (function () {
    /** @internal */
    function ColumnAccessor() {
        // (mark constructor as internal)
    }
    return ColumnAccessor;
}());
export { ColumnAccessor };
/**
 * Provides access to a ListView row, which is the visual presentation
 * of a SharePoint list item.
 *
 * @remarks
 *
 * A SharePoint "list item" (SPListItem) is a data storage record in the content
 * management system; it stores an array of values for the associated fields.
 *
 * A "row" is the visual presentation of a list item, when displayed by the ListView;
 * it stores an array of cell values for the associated columns.
 *
 * @public
 */
var RowAccessor = /** @class */ (function (_super) {
    __extends(RowAccessor, _super);
    /**
     * @internal
     */
    function RowAccessor() {
        return _super.call(this) || this;
    }
    return RowAccessor;
}(ListItemAccessor));
export { RowAccessor };
/**
 * Arguments for the selected rows changed event.
 *
 * @public
 */
var SelectedRowsChangedEventArgs = /** @class */ (function (_super) {
    __extends(SelectedRowsChangedEventArgs, _super);
    function SelectedRowsChangedEventArgs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SelectedRowsChangedEventArgs;
}(SPEventArgs));
export { SelectedRowsChangedEventArgs };
/**
 * Provides access to a SharePoint ListView control.
 *
 * @public
 */
var ListViewAccessor = /** @class */ (function () {
    /**
     * @internal
     */
    function ListViewAccessor() {
        this._selectedRowsChangedEvent =
            new SPEvent(ListViewAccessor._selectedRowsChangedEventName);
    }
    Object.defineProperty(ListViewAccessor.prototype, "selectedRowsChangedEvent", {
        /**
         * Event that gets raised every time the selected items in the list view change.
         * @eventproperty
         */
        get: function () {
            return this._selectedRowsChangedEvent;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * SPEvent name when the selected rows in a list have changed.
     * @internal
     */
    ListViewAccessor._selectedRowsChangedEventName = 'listView.selectedRowsChanged';
    return ListViewAccessor;
}());
export default ListViewAccessor;
//# sourceMappingURL=ListViewAccessor.js.map