{"version":3,"file":"compose.js","sourceRoot":"../src/","sources":["compose.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAG/B,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAChE,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAE5D,SAAS,OAAO,CAOd,KAAuC,EACvC,YAAmG;IAAnG,6BAAA,EAAA,iBAAmG;IAEnG,IAAM,cAAc,GAAG,mBAAmB,CACxC,KAAc,EACb,YAA0C,EAC3C,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,SAAS,CACrE,CAAC;IAEF,IAAM,SAAS,GAAI,KAAK,CAAC,UAAU,CACjC,UAAC,KAAK,EAAE,GAAG;QACT,OAAO,cAAc,CAAC,MAAM,CAAC,KAAK,EAAE,GAAgC,wBAC/D,cAAc,KACjB,KAAK,EAAE,cAAc,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE,cAAc,CAAC,EACvD,KAAK,wBACA,cAAc,CAAC,KAAK,KACvB,MAAM,EAAE,SAAS,OAEnB,CAAC;IACL,CAAC,CACuE,CAAC;IAE3E,SAAS,CAAC,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC;IAEnD,IAAK,KAA+B,CAAC,YAAY,EAAE;QACjD,SAAS,CAAC,YAAY,GAAI,KAA+B,CAAC,YAAY,CAAC;KACxE;IAEC,SAA2C,CAAC,mBAAmB,GAAG,cAAc,CAAC;IAEnF,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,eAAe,OAAO,CAAC","sourcesContent":["import * as React from 'react';\n\nimport { ComponentWithAs, ComposedComponent, ComposeOptions, Input, InputComposeComponent } from './types';\nimport { wasComposedPreviously } from './wasComposedPreviously';\nimport { mergeComposeOptions } from './mergeComposeOptions';\n\nfunction compose<\n  TElementType extends keyof JSX.IntrinsicElements,\n  TInputProps,\n  TInputStylesProps,\n  TParentProps,\n  TParentStylesProps\n>(\n  input: Input<TElementType, TInputProps>,\n  inputOptions: ComposeOptions<TInputProps, TInputStylesProps, TParentProps, TParentStylesProps> = {},\n) {\n  const composeOptions = mergeComposeOptions(\n    input as Input,\n    (inputOptions as unknown) as ComposeOptions,\n    wasComposedPreviously(input) ? input.fluentComposeConfig : undefined,\n  );\n\n  const Component = (React.forwardRef<HTMLElement, TInputProps & TParentProps & { as?: React.ElementType }>(\n    (props, ref) => {\n      return composeOptions.render(props, ref as React.Ref<HTMLDivElement>, {\n        ...composeOptions,\n        state: composeOptions.state(props, ref, composeOptions),\n        slots: {\n          ...composeOptions.slots,\n          __self: Component,\n        },\n      });\n    },\n  ) as unknown) as ComponentWithAs<TElementType, TInputProps & TParentProps>;\n\n  Component.displayName = composeOptions.displayName;\n\n  if ((input as InputComposeComponent).defaultProps) {\n    Component.defaultProps = (input as InputComposeComponent).defaultProps;\n  }\n\n  ((Component as unknown) as ComposedComponent).fluentComposeConfig = composeOptions;\n\n  return Component;\n}\n\nexport default compose;\n"]}