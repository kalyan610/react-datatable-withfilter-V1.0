{"version":3,"file":"mergeProps.js","sourceRoot":"../src/","sources":["mergeProps.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAEtD;;;;GAIG;AACH,MAAM,UAAU,UAAU,CAMxB,KAAa,EAAE,OAA+C;IAC9D,IAAM,MAAM,GAA6B;QACvC,KAAK,EAAE,KAAK;QACZ,KAAK,wBACA,OAAO,CAAC,KAAK;YAChB,8DAA8D;YAC9D,IAAI,EAAG,KAAa,CAAC,EAAE,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,KAAK,GACvD;QACD,SAAS,EAAE,EAAE;KACd,CAAC;IAEF,mBAAmB;IACnB,cAAc,CAAC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;IAExC,sCAAsC;IACtC,gBAAgB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAElC,+BAA+B;IAE/B,OAAO,MAAsD,CAAC;AAChE,CAAC","sourcesContent":["import { ComposePreparedOptions, MergePropsResult, GenericDictionary } from './types';\nimport { resolveClasses } from './resolveClasses';\nimport { resolveSlotProps } from './resolveSlotProps';\n\n/**\n * Merge props takes in state and compose options, and resolves slots and slotProps.\n * It's expected that the component will call mergeProps(state, options) from within\n * render; after resolving state and before rendering slots and slotProps.\n */\nexport function mergeProps<\n  TProps,\n  TState = TProps,\n  TSlots = GenericDictionary,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  TSlotProps = { [key in keyof TSlots]: any }\n>(state: TState, options: ComposePreparedOptions<TProps, TState>): MergePropsResult<TState, TSlots, TSlotProps> {\n  const result: MergePropsResult<TState> = {\n    state: state,\n    slots: {\n      ...options.slots,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      root: (state as any).as || options.slots.root || 'div',\n    },\n    slotProps: {},\n  };\n\n  // Resolve classes.\n  resolveClasses(result, options.classes);\n\n  // Resolve slotProps/slots from state.\n  resolveSlotProps(result, options);\n\n  // TODO: Resolve inline styles.\n\n  return result as MergePropsResult<TState, TSlots, TSlotProps>;\n}\n"]}