{"version":3,"file":"resolveClasses.js","sourceRoot":"../src/","sources":["resolveClasses.ts"],"names":[],"mappings":";;;IAEA;;;;OAIG;IACH,SAAgB,cAAc,CAC5B,MAAgC,EAChC,OAA0C;QAElC,IAAA,oBAAK,EAAE,oBAAK,EAAE,4BAAS,CAAY;QAE3C,KAAoC,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO,EAAE;YAAxC,IAAM,qBAAqB,gBAAA;YAC9B,IAAM,QAAQ;YACZ,8DAA8D;YAC9D,OAAO,qBAAqB,KAAK,UAAU,CAAC,CAAC,CAAC,qBAAqB,CAAC,KAAK,EAAE,KAAY,CAAC,CAAC,CAAC,CAAC,qBAAqB,CAAC;YAEnH,IAAI,QAAQ,EAAE;gBACZ,KAAuB,UAAqB,EAArB,KAAA,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAArB,cAAqB,EAArB,IAAqB,EAAE;oBAAzC,IAAM,QAAQ,SAAA;oBACjB,IAAI,QAAQ,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,EAAE;wBACzC,qBAAqB,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;qBAChE;iBACF;aACF;SACF;QAED,8DAA8D;QAC9D,qBAAqB,CAAC,SAAS,EAAE,MAAM,EAAG,KAAa,CAAC,SAAS,CAAC,CAAC;QAEnE,OAAO,MAAM,CAAC;IAChB,CAAC;IAxBD,wCAwBC;IAED,SAAgB,qBAAqB,CACnC,SAA4C,EAC5C,QAAgB,EAChB,SAAiB;QAEjB,IAAI,SAAS,EAAE;YACb,IAAM,IAAI,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;YAC/D,IAAI,CAAC,SAAS,GAAG,6BAAa,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;SAC3D;IACH,CAAC;IATD,sDASC","sourcesContent":["import { ComposePreparedOptions, ClassDictionary, GenericDictionary, MergePropsResult } from './types';\nimport { appendClasses } from './appendClasses';\n/**\n * Helper utility which takes in a classes array from compose options, resolves functions,\n * merges them into a final result, and distributes classnames to slotProps within the given\n * resolver result object.\n */\nexport function resolveClasses<TState>(\n  result: MergePropsResult<TState>,\n  classes: ComposePreparedOptions['classes'],\n): MergePropsResult<TState> {\n  const { state, slots, slotProps } = result;\n\n  for (const classFunctionOrObject of classes) {\n    const classObj: ClassDictionary | undefined =\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      typeof classFunctionOrObject === 'function' ? classFunctionOrObject(state, slots as any) : classFunctionOrObject;\n\n    if (classObj) {\n      for (const slotName of Object.keys(classObj)) {\n        if (classObj[slotName] && slots[slotName]) {\n          appendToSlotClassName(slotProps, slotName, classObj[slotName]);\n        }\n      }\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  appendToSlotClassName(slotProps, 'root', (state as any).className);\n\n  return result;\n}\n\nexport function appendToSlotClassName(\n  slotProps: Record<string, GenericDictionary>,\n  slotName: string,\n  className: string,\n) {\n  if (className) {\n    const slot = (slotProps[slotName] = slotProps[slotName] || {});\n    slot.className = appendClasses(slot.className, className);\n  }\n}\n"]}