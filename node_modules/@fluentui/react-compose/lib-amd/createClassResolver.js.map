{"version":3,"file":"createClassResolver.js","sourceRoot":"../src/","sources":["createClassResolver.ts"],"names":[],"mappings":";;;IAGA;;;;;;;;;;;;;OAaG;IACU,QAAA,mBAAmB,GAAG,UAAC,OAAwB;QAC1D,mEAAmE;QAC7D,IAAA,+BAAwD,EAAtD,gBAAK,EAAE,wBAAS,EAAE,gBAAoC,CAAC;QAE/D,2FAA2F;QAC3F,kCAAkC;QAClC,OAAO,SAAS,aAAa,CAAC,KAAwB;YACpD,IAAM,eAAe,GAA2B,EAAE,CAAC;YAEnD,IAAI,eAAe,GAAG,EAAE,CAAC;YACzB,KAA2B,UAAsB,EAAtB,KAAA,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAtB,cAAsB,EAAtB,IAAsB,EAAE;gBAA9C,IAAM,YAAY,SAAA;gBACrB,IAAI,KAAK,CAAC,YAAY,CAAC,EAAE;oBACvB,eAAe,GAAG,6BAAa,CAAC,eAAe,EAAE,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;iBAC3E;aACF;YAED,IAAI,WAAW,GAAG,EAAE,CAAC;YACrB,KAAuB,UAAkB,EAAlB,KAAA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAlB,cAAkB,EAAlB,IAAkB,EAAE;gBAAtC,IAAM,QAAQ,SAAA;gBACjB,IAAM,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;gBACnC,iFAAiF;gBACjF,IAAI,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE;oBAC/B,WAAW,GAAG,6BAAa,CAAC,WAAW,EAAE,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;iBACvE;aACF;YAED,KAAuB,UAAkB,EAAlB,KAAA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAlB,cAAkB,EAAlB,IAAkB,EAAE;gBAAtC,IAAM,QAAQ,SAAA;gBACjB,eAAe,CAAC,QAAQ,CAAC,GAAG,6BAAa,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,eAAe,EAAE,WAAW,CAAC,CAAC;aAC1F;YACD,OAAO,eAAkC,CAAC;QAC5C,CAAC,CAAC;IACJ,CAAC,CAAC;IAQF;;;;;OAKG;IACH,SAAS,iBAAiB,CAAC,OAAwB;QACjD,IAAM,WAAW,GAAgB;YAC/B,KAAK,EAAE,EAAE;YACT,SAAS,EAAE,EAAE;YACb,KAAK,EAAE,EAAE;SACV,CAAC;QACM,IAAA,yBAAK,EAAE,iCAAS,EAAE,yBAAK,CAAiB;QAEhD,0BAA0B;QAC1B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAC,GAAW;YACvC,IAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;YAEhC,IAAI,UAAU,EAAE;gBACd,IAAM,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAElC,gEAAgE;gBAChE,QAAQ,UAAU,CAAC,MAAM,EAAE;oBACzB,KAAK,CAAC,EAAE,2BAA2B;wBACjC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;wBACtC,MAAM;oBAER,KAAK,CAAC,EAAE,6BAA6B;wBACnC,IAAM,QAAQ,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;wBAC/B,IAAM,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;wBAChC,IAAM,UAAU,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;wBAE7D,UAAU,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC;wBACnC,MAAM;oBAER;wBACE,cAAc;wBACd,KAAK,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC;iBAC3B;aACF;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,WAAW,CAAC;IACrB,CAAC","sourcesContent":["import { GenericDictionary, ClassDictionary } from './types';\nimport { appendClasses } from './appendClasses';\n\n/**\n * `createClassResolver` is a factory function which creates a state to classmap resolver for\n * slot specific class names. It can be used in conjunction with the `compose` option `classes` to\n * inject css modules without writing cx(...) logic manually distributing classnames.\n *\n * Class names which map to slots are automatically distributed to correct slot props.\n *\n * Class names with an underscore are interpretted as enum matchable classes. For example,\n * the class \"size_large\" would be applied to the `root` slot when the component's state contains\n * a prop `size` with a value `large`.\n *\n * Remaining class names would be interpretted as modifiers, applied to the `root` slot when\n * the component `state` contains a truthy matching prop name.\n */\nexport const createClassResolver = (classes: ClassDictionary) => {\n  // This is in creation time, so this will happen once per css file.\n  const { slots, modifiers, enums } = createResolvedMap(classes);\n\n  // Everything in the function below will happen at runtime, so it's very critical that this\n  // code is as minimal as possible.\n  return function classResolver(state: GenericDictionary): ClassDictionary {\n    const resolvedClasses: Record<string, string> = {};\n\n    let modifierClasses = '';\n    for (const modifierName of Object.keys(modifiers)) {\n      if (state[modifierName]) {\n        modifierClasses = appendClasses(modifierClasses, modifiers[modifierName]);\n      }\n    }\n\n    let enumClasses = '';\n    for (const enumName of Object.keys(enums)) {\n      const enumValues = enums[enumName];\n      // if we have a class which matches the enumName and current state value, add it.\n      if (enumValues[state[enumName]]) {\n        enumClasses = appendClasses(enumClasses, enumValues[state[enumName]]);\n      }\n    }\n\n    for (const slotName of Object.keys(slots)) {\n      resolvedClasses[slotName] = appendClasses(slots[slotName], modifierClasses, enumClasses);\n    }\n    return resolvedClasses as ClassDictionary;\n  };\n};\n\ntype ResolvedMap = {\n  slots: Record<string, string>;\n  modifiers: Record<string, string>;\n  enums: Record<string, Record<string, string>>;\n};\n\n/**\n * Helper to take a css module map and translate it into { slots, modifiers, enums } where\n * slots are a matched name in the slotNames array, enums have underscores splitting the matched\n * name/value, and modifiers are everything else. Creating this split definition keeps runtime\n * resolution work to a minimum.\n */\nfunction createResolvedMap(classes: ClassDictionary): ResolvedMap {\n  const resolvedMap: ResolvedMap = {\n    slots: {},\n    modifiers: {},\n    enums: {},\n  };\n  const { slots, modifiers, enums } = resolvedMap;\n\n  // Iterate through classes\n  Object.keys(classes).forEach((key: string) => {\n    const classValue = classes[key];\n\n    if (classValue) {\n      const classParts = key.split('_');\n\n      // If the class is named the same as a slot, add it to the slot.\n      switch (classParts.length) {\n        case 2: // modifier (_modifierName)\n          modifiers[classParts[1]] = classValue;\n          break;\n\n        case 3: // enum (_enumName_enumValue)\n          const enumName = classParts[1];\n          const enumValue = classParts[2];\n          const enumValues = (enums[enumName] = enums[enumName] || {});\n\n          enumValues[enumValue] = classValue;\n          break;\n\n        default:\n          // slot (root)\n          slots[key] = classValue;\n      }\n    }\n  });\n\n  return resolvedMap;\n}\n"]}