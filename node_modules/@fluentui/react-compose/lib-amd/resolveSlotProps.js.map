{"version":3,"file":"resolveSlotProps.js","sourceRoot":"../src/","sources":["resolveSlotProps.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { defaultMappedProps } from './defaultMappedProps';\nimport { ComposePreparedOptions, GenericDictionary, MergePropsResult } from './types';\nimport { mergeSlotProp } from './mergeSlotProp';\n\nexport const NullRender = () => null;\n\n/**\n * Helper utility which resolves the slots and slot props derived from user input.\n */\nexport function resolveSlotProps<TProps, TState = TProps>(\n  result: MergePropsResult<TState>,\n  options: ComposePreparedOptions<TProps, TState>,\n): MergePropsResult<TState> {\n  const { state, slots, slotProps } = result;\n\n  // Derive the default slot props from the config, if provided.\n  options.slotProps.forEach(definition => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const nextSlotProps = definition(state as any);\n\n    Object.keys(nextSlotProps).forEach(key => {\n      slotProps[key] = { ...slotProps[key], ...nextSlotProps[key] };\n    });\n  });\n\n  //  Mix unrecognized props onto root, appropriate, excluding the handled props.\n  assignToMapObject(slotProps, 'root', getUnhandledProps(state, options));\n\n  // Iterate through slots and resolve shorthand values.\n  Object.keys(slots).forEach((slotName: string) => {\n    const slot = slots[slotName];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const slotProp = (state as any)[slotName];\n\n    if (slot && slotProp !== undefined && slotProp !== null) {\n      const mergedSlotProp = mergeSlotProp(\n        slotProp,\n        slotProps[slotName],\n        (slot && slot.shorthandConfig && slot.shorthandConfig.mappedProp) || defaultMappedProps[slot],\n      );\n\n      if (typeof mergedSlotProp.children === 'function') {\n        const { children, ...restProps } = slotProp;\n        // If the children is a function, replace the slot.\n        slots[slotName] = React.Fragment;\n        slotProps[slotName] = {\n          children: slotProp.children(slot, { ...slotProps[slotName], ...restProps }),\n        };\n      } else {\n        slotProps[slotName] = mergedSlotProp;\n      }\n    }\n\n    // Ensure no slots are falsey\n    if (!slots[slotName] || slotProp === null) {\n      slots[slotName] = NullRender;\n    }\n  });\n\n  return result;\n}\n\nfunction assignToMapObject(map: Record<string, {}>, key: string, value: {}) {\n  if (value) {\n    if (!map[key]) {\n      map[key] = {};\n    }\n    map[key] = { ...map[key], ...value };\n  }\n}\n\nfunction getUnhandledProps<TProps, TState>(\n  props: GenericDictionary,\n  options: ComposePreparedOptions<TProps, TState>,\n): GenericDictionary {\n  const unhandledProps: GenericDictionary = {};\n  const slots = Object.keys(options.slots);\n\n  for (const key of Object.keys(props)) {\n    if (\n      key !== 'className' &&\n      key !== 'as' &&\n      options.handledProps.indexOf(key as keyof TProps) === -1 &&\n      slots.indexOf(key) === -1\n    ) {\n      unhandledProps[key] = props[key];\n    }\n  }\n\n  return unhandledProps;\n}\n"]}