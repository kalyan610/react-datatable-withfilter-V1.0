{"version":3,"file":"react-compose.js","sources":["webpack://FluentCompose/webpack/bootstrap","webpack://FluentCompose//mnt/work/2/s/node_modules/tslib/tslib.es6.js","webpack://FluentCompose/appendClasses.ts","webpack://FluentCompose/compose.ts","webpack://FluentCompose/computeDisplayNames.ts","webpack://FluentCompose/createClassResolver.ts","webpack://FluentCompose/defaultComposeOptions.ts","webpack://FluentCompose/defaultMappedProps.ts","webpack://FluentCompose/index.ts","webpack://FluentCompose/mergeComposeOptions.ts","webpack://FluentCompose/mergeProps.ts","webpack://FluentCompose/mergeSlotProp.ts","webpack://FluentCompose/resolveClasses.ts","webpack://FluentCompose/resolveSlotProps.ts","webpack://FluentCompose/wasComposedPreviously.ts","webpack://FluentCompose/external \"React\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/index.js\");\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function appendClasses(...classes: string[]) {\n  let result = '';\n  for (const className of classes) {\n    if (className) {\n      result = (result ? `${result} ` : '') + className;\n    }\n  }\n\n  return result;\n}\n","import * as React from 'react';\n\nimport { ComponentWithAs, ComposedComponent, ComposeOptions, Input, InputComposeComponent } from './types';\nimport { wasComposedPreviously } from './wasComposedPreviously';\nimport { mergeComposeOptions } from './mergeComposeOptions';\n\nfunction compose<\n  TElementType extends keyof JSX.IntrinsicElements,\n  TInputProps,\n  TInputStylesProps,\n  TParentProps,\n  TParentStylesProps\n>(\n  input: Input<TElementType, TInputProps>,\n  inputOptions: ComposeOptions<TInputProps, TInputStylesProps, TParentProps, TParentStylesProps> = {},\n) {\n  const composeOptions = mergeComposeOptions(\n    input as Input,\n    (inputOptions as unknown) as ComposeOptions,\n    wasComposedPreviously(input) ? input.fluentComposeConfig : undefined,\n  );\n\n  const Component = (React.forwardRef<HTMLElement, TInputProps & TParentProps & { as?: React.ElementType }>(\n    (props, ref) => {\n      return composeOptions.render(props, ref as React.Ref<HTMLDivElement>, {\n        ...composeOptions,\n        state: composeOptions.state(props, ref, composeOptions),\n        slots: {\n          ...composeOptions.slots,\n          __self: Component,\n        },\n      });\n    },\n  ) as unknown) as ComponentWithAs<TElementType, TInputProps & TParentProps>;\n\n  Component.displayName = composeOptions.displayName;\n\n  if ((input as InputComposeComponent).defaultProps) {\n    Component.defaultProps = (input as InputComposeComponent).defaultProps;\n  }\n\n  ((Component as unknown) as ComposedComponent).fluentComposeConfig = composeOptions;\n\n  return Component;\n}\n\nexport default compose;\n","import { ComposeOptions, ComposePreparedOptions } from './types';\n/**\n * Given input/parent options, which are both assumed to be defined and populated with\n * displayNames array, return a string array of display names.\n */\nexport function computeDisplayNames(inputOptions: ComposeOptions, parentOptions: ComposePreparedOptions): string[] {\n  if (inputOptions.overrideStyles) {\n    return [inputOptions.displayName].filter(Boolean) as string[];\n  }\n  // To support styles composition we need to properly pick up display names\n  return inputOptions.displayName\n    ? parentOptions.displayNames.concat(inputOptions.displayName)\n    : parentOptions.displayNames;\n}\n","import { GenericDictionary, ClassDictionary } from './types';\nimport { appendClasses } from './appendClasses';\n\n/**\n * `createClassResolver` is a factory function which creates a state to classmap resolver for\n * slot specific class names. It can be used in conjunction with the `compose` option `classes` to\n * inject css modules without writing cx(...) logic manually distributing classnames.\n *\n * Class names which map to slots are automatically distributed to correct slot props.\n *\n * Class names with an underscore are interpretted as enum matchable classes. For example,\n * the class \"size_large\" would be applied to the `root` slot when the component's state contains\n * a prop `size` with a value `large`.\n *\n * Remaining class names would be interpretted as modifiers, applied to the `root` slot when\n * the component `state` contains a truthy matching prop name.\n */\nexport const createClassResolver = (classes: ClassDictionary) => {\n  // This is in creation time, so this will happen once per css file.\n  const { slots, modifiers, enums } = createResolvedMap(classes);\n\n  // Everything in the function below will happen at runtime, so it's very critical that this\n  // code is as minimal as possible.\n  return function classResolver(state: GenericDictionary): ClassDictionary {\n    const resolvedClasses: Record<string, string> = {};\n\n    let modifierClasses = '';\n    for (const modifierName of Object.keys(modifiers)) {\n      if (state[modifierName]) {\n        modifierClasses = appendClasses(modifierClasses, modifiers[modifierName]);\n      }\n    }\n\n    let enumClasses = '';\n    for (const enumName of Object.keys(enums)) {\n      const enumValues = enums[enumName];\n      // if we have a class which matches the enumName and current state value, add it.\n      if (enumValues[state[enumName]]) {\n        enumClasses = appendClasses(enumClasses, enumValues[state[enumName]]);\n      }\n    }\n\n    for (const slotName of Object.keys(slots)) {\n      resolvedClasses[slotName] = appendClasses(slots[slotName], modifierClasses, enumClasses);\n    }\n    return resolvedClasses as ClassDictionary;\n  };\n};\n\ntype ResolvedMap = {\n  slots: Record<string, string>;\n  modifiers: Record<string, string>;\n  enums: Record<string, Record<string, string>>;\n};\n\n/**\n * Helper to take a css module map and translate it into { slots, modifiers, enums } where\n * slots are a matched name in the slotNames array, enums have underscores splitting the matched\n * name/value, and modifiers are everything else. Creating this split definition keeps runtime\n * resolution work to a minimum.\n */\nfunction createResolvedMap(classes: ClassDictionary): ResolvedMap {\n  const resolvedMap: ResolvedMap = {\n    slots: {},\n    modifiers: {},\n    enums: {},\n  };\n  const { slots, modifiers, enums } = resolvedMap;\n\n  // Iterate through classes\n  Object.keys(classes).forEach((key: string) => {\n    const classValue = classes[key];\n\n    if (classValue) {\n      const classParts = key.split('_');\n\n      // If the class is named the same as a slot, add it to the slot.\n      switch (classParts.length) {\n        case 2: // modifier (_modifierName)\n          modifiers[classParts[1]] = classValue;\n          break;\n\n        case 3: // enum (_enumName_enumValue)\n          const enumName = classParts[1];\n          const enumValue = classParts[2];\n          const enumValues = (enums[enumName] = enums[enumName] || {});\n\n          enumValues[enumValue] = classValue;\n          break;\n\n        default:\n          // slot (root)\n          slots[key] = classValue;\n      }\n    }\n  });\n\n  return resolvedMap;\n}\n","import { ComposePreparedOptions } from './types';\n\nexport const defaultComposeOptions: Required<ComposePreparedOptions> = {\n  className: process.env.NODE_ENV === 'production' ? '' : 'no-classname-🙉',\n  classes: [],\n  displayName: '',\n  displayNames: [],\n  mapPropsToStylesPropsChain: [],\n  render: () => null,\n  handledProps: [] as never[],\n  overrideStyles: false,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  slots: { __self: () => null },\n  slotProps: [],\n  state: props => props,\n  resolveSlotProps: () => ({}),\n  shorthandConfig: {},\n};\n","/**\n * A set of mapped props for intrinsic element types.\n */\nexport const defaultMappedProps: Record<string, string> = {\n  iframe: 'src',\n  img: 'src',\n  input: 'type',\n};\n","export { default as compose } from './compose';\nexport { createClassResolver } from './createClassResolver';\nexport { mergeProps } from './mergeProps';\nexport { mergeSlotProp } from './mergeSlotProp';\nexport * from './types';\n","import { ComposeOptions, ComposePreparedOptions, Input } from './types';\nimport { computeDisplayNames } from './computeDisplayNames';\nimport { defaultComposeOptions } from './defaultComposeOptions';\n\nexport function mergeComposeOptions(\n  input: Input,\n  inputOptions: ComposeOptions,\n  parentOptions: Required<ComposePreparedOptions> = defaultComposeOptions,\n): Required<ComposePreparedOptions> {\n  const mapPropsToSlotPropsChain = inputOptions.slotProps\n    ? [...parentOptions.slotProps, inputOptions.slotProps]\n    : parentOptions.slotProps;\n\n  const resolveSlotProps = <P = {}>(props: P) =>\n    mapPropsToSlotPropsChain.reduce<Record<string, object>>((acc, definition) => {\n      const nextProps = { ...definition(props) };\n      const slots: string[] = [...Object.keys(acc), ...Object.keys(nextProps)];\n      const mergedSlotProps: Record<string, object> = {};\n\n      slots.forEach(slot => {\n        if (!mergedSlotProps[slot]) {\n          mergedSlotProps[slot] = {\n            ...acc[slot],\n            ...nextProps[slot],\n          };\n        }\n      });\n\n      return mergedSlotProps;\n    }, {});\n\n  const inputClasses = Array.isArray(inputOptions.classes) ? inputOptions.classes : [inputOptions.classes];\n\n  const state: ComposePreparedOptions['state'] = (props, ref, options) => {\n    if (inputOptions.state) {\n      return inputOptions.state(parentOptions.state(props, ref, options), ref, options);\n    }\n\n    return parentOptions.state(props, ref, options);\n  };\n\n  return {\n    className: inputOptions.className || parentOptions.className,\n    classes: [...parentOptions.classes, ...inputClasses],\n\n    displayName: inputOptions.displayName || parentOptions.displayName,\n    displayNames: computeDisplayNames(inputOptions, parentOptions),\n\n    mapPropsToStylesPropsChain: inputOptions.mapPropsToStylesProps\n      ? [...parentOptions.mapPropsToStylesPropsChain, inputOptions.mapPropsToStylesProps]\n      : parentOptions.mapPropsToStylesPropsChain,\n\n    render: typeof input === 'function' ? input : parentOptions.render,\n\n    handledProps: [...parentOptions.handledProps, ...((inputOptions.handledProps as never[]) || ([] as never[]))],\n\n    overrideStyles: inputOptions.overrideStyles || false,\n\n    slots: {\n      ...parentOptions.slots,\n      ...inputOptions.slots,\n    },\n\n    slotProps: mapPropsToSlotPropsChain,\n\n    state,\n\n    resolveSlotProps,\n\n    shorthandConfig: {\n      ...parentOptions.shorthandConfig,\n      ...inputOptions.shorthandConfig,\n    },\n  };\n}\n","import { ComposePreparedOptions, MergePropsResult, GenericDictionary } from './types';\nimport { resolveClasses } from './resolveClasses';\nimport { resolveSlotProps } from './resolveSlotProps';\n\n/**\n * Merge props takes in state and compose options, and resolves slots and slotProps.\n * It's expected that the component will call mergeProps(state, options) from within\n * render; after resolving state and before rendering slots and slotProps.\n */\nexport function mergeProps<\n  TProps,\n  TState = TProps,\n  TSlots = GenericDictionary,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  TSlotProps = { [key in keyof TSlots]: any }\n>(state: TState, options: ComposePreparedOptions<TProps, TState>): MergePropsResult<TState, TSlots, TSlotProps> {\n  const result: MergePropsResult<TState> = {\n    state: state,\n    slots: {\n      ...options.slots,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      root: (state as any).as || options.slots.root || 'div',\n    },\n    slotProps: {},\n  };\n\n  // Resolve classes.\n  resolveClasses(result, options.classes);\n\n  // Resolve slotProps/slots from state.\n  resolveSlotProps(result, options);\n\n  // TODO: Resolve inline styles.\n\n  return result as MergePropsResult<TState, TSlots, TSlotProps>;\n}\n","import { SlotProp } from './types';\nimport * as React from 'react';\n\n/**\n * Merge props for a slot to a slot prop.\n * @param slotProp - Slot prop.\n * @param slotProps - Props for the slot.\n * @param mappedProp - Optional mapped prop name for the slotProp after merging.\n */\nexport function mergeSlotProp<TProps>(\n  slotProp: SlotProp<TProps>,\n  slotProps: TProps,\n  mappedProp: string = 'children',\n): SlotProp<TProps> {\n  if (typeof slotProp === 'object' && !React.isValidElement(slotProp)) {\n    return {\n      ...slotProp,\n      ...slotProps,\n    };\n  } else {\n    return {\n      [mappedProp]: slotProp,\n      ...slotProps,\n    };\n  }\n}\n","import { ComposePreparedOptions, ClassDictionary, GenericDictionary, MergePropsResult } from './types';\nimport { appendClasses } from './appendClasses';\n/**\n * Helper utility which takes in a classes array from compose options, resolves functions,\n * merges them into a final result, and distributes classnames to slotProps within the given\n * resolver result object.\n */\nexport function resolveClasses<TState>(\n  result: MergePropsResult<TState>,\n  classes: ComposePreparedOptions['classes'],\n): MergePropsResult<TState> {\n  const { state, slots, slotProps } = result;\n\n  for (const classFunctionOrObject of classes) {\n    const classObj: ClassDictionary | undefined =\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      typeof classFunctionOrObject === 'function' ? classFunctionOrObject(state, slots as any) : classFunctionOrObject;\n\n    if (classObj) {\n      for (const slotName of Object.keys(classObj)) {\n        if (classObj[slotName] && slots[slotName]) {\n          appendToSlotClassName(slotProps, slotName, classObj[slotName]);\n        }\n      }\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  appendToSlotClassName(slotProps, 'root', (state as any).className);\n\n  return result;\n}\n\nexport function appendToSlotClassName(\n  slotProps: Record<string, GenericDictionary>,\n  slotName: string,\n  className: string,\n) {\n  if (className) {\n    const slot = (slotProps[slotName] = slotProps[slotName] || {});\n    slot.className = appendClasses(slot.className, className);\n  }\n}\n","import * as React from 'react';\nimport { defaultMappedProps } from './defaultMappedProps';\nimport { ComposePreparedOptions, GenericDictionary, MergePropsResult } from './types';\nimport { mergeSlotProp } from './mergeSlotProp';\n\nexport const NullRender = () => null;\n\n/**\n * Helper utility which resolves the slots and slot props derived from user input.\n */\nexport function resolveSlotProps<TProps, TState = TProps>(\n  result: MergePropsResult<TState>,\n  options: ComposePreparedOptions<TProps, TState>,\n): MergePropsResult<TState> {\n  const { state, slots, slotProps } = result;\n\n  // Derive the default slot props from the config, if provided.\n  options.slotProps.forEach(definition => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const nextSlotProps = definition(state as any);\n\n    Object.keys(nextSlotProps).forEach(key => {\n      slotProps[key] = { ...slotProps[key], ...nextSlotProps[key] };\n    });\n  });\n\n  //  Mix unrecognized props onto root, appropriate, excluding the handled props.\n  assignToMapObject(slotProps, 'root', getUnhandledProps(state, options));\n\n  // Iterate through slots and resolve shorthand values.\n  Object.keys(slots).forEach((slotName: string) => {\n    const slot = slots[slotName];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const slotProp = (state as any)[slotName];\n\n    if (slot && slotProp !== undefined && slotProp !== null) {\n      const mergedSlotProp = mergeSlotProp(\n        slotProp,\n        slotProps[slotName],\n        (slot && slot.shorthandConfig && slot.shorthandConfig.mappedProp) || defaultMappedProps[slot],\n      );\n\n      if (typeof mergedSlotProp.children === 'function') {\n        const { children, ...restProps } = slotProp;\n        // If the children is a function, replace the slot.\n        slots[slotName] = React.Fragment;\n        slotProps[slotName] = {\n          children: slotProp.children(slot, { ...slotProps[slotName], ...restProps }),\n        };\n      } else {\n        slotProps[slotName] = mergedSlotProp;\n      }\n    }\n\n    // Ensure no slots are falsey\n    if (!slots[slotName] || slotProp === null) {\n      slots[slotName] = NullRender;\n    }\n  });\n\n  return result;\n}\n\nfunction assignToMapObject(map: Record<string, {}>, key: string, value: {}) {\n  if (value) {\n    if (!map[key]) {\n      map[key] = {};\n    }\n    map[key] = { ...map[key], ...value };\n  }\n}\n\nfunction getUnhandledProps<TProps, TState>(\n  props: GenericDictionary,\n  options: ComposePreparedOptions<TProps, TState>,\n): GenericDictionary {\n  const unhandledProps: GenericDictionary = {};\n  const slots = Object.keys(options.slots);\n\n  for (const key of Object.keys(props)) {\n    if (\n      key !== 'className' &&\n      key !== 'as' &&\n      options.handledProps.indexOf(key as keyof TProps) === -1 &&\n      slots.indexOf(key) === -1\n    ) {\n      unhandledProps[key] = props[key];\n    }\n  }\n\n  return unhandledProps;\n}\n","import { ComposedComponent, Input } from './types';\n\n/**\n * compose() allows you to pass two inputs:\n * - React.forwardRef + static fluentComposeConfig, i.e. previously composed component\n * - a function\n */\nexport function wasComposedPreviously<TElementType extends React.ElementType = 'div', TProps = {}>(\n  input: Input<TElementType, TProps>,\n): input is ComposedComponent<TProps> {\n  return !!(input as ComposedComponent<TProps>).fluentComposeConfig;\n}\n","module.exports = React;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClnMA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;ACTA;AAGA;AACA;AAEA;AAQA;AAEA;AAMA;AAEA;AAQA;AAGA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;;;;;;;;AC7CA;AAAA;AAAA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;AChGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjBA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AAEA;AAGA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAfA;AAiBA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AAEA;AAEA;AAKA;AAEA;AAEA;AAEA;AAIA;AACA;;;;;;;;;;;;;;;ACzEA;AACA;AAEA;;;;AAIA;AACA;AAOA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;AClCA;AAEA;;;;;AAKA;AACA;;AAGA;AAEA;AACA;AAIA;AAAA;AACA;AAIA;AACA;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAIA;AACA;AAIA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1CA;AACA;AAEA;AAEA;AAEA;;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;ACzFA;AAAA;AAAA;;;;AAIA;AACA;AAGA;AACA;;;;;;;;ACXA;;;;A","sourceRoot":""}