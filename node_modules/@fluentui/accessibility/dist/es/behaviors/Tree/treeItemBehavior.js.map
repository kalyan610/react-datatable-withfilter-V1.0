{"version":3,"sources":["behaviors/Tree/treeItemBehavior.ts"],"names":["keyboardKey","SpacebarKey","IS_FOCUSABLE_ATTRIBUTE","treeTitleBehavior","treeItemBehavior","props","definition","attributes","root","role","hasSubtree","expanded","selectable","selected","undefined","tabIndex","treeSize","index","level","keyActions","performClick","keyCombinations","keyCode","Enter","isSubtreeExpanded","collapse","ArrowLeft","focusFirstChild","ArrowRight","focusParent","expand","expandSiblings","performSelection","childBehaviors","title","process","env","NODE_ENV"],"mappings":"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","sourcesContent":["import { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\nimport { Accessibility, AriaRole } from '../../types';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { treeTitleBehavior } from './treeTitleBehavior';\n\n/**\n * @description\n * Triggers 'performClick' action with 'Spacebar' on 'root', when tree item is selectable and has no subtree. In other cases 'performClick' is triggered with 'Spacebar' or 'Enter'.\n * Triggers 'performSelection' action with 'Spacebar' on 'root', when has a opened subtree.\n * @specification\n * Adds attribute 'aria-expanded=true' based on the property 'expanded' if the component has 'hasSubtree' property.\n * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is true. Does not set the attribute otherwise.\n * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property.\n * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property.\n * Adds attribute 'aria-level=1' based on the property 'level' if the component has 'hasSubtree' property.\n * Adds attribute 'role=treeitem' to 'root' slot if 'hasSubtree' property is true. Sets the attribute to 'none' otherwise.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'expandSiblings' action with '*' on 'root'.\n * Triggers 'focusParent' action with 'ArrowLeft' on 'root', when has a closed subtree.\n * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.\n * Triggers 'focusFirstChild' action with 'ArrowRight' on 'root', when has an opened subtree.\n */\nexport const treeItemBehavior: Accessibility<TreeItemBehaviorProps> = props => {\n  const definition = {\n    attributes: {\n      root: {\n        role: 'none',\n        ...(props.hasSubtree && {\n          'aria-expanded': props.expanded,\n          'aria-selected': props.selectable ? props.selected || false : undefined,\n          tabIndex: -1,\n          [IS_FOCUSABLE_ATTRIBUTE]: true,\n          role: 'treeitem' as AriaRole,\n          'aria-setsize': props.treeSize,\n          'aria-posinset': props.index,\n          'aria-level': props.level,\n        }),\n      },\n    },\n    keyActions: {\n      root: {\n        performClick: {\n          keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n        },\n        ...(isSubtreeExpanded(props) && {\n          collapse: {\n            keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n          },\n          focusFirstChild: {\n            keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n          },\n          focusParent: {\n            keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n          },\n        }),\n        ...(!isSubtreeExpanded(props) &&\n          props.hasSubtree && {\n            expand: {\n              keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n            },\n            focusParent: {\n              keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n            },\n          }),\n        expandSiblings: {\n          keyCombinations: [{ keyCode: keyboardKey['*'] }],\n        },\n        ...(props.selectable && {\n          performClick: {\n            keyCombinations: props.hasSubtree ? [{ keyCode: keyboardKey.Enter }] : [{ keyCode: SpacebarKey }],\n          },\n          performSelection: {\n            keyCombinations: [{ keyCode: SpacebarKey }],\n          },\n        }),\n      },\n    },\n    childBehaviors: {\n      title: treeTitleBehavior,\n    },\n  };\n\n  if (process.env.NODE_ENV !== 'production' && !props.hasSubtree) {\n    // Override the default trigger's accessibility schema class.\n    definition.attributes.root['data-aa-class'] = 'SingleTreeItem';\n  }\n\n  return definition;\n};\n\nexport type TreeItemBehaviorProps = {\n  /** If item is a subtree, it indicates if it's expanded. */\n  expanded?: boolean;\n  level?: number;\n  index?: number;\n  hasSubtree?: boolean;\n  treeSize?: number;\n  selectable?: boolean;\n  selected?: boolean;\n};\n\n/** Checks if current tree item has a subtree and it is expanded */\nconst isSubtreeExpanded = (props: TreeItemBehaviorProps): boolean => {\n  const { hasSubtree, expanded } = props;\n  return !!(hasSubtree && expanded);\n};\n"],"file":"treeItemBehavior.js"}