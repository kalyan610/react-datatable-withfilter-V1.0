{"version":3,"sources":["behaviors/Button/toggleButtonBehavior.ts"],"names":["buttonBehavior","toggleButtonBehavior","props","behaviorData","attributes","root"],"mappings":"AACA,SAASA,cAAT,QAAoD,kBAApD;AAEA;;;;;;;;;AAQA,OAAO,IAAMC,oBAA8D,GAAG,SAAjEA,oBAAiE,CAAAC,KAAK,EAAI;AACrF,MAAMC,YAAY,GAAGH,cAAc,CAACE,KAAD,CAAnC;AACAC,EAAAA,YAAY,CAACC,UAAb,CAAwBC,IAAxB,qBACKF,YAAY,CAACC,UAAb,CAAwBC,IAD7B;AAEE,oBAAgB,CAAC,CAACH,KAAK,CAAC,QAAD;AAFzB;AAKA,SAAOC,YAAP;AACD,CARM","sourcesContent":["import { Accessibility } from '../../types';\nimport { buttonBehavior, ButtonBehaviorProps } from './buttonBehavior';\n\n/**\n * @specification\n * Adds role='button' if element type is other than 'button'. This allows screen readers to handle the component as a button.\n * Adds attribute 'tabIndex=0' if element type is other than 'button'.\n * Adds attribute 'aria-pressed=true' based on the property 'active'.\n * Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n */\nexport const toggleButtonBehavior: Accessibility<ToggleButtonBehaviorProps> = props => {\n  const behaviorData = buttonBehavior(props);\n  behaviorData.attributes.root = {\n    ...behaviorData.attributes.root,\n    'aria-pressed': !!props['active'],\n  };\n\n  return behaviorData;\n};\n\ntype ToggleButtonBehaviorProps = ButtonBehaviorProps & {\n  /** Indicates if a button is in pressed state. */\n  active: boolean;\n};\n"],"file":"toggleButtonBehavior.js"}