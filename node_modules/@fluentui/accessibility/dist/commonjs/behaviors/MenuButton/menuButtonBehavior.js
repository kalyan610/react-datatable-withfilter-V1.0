"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.menuButtonBehavior = void 0;

var _includes2 = _interopRequireDefault(require("lodash/includes"));

var _merge2 = _interopRequireDefault(require("lodash/merge"));

var _keyboardKey = require("@fluentui/keyboard-key");

var _popupBehavior = require("../Popup/popupBehavior");

/**
 * @description
 * Implements ARIA [MenuButton](https://www.w3.org/TR/wai-aria-practices/#menubutton) design pattern.
 * Adds attribute 'aria-controls=menu-id' based on the property 'open' to 'trigger' slot.
 *
 * @specification
 * Adds attribute 'aria-haspopup=true' to 'trigger' slot if 'contextMenu' property is not set.
 * Adds attribute 'tabIndex=-1' based on the property 'open' to 'trigger' slot.
 * Adds attribute 'aria-expanded=true' based on the property 'open' to 'trigger' slot.
 * Adds attribute 'id=trigger-id' based on the property 'triggerId' to 'trigger' slot.
 * Adds attribute 'id=menu-id' based on the property 'menuId' to 'menu' slot.
 * Adds attribute 'aria-labelledby=trigger-id' based on the property 'triggerId' to 'menu' slot.
 */
var menuButtonBehavior = function menuButtonBehavior(props) {
  var behavior = (0, _popupBehavior.popupBehavior)(props);
  return (0, _merge2.default)(behavior, {
    attributes: {
      trigger: Object.assign({
        'aria-controls': props.open ? props.menuId : undefined,
        'aria-expanded': props.open || undefined,
        'aria-haspopup': props.contextMenu ? undefined : 'true',
        id: props.triggerId
      }, !props.contextMenu && props.open && {
        tabIndex: -1
      }),
      menu: {
        'aria-labelledby': props.triggerId,
        id: props.menuId
      }
    },
    keyActions: {
      root: Object.assign({}, props.open ? {
        closeMenu: {
          keyCombinations: [{
            keyCode: _keyboardKey.keyboardKey.Tab,
            shiftKey: false
          }, {
            keyCode: _keyboardKey.keyboardKey.Tab,
            shiftKey: true
          }]
        }
      } : (0, _includes2.default)(props.on, 'click') && {
        openAndFocusFirst: {
          keyCombinations: [{
            keyCode: _keyboardKey.keyboardKey.ArrowDown
          }]
        },
        openAndFocusLast: {
          keyCombinations: [{
            keyCode: _keyboardKey.keyboardKey.ArrowUp
          }]
        }
      })
    }
  });
};

exports.menuButtonBehavior = menuButtonBehavior;
//# sourceMappingURL=menuButtonBehavior.js.map
