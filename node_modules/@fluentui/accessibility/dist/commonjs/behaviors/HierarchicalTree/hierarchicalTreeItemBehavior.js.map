{"version":3,"sources":["behaviors/HierarchicalTree/hierarchicalTreeItemBehavior.ts"],"names":["hierarchicalTreeItemBehavior","props","attributes","root","role","hasItems","open","tabIndex","IS_FOCUSABLE_ATTRIBUTE","keyActions","performClick","keyCombinations","keyCode","keyboardKey","Enter","SpacebarKey","isSubtreeOpen","receiveFocus","ArrowLeft","collapse","focusSubtree","ArrowRight","expand"],"mappings":";;;;;AAAA;;AAEA;;AAGA;;;;;;;;;;;;;AAaO,IAAMA,4BAA8E,GAAG,SAAjFA,4BAAiF,CAAAC,KAAK;AAAA;;AAAA,SAAK;AACtGC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI;AACFC,QAAAA,IAAI,EAAE;AADJ,SAEEH,KAAK,CAACI,QAAN;AACF,yBAAiBJ,KAAK,CAACK,IADrB;AAEFC,QAAAA,QAAQ,EAAE,CAAC;AAFT,cAGDC,kCAHC,IAGwB,IAHxB,OAIFJ,IAJE,GAII,UAJJ,OAFF;AADM,KAD0F;AAYtGK,IAAAA,UAAU,EAAE;AACVN,MAAAA,IAAI;AACFO,QAAAA,YAAY,EAAE;AACZC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,yBAAYC;AAAvB,WAAD,EAAiC;AAAEF,YAAAA,OAAO,EAAEG;AAAX,WAAjC;AADL;AADZ,SAIEC,aAAa,CAACf,KAAD,CAAb,IAAwB;AAC1BgB,QAAAA,YAAY,EAAE;AACZN,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,yBAAYK;AAAvB,WAAD;AADL,SADY;AAI1BC,QAAAA,QAAQ,EAAE;AACRR,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,yBAAYK;AAAvB,WAAD;AADT,SAJgB;AAO1BE,QAAAA,YAAY,EAAE;AACZT,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,yBAAYQ;AAAvB,WAAD;AADL;AAPY,OAJ1B,EAeE,CAACL,aAAa,CAACf,KAAD,CAAd,IAAyB;AAC3BqB,QAAAA,MAAM,EAAE;AACNX,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,yBAAYQ;AAAvB,WAAD;AADX;AADmB,OAf3B;AADM;AAZ0F,GAAL;AAAA,CAA5F;;;;AA4CP;AACA,IAAML,aAAa,GAAG,SAAhBA,aAAgB,CAACf,KAAD,EAAuD;AAAA,MACnEI,QADmE,GAChDJ,KADgD,CACnEI,QADmE;AAAA,MACzDC,IADyD,GAChDL,KADgD,CACzDK,IADyD;AAE3E,SAAO,CAAC,EAAED,QAAQ,IAAIC,IAAd,CAAR;AACD,CAHD","sourcesContent":["import { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { Accessibility } from '../../types';\n\n/**\n * @description\n * Adds role 'treeitem' to a non-leaf item and 'none' to a leaf item.\n * Adds 'aria-expanded' with a value based on the 'open' prop if item is not a leaf.\n * Adds 'tabIndex' as '-1' if the item is not a leaf.\n *\n * @specification\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'receiveFocus' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.\n * Triggers 'focusSubtree' action with 'ArrowRight' on 'root', when has an opened subtree.\n */\nexport const hierarchicalTreeItemBehavior: Accessibility<HierarchicalTreeItemBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      role: 'none',\n      ...(props.hasItems && {\n        'aria-expanded': props.open,\n        tabIndex: -1,\n        [IS_FOCUSABLE_ATTRIBUTE]: true,\n        role: 'treeitem',\n      }),\n    },\n  },\n  keyActions: {\n    root: {\n      performClick: {\n        keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n      },\n      ...(isSubtreeOpen(props) && {\n        receiveFocus: {\n          keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n        },\n        collapse: {\n          keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n        },\n        focusSubtree: {\n          keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n        },\n      }),\n      ...(!isSubtreeOpen(props) && {\n        expand: {\n          keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n        },\n      }),\n    },\n  },\n});\n\nexport type HierarchicalTreeItemBehaviorProps = {\n  /** If item is a subtree, it contains items. */\n  hasItems?: boolean;\n  /** If item is a subtree, it indicates if it's open. */\n  open?: boolean;\n};\n\n/** Checks if current tree item has a subtree and it is opened */\nconst isSubtreeOpen = (props: HierarchicalTreeItemBehaviorProps): boolean => {\n  const { hasItems, open } = props;\n  return !!(hasItems && open);\n};\n"],"file":"hierarchicalTreeItemBehavior.js"}