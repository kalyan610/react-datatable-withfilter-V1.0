{"version":3,"sources":["behaviors/Button/buttonBehavior.ts"],"names":["buttonBehavior","props","definition","attributes","root","role","as","undefined","tabIndex","disabled","loading","keyActions","performClick","keyCombinations","keyCode","keyboardKey","Enter","SpacebarKey","process","env","NODE_ENV"],"mappings":";;;;;AAAA;;AAGA;;;;;;;;AAQO,IAAMA,cAAkD,GAAG,SAArDA,cAAqD,CAAAC,KAAK,EAAI;AACzE,MAAMC,UAAmC,GAAG;AAC1CC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAEJ,KAAK,CAACK,EAAN,KAAa,QAAb,GAAwBC,SAAxB,GAAoC,QADtC;AAEJC,QAAAA,QAAQ,EAAEP,KAAK,CAACK,EAAN,KAAa,QAAb,GAAwBC,SAAxB,GAAoC,CAF1C;AAGJE,QAAAA,QAAQ,EAAER,KAAK,CAACQ,QAAN,IAAkB,CAACR,KAAK,CAACS,OAAzB,GAAoCT,KAAK,CAACK,EAAN,KAAa,QAAb,GAAwB,IAAxB,GAA+BC,SAAnE,GAAgFA,SAHtF;AAIJ,yBAAiBN,KAAK,CAACQ,QAAN,IAAkBR,KAAK,CAACS;AAJrC;AADI,KAD8B;AAU1CC,IAAAA,UAAU,EAAE;AACVP,MAAAA,IAAI,oBACEH,KAAK,CAACK,EAAN,KAAa,QAAb,IACFL,KAAK,CAACK,EAAN,KAAa,GADX,IACkB;AAClBM,QAAAA,YAAY,EAAE;AACZC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,yBAAYC;AAAvB,WAAD,EAAiC;AAAEF,YAAAA,OAAO,EAAEG;AAAX,WAAjC;AADL;AADI,OAFpB;AADM;AAV8B,GAA5C;;AAsBA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCnB,KAAK,CAACS,OAAnD,EAA4D;AAC1D;AACAR,IAAAA,UAAU,CAACC,UAAX,CAAsBC,IAAtB,CAA2B,eAA3B,IAA8C,eAA9C;AACD;;AAED,SAAOF,UAAP;AACD,CA7BM","sourcesContent":["import { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\nimport { Accessibility, AccessibilityDefinition } from '../../types';\n\n/**\n * @specification\n * Adds role='button' if element type is other than 'button'. This allows screen readers to handle the component as a button.\n * Adds attribute 'tabIndex=0' if element type is other than 'button'.\n * Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.\n * Adds attribute 'aria-disabled=true' based on the property 'loading'.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n */\nexport const buttonBehavior: Accessibility<ButtonBehaviorProps> = props => {\n  const definition: AccessibilityDefinition = {\n    attributes: {\n      root: {\n        role: props.as === 'button' ? undefined : 'button',\n        tabIndex: props.as === 'button' ? undefined : 0,\n        disabled: props.disabled && !props.loading ? (props.as === 'button' ? true : undefined) : undefined,\n        'aria-disabled': props.disabled || props.loading,\n      },\n    },\n\n    keyActions: {\n      root: {\n        ...(props.as !== 'button' &&\n          props.as !== 'a' && {\n            performClick: {\n              keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n            },\n          }),\n      },\n    },\n  };\n\n  if (process.env.NODE_ENV !== 'production' && props.loading) {\n    // Override the default trigger's accessibility schema class.\n    definition.attributes.root['data-aa-class'] = 'LoadingButton';\n  }\n\n  return definition;\n};\n\nexport type ButtonBehaviorProps = {\n  /** Element type. */\n  as: string;\n  /** A button can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n  loading?: boolean;\n};\n"],"file":"buttonBehavior.js"}