"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var keyboard_key_1 = require("@fluentui/keyboard-key");
var attributes_1 = require("../../attributes");
/**
 * @description
 * The behavior is designed for particular structure of menu item. The item consists of root element and anchor inside the root element.
 *
 * @specification
 * Adds role 'presentation' to 'wrapper' slot.
 * Adds role 'button' to 'root' slot.
 * Adds attribute 'tabIndex=0' to 'root' slot.
 * Adds attribute 'data-is-focusable=false' to 'root' slot if 'disabled' property is true. Sets the attribute to 'true' otherwise.
 * Adds attribute 'aria-label' based on the property 'aria-label' to 'root' slot.
 * Adds attribute 'aria-labelledby' based on the property 'aria-labelledby' to 'root' slot.
 * Adds attribute 'aria-describedby' based on the property 'aria-describedby' to 'root' slot.
 * Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.
 * Adds attribute 'aria-haspopup=true' to 'root' slot if 'hasMenu' property is set.
 * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'wrapper'.
 * Triggers 'closeMenuAndFocusTrigger' action with 'Escape' on 'wrapper'.
 * Triggers 'openMenu' action with 'ArrowDown' on 'wrapper', when orientation is horizontal.
 * Triggers 'doNotNavigateNextParentItem' action with 'ArrowLeft' or 'ArrowRight' on 'wrapper', when toolbar button has submenu and it is opened.
 */
exports.menuItemAsToolbarButtonBehavior = function (props) {
    var _a;
    return ({
        attributes: {
            wrapper: {
                role: 'presentation',
            },
            root: (_a = {
                    role: 'button',
                    tabIndex: 0,
                    'aria-haspopup': props.hasMenu ? 'true' : undefined,
                    'aria-disabled': props['disabled'],
                    'aria-label': props['aria-label'],
                    'aria-labelledby': props['aria-labelledby'],
                    'aria-describedby': props['aria-describedby']
                },
                _a[attributes_1.IS_FOCUSABLE_ATTRIBUTE] = !props.disabled,
                _a),
        },
        keyActions: {
            wrapper: {
                performClick: {
                    keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.Enter }, { keyCode: keyboard_key_1.SpacebarKey }],
                },
                closeMenuAndFocusTrigger: {
                    keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.Escape }],
                },
                openMenu: !props.vertical && {
                    keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.ArrowDown }],
                },
                doNotNavigateNextParentItem: {
                    keyCombinations: props.hasMenu && props.menuOpen
                        ? [{ keyCode: keyboard_key_1.keyboardKey.ArrowLeft }, { keyCode: keyboard_key_1.keyboardKey.ArrowRight }]
                        : null,
                },
            },
        },
    });
};
