"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var accessibility_1 = require("@fluentui/accessibility");
describe('HierarchicalTreeItemBehavior', function () {
    describe('tabIndex', function () {
        test("is added with '0' value to an item that is expandable", function () {
            var expectedResult = accessibility_1.hierarchicalTreeItemBehavior({ hasItems: true });
            expect(expectedResult.attributes.root.tabIndex).toEqual(-1);
        });
        test("is not added to a leaf item (no items)", function () {
            var expectedResult = accessibility_1.hierarchicalTreeItemBehavior({});
            expect(expectedResult.attributes.root.tabIndex).toBeUndefined();
        });
        test("is not added to a leaf item (empty items)", function () {
            var expectedResult = accessibility_1.hierarchicalTreeItemBehavior({ hasItems: false });
            expect(expectedResult.attributes.root.tabIndex).toBeUndefined();
        });
    });
    describe('aria-expanded', function () {
        test("is not added to a leaf item", function () {
            var expectedResult = accessibility_1.hierarchicalTreeItemBehavior({});
            expect(expectedResult.attributes.root['aria-expanded']).toBeUndefined();
        });
        test("is added with 'false' value to an item that is expandable but not open", function () {
            var expectedResult = accessibility_1.hierarchicalTreeItemBehavior({
                hasItems: true,
                open: false,
            });
            expect(expectedResult.attributes.root['aria-expanded']).toEqual(false);
        });
        test("is added with 'false' value to an item that is expandable and open", function () {
            var expectedResult = accessibility_1.hierarchicalTreeItemBehavior({ hasItems: true, open: true });
            expect(expectedResult.attributes.root['aria-expanded']).toEqual(true);
        });
    });
    describe('role', function () {
        test("is 'treeitem' if not a leaf", function () {
            var expectedResult = accessibility_1.hierarchicalTreeItemBehavior({ hasItems: true });
            expect(expectedResult.attributes.root.role).toEqual('treeitem');
        });
        test("is 'none' if a leaf", function () {
            var expectedResult = accessibility_1.hierarchicalTreeItemBehavior({});
            expect(expectedResult.attributes.root.role).toEqual('none');
        });
    });
});
