{"version":3,"sources":["hooks/useCSS.ts"],"names":["SPECIFICITY_CLASSNAME","process","env","NODE_ENV","CLASSNAME_PREFIX","Stylis","_Stylis","default","stylisOptions","cascade","compress","global","keyframe","preserve","semicolon","stylis","use","focusVisiblePlugin","rtlStylis","rtlPlugin","stylesCache","useCSS","theme","renderer","rtl","styles","length","resolvedStyles","reduce","acc","style","split","forEach","className","undefined","push","serializedStyles","serializedClassName","name","selector","css","renderGlobal"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAPA;AAEA;AAEA;AAaA;AACA;AACA;AAEA;AACA;AACA,IAAMA,qBAAqB,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,KAAxC,GAAgD,SAA9E;AACA,IAAMC,gBAAgB,GAAG,GAAzB,C,CAEA;AACA;;AACA,IAAMC,MAAM,GAAIC,eAAD,CAAiBC,OAAjB,IAA4BD,eAA3C;AACA,IAAME,aAAa,GAAG;AACpBC,EAAAA,OAAO,EAAE,IADW;AAEpBC,EAAAA,QAAQ,EAAE,KAFU;AAGpBC,EAAAA,MAAM,EAAE,KAHY;AAIpBC,EAAAA,QAAQ,EAAE,KAJU;AAKpBC,EAAAA,QAAQ,EAAE,KALU;AAMpBC,EAAAA,SAAS,EAAE;AANS,CAAtB,C,CASA;;AACA,IAAMC,MAAM,GAAG,IAAIV,MAAJ,CAAWG,aAAX,CAAf;AACAO,MAAM,CAACC,GAAP,CAAWC,iCAAX;AAEA,IAAMC,SAAS,GAAG,IAAIb,MAAJ,CAAWG,aAAX,CAAlB;AACAU,SAAS,CAACF,GAAV,CAAcC,iCAAd;AACAC,SAAS,CAACF,GAAV,CAAcG,wBAAd,E,CAEA;;AACA,IAAMC,WAAmC,GAAG,EAA5C,C,CAEA;AACA;AACA;;AAEO,SAASC,MAAT,GAA+C;AAAA,0BACnB,gCADmB;AAAA,MAC5CC,KAD4C,qBAC5CA,KAD4C;AAAA,MACrCC,QADqC,qBACrCA,QADqC;AAAA,MAC3BC,GAD2B,qBAC3BA,GAD2B;;AAAA,oCAA5BC,MAA4B;AAA5BA,IAAAA,MAA4B;AAAA;;AAGpD,MAAIA,MAAM,CAACC,MAAP,KAAkB,CAAtB,EAAyB;AACvB,WAAO,EAAP;AACD,GALmD,CAOpD;;;AACA,MAAMC,cAAc,GAAGF,MAAM,CAACG,MAAP,CAAkC,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACvE,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,MAAAA,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,OAAjB,CAAyB,UAAAC,SAAS,EAAI;AACpC,YAAIb,WAAW,CAACa,SAAD,CAAX,KAA2BC,SAA/B,EAA0C;AACxCL,UAAAA,GAAG,CAACM,IAAJ,CAASf,WAAW,CAACa,SAAD,CAApB;AACD;AACF,OAJD;AAKD,KAND,MAMO;AACLJ,MAAAA,GAAG,CAACM,IAAJ,CAASL,KAAT;AACD;;AAED,WAAOD,GAAP;AACD,GAZsB,EAYpB,EAZoB,CAAvB,CARoD,CAsBpD;;AACA,MAAMO,gBAAgB,GAAG,gCAAgBT,cAAhB,EAAgCP,WAAhC,EAA6CE,KAA7C,CAAzB,CAvBoD,CAwBpD;AACA;;AACA,MAAMe,mBAAmB,SAAMb,GAAG,GAAG,GAAH,GAAS,EAAlB,IAAuBpB,gBAAvB,GAA0CgC,gBAAgB,CAACE,IAApF;AAEAlB,EAAAA,WAAW,CAACiB,mBAAD,CAAX,GAAmCD,gBAAgB,CAACX,MAApD,CA5BoD,CA8BpD;;AACA,MAAMc,QAAQ,SAAOvC,qBAAP,SAAgCqC,mBAA9C,CA/BoD,CAiCpD;;AACA,MAAMG,GAAG,GAAGhB,GAAG,GAAGN,SAAS,CAACqB,QAAD,EAAWH,gBAAgB,CAACX,MAA5B,CAAZ,GAAkDV,MAAM,CAACwB,QAAD,EAAWH,gBAAgB,CAACX,MAA5B,CAAvE;AAEAF,EAAAA,QAAQ,CAACkB,YAAT,CAAsBD,GAAtB;AAEA,SAAO,yBAAGxC,qBAAH,EAA0BqC,mBAA1B,CAAP;AACD","sourcesContent":["import { serializeStyles } from '@emotion/serialize';\nimport { ICSSInJSStyle, ThemePrepared } from '@fluentui/styles';\nimport cx from 'classnames';\n// @ts-ignore\nimport _Stylis from 'stylis';\n// @ts-ignore No typings :(\nimport focusVisiblePlugin from '@quid/stylis-plugin-focus-visible';\n// @ts-ignore No typings :(\nimport rtlPlugin from 'stylis-plugin-rtl';\n\nimport { useFluentContext } from '../context';\n\n//\n// Types\n//\n\n// Inline keyframe definitions are not supported by useCSS() hook\nexport type UseCSSStyle = Omit<ICSSInJSStyle, 'animationName'> & { animationName?: string };\nexport type UseCSSStyleInput = string | UseCSSStyle | ((theme: ThemePrepared) => UseCSSStyle);\n\n//\n// Definitions\n//\n\n// SPECIFICITY_CLASSNAME is used to increase the specificity of produced CSS to win over other defined classes.\n// \"css\" used for production to decrease DOM size.\nconst SPECIFICITY_CLASSNAME = process.env.NODE_ENV === 'production' ? 'css' : 'use-css';\nconst CLASSNAME_PREFIX = 'f';\n\n// `stylis@3` is a CJS library, there are known issues with them:\n// https://github.com/rollup/rollup/issues/1267#issuecomment-446681320\nconst Stylis = (_Stylis as any).default || _Stylis;\nconst stylisOptions = {\n  cascade: true,\n  compress: false,\n  global: false,\n  keyframe: false,\n  preserve: false,\n  semicolon: false,\n};\n\n// Two separate instances are requires as we can't call Stylis plugins conditionally\nconst stylis = new Stylis(stylisOptions);\nstylis.use(focusVisiblePlugin);\n\nconst rtlStylis = new Stylis(stylisOptions);\nrtlStylis.use(focusVisiblePlugin);\nrtlStylis.use(rtlPlugin);\n\n// Stores a mapping between hashed string and cssified styles object\nconst stylesCache: Record<string, string> = {};\n\n//\n// Hook\n//\n\nexport function useCSS(...styles: UseCSSStyleInput[]) {\n  const { theme, renderer, rtl } = useFluentContext();\n\n  if (styles.length === 0) {\n    return '';\n  }\n\n  // This resolution allows to map passed classnames to actual styles that can be used on next styles\n  const resolvedStyles = styles.reduce<UseCSSStyleInput[]>((acc, style) => {\n    if (typeof style === 'string') {\n      style.split(' ').forEach(className => {\n        if (stylesCache[className] !== undefined) {\n          acc.push(stylesCache[className]);\n        }\n      });\n    } else {\n      acc.push(style);\n    }\n\n    return acc;\n  }, []);\n\n  // serializeStyles() will concat all passed styles and will resolve functions\n  const serializedStyles = serializeStyles(resolvedStyles, stylesCache, theme);\n  // \".name\" is not a valid CSS classname as it can start from a digit\n  //  \"r\" prefix is used to avoid collision between LTR and RTL styles\n  const serializedClassName = `${rtl ? 'r' : ''}${CLASSNAME_PREFIX}${serializedStyles.name}`;\n\n  stylesCache[serializedClassName] = serializedStyles.styles;\n\n  // Selector should include specificity className to have higher specificity than other passed classes\n  const selector = `.${SPECIFICITY_CLASSNAME}.${serializedClassName}`;\n\n  // Stylis performs transform of nested selectors and \":focus-visible\"\n  const css = rtl ? rtlStylis(selector, serializedStyles.styles) : stylis(selector, serializedStyles.styles);\n\n  renderer.renderGlobal(css);\n\n  return cx(SPECIFICITY_CLASSNAME, serializedClassName);\n}\n"],"file":"useCSS.js"}