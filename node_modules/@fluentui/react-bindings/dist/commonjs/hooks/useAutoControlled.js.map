{"version":3,"sources":["hooks/useAutoControlled.ts"],"names":["isUndefined","value","useAutoControlled","options","defaultValue","initialValue","undefined","React","useState","state","setState"],"mappings":";;;;;;;AAAA;;AASA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD;AAAA,SAAgB,OAAOA,KAAP,KAAiB,WAAjC;AAAA,CAApB;AAEA;;;;;;AAIO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAC/BC,OAD+B,EAE0B;AAAA,MACjDC,YADiD,GACCD,OADD,CACjDC,YADiD;AAAA,8BACCD,OADD,CACnCE,YADmC;AAAA,MACnCA,YADmC,sCACpBC,SADoB;AAAA,MACTL,KADS,GACCE,OADD,CACTF,KADS;;AAAA,wBAE/BM,KAAK,CAACC,QAAN,CAAsBR,WAAW,CAACI,YAAD,CAAX,GAA6BC,YAA7B,GAAsDD,YAA5E,CAF+B;AAAA,MAElDK,KAFkD;AAAA,MAE3CC,QAF2C;;AAIzD,SAAO,CAACV,WAAW,CAACC,KAAD,CAAX,GAAqBQ,KAArB,GAA6BR,KAA9B,EAAqCS,QAArC,CAAP;AACD,CAPM","sourcesContent":["import * as React from 'react';\n\ntype UseAutoControlledOptions<Value> = {\n  defaultValue: Value;\n  value: Value;\n\n  initialValue?: Value;\n};\n\nconst isUndefined = (value: any) => typeof value === 'undefined';\n\n/**\n * Returns a stateful value, and a function to update it. Mimics the `useState()` React Hook\n * signature.\n */\nexport const useAutoControlled = <Value>(\n  options: UseAutoControlledOptions<Value>,\n): [Value, React.Dispatch<React.SetStateAction<Value>>] => {\n  const { defaultValue, initialValue = undefined, value } = options;\n  const [state, setState] = React.useState<Value>(isUndefined(defaultValue) ? (initialValue as Value) : defaultValue);\n\n  return [isUndefined(value) ? state : value, setState];\n};\n"],"file":"useAutoControlled.js"}