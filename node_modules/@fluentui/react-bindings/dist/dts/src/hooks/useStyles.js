"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var context_1 = require("../context");
var getStyles_1 = require("../styles/getStyles");
exports.useStyles = function (displayName, options) {
    var _a, _b, _c, _d, _e;
    var context = context_1.useFluentContext();
    var _f = options.className, className = _f === void 0 ? process.env.NODE_ENV === 'production' ? '' : 'no-classname-ðŸ™‰' : _f, composeOptions = options.composeOptions, _g = options.mapPropsToStyles, mapPropsToStyles = _g === void 0 ? function () { return ({}); } : _g, _h = options.mapPropsToInlineStyles, mapPropsToInlineStyles = _h === void 0 ? function () { return ({}); } : _h, _j = options.unstable_props, unstable_props = _j === void 0 ? {} : _j, _k = options.rtl, rtl = _k === void 0 ? false : _k;
    var componentStylesProps = mapPropsToStyles();
    // `composeProps` should include all props including stylesProps as they can contain state
    var composeProps = tslib_1.__assign(tslib_1.__assign({}, unstable_props), componentStylesProps);
    var composeStylesProps = (_b = (_a = composeOptions) === null || _a === void 0 ? void 0 : _a.mapPropsToStylesPropsChain) === null || _b === void 0 ? void 0 : _b.reduce(function (acc, fn) { return (tslib_1.__assign(tslib_1.__assign({}, acc), fn(composeProps))); }, {});
    // Stores debug information for component.
    var debug = React.useRef({ fluentUIDebug: null });
    var _l = getStyles_1.getStyles({
        // Input values
        allDisplayNames: ((_c = composeOptions) === null || _c === void 0 ? void 0 : _c.displayNames) || [displayName],
        className: ((_d = composeOptions) === null || _d === void 0 ? void 0 : _d.className) || className,
        primaryDisplayName: ((_e = composeOptions) === null || _e === void 0 ? void 0 : _e.displayName) || displayName,
        componentProps: tslib_1.__assign(tslib_1.__assign({}, componentStylesProps), composeStylesProps),
        inlineStylesProps: mapPropsToInlineStyles(),
        // Context values
        disableAnimations: context.disableAnimations,
        renderer: context.renderer,
        rtl: rtl,
        saveDebug: function (fluentUIDebug) { return (debug.current = { fluentUIDebug: fluentUIDebug }); },
        theme: context.theme,
        performance: context.performance,
        telemetry: context.telemetry,
    }), classes = _l.classes, resolvedStyles = _l.styles;
    return { classes: classes, styles: resolvedStyles };
};
