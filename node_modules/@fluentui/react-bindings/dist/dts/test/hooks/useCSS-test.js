"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_bindings_1 = require("@fluentui/react-bindings");
var enzyme_1 = require("enzyme");
// @ts-ignore No typings :(
var prettier = require("prettier");
var React = require("react");
expect.addSnapshotSerializer({
    test: function (value) {
        var _a;
        return (_a = value) === null || _a === void 0 ? void 0 : _a._isMockFunction;
    },
    print: function (value) {
        var css = value.mock.calls.map(function (call) { return call[0]; }).join(' ');
        return prettier.format(css, { parser: 'css' }).trim();
    },
});
var TestComponent = function (props) {
    var className = react_bindings_1.useCSS.apply(void 0, props.styles);
    return React.createElement("div", { className: className });
};
function getMountOptions(renderGlobal, rtl) {
    if (rtl === void 0) { rtl = false; }
    return {
        wrappingComponentProps: {
            value: {
                renderer: { renderGlobal: renderGlobal },
                rtl: rtl,
            },
        },
        wrappingComponent: react_bindings_1.Unstable_FluentContextProvider,
    };
}
describe('useCSS', function () {
    it('returns a className', function () {
        var styles = [{ color: 'red' }];
        var wrapper = enzyme_1.mount(React.createElement(TestComponent, { styles: styles }));
        expect(wrapper.find('div').prop('className')).toBe('use-css ftokvmb');
    });
    it('handles nested selectors', function () {
        var styles = [
            {
                left: '20px',
                '& p': {
                    color: 'green',
                    '> span': { color: 'yellow' },
                },
                '&.ui-image': { color: 'blue' },
                '& .ui-loader': { color: 'blue' },
            },
        ];
        var renderGlobal = jest.fn();
        enzyme_1.mount(React.createElement(TestComponent, { styles: styles }), getMountOptions(renderGlobal));
        expect(renderGlobal).toMatchInlineSnapshot("\n      .use-css.f1j1cyx0 {\n        left: 20px;\n      }\n      .use-css.f1j1cyx0 p {\n        color: green;\n      }\n      .use-css.f1j1cyx0 p > span {\n        color: yellow;\n      }\n      .use-css.f1j1cyx0.ui-image {\n        color: blue;\n      }\n      .use-css.f1j1cyx0 .ui-loader {\n        color: blue;\n      }\n    ");
    });
    it('handles pseudo selectors', function () {
        var styles = [
            {
                ':before': { color: 'red' },
                ':focus': { color: 'green' },
                ':focus-visible': { color: 'red' },
            },
        ];
        var renderGlobal = jest.fn();
        enzyme_1.mount(React.createElement(TestComponent, { styles: styles }), getMountOptions(renderGlobal));
        expect(renderGlobal).toMatchInlineSnapshot("\n      .use-css.f1yae8dp:before {\n        color: red;\n      }\n      .use-css.f1yae8dp:focus {\n        color: green;\n      }\n      [data-whatinput=\"keyboard\"] .use-css.f1yae8dp:focus,\n      [data-whatinput=\"initial\"] .use-css.f1yae8dp:focus {\n        color: red;\n      }\n    ");
    });
    it('handles RTL without collisions', function () {
        var styles = [{ left: '20px', paddingLeft: '20px' }];
        var renderGlobal = jest.fn();
        enzyme_1.mount(React.createElement(TestComponent, { styles: styles }), getMountOptions(renderGlobal, false));
        var rtlWrapper = enzyme_1.mount(React.createElement(TestComponent, { styles: styles }), getMountOptions(renderGlobal, true));
        expect(renderGlobal).toMatchInlineSnapshot("\n      .use-css.fl5cdwz {\n        left: 20px;\n        padding-left: 20px;\n      }\n      .use-css.rfl5cdwz {\n        right: 20px;\n        padding-right: 20px;\n      }\n    ");
        expect(rtlWrapper.find('div').prop('className')).toBe('use-css rfl5cdwz');
    });
    it('handles merge via passed "className"', function () {
        var renderGlobal = jest.fn();
        var firstWrapper = enzyme_1.mount(React.createElement(TestComponent, { styles: [{ left: '20px' }] }));
        var firstClassName = firstWrapper.find('div').prop('className');
        enzyme_1.mount(React.createElement(TestComponent, { styles: [firstClassName, { color: 'red', left: '30px' }] }), getMountOptions(renderGlobal));
        expect(renderGlobal).toMatchInlineSnapshot("\n      .use-css.fgam49s {\n        left: 20px;\n        color: red;\n        left: 30px;\n      }\n    ");
    });
    it('handles merge via passed "className" in reverse order', function () {
        var renderGlobal = jest.fn();
        var wrapper = enzyme_1.mount(React.createElement(TestComponent, { styles: [{ left: '20px' }] }));
        var className = wrapper.find('div').prop('className');
        enzyme_1.mount(React.createElement(TestComponent, { styles: [{ color: 'red', left: '30px' }, className] }), getMountOptions(renderGlobal));
        expect(renderGlobal).toMatchInlineSnapshot("\n      .use-css.f1kzxssy {\n        color: red;\n        left: 30px;\n        left: 20px;\n      }\n    ");
    });
});
