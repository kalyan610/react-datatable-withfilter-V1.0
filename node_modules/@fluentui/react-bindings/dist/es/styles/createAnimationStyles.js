// Notice:
// This temporary lives here, will be remove once `animation` prop will be dropped
export var createAnimationStyles = function createAnimationStyles(animation, theme) {
  var animationCSSProp = {};
  var _theme$animations = theme.animations,
      animations = _theme$animations === void 0 ? {} : _theme$animations;

  if (animation) {
    var animationName = typeof animation === 'string' ? animation : animation.name;

    if (animations[animationName]) {
      var _animations$animation = animations[animationName],
          keyframe = _animations$animation.keyframe,
          duration = _animations$animation.duration,
          delay = _animations$animation.delay,
          direction = _animations$animation.direction,
          fillMode = _animations$animation.fillMode,
          iterationCount = _animations$animation.iterationCount,
          playState = _animations$animation.playState,
          timingFunction = _animations$animation.timingFunction,
          keyframeParams = _animations$animation.keyframeParams;
      var animationThemeKeyframeParams = keyframeParams || {};
      var animationPropKeyframeParams = animation.keyframeParams;
      var mergedKeyframeParams = typeof animation === 'string' || !animationPropKeyframeParams ? animationThemeKeyframeParams : Object.assign({}, animationThemeKeyframeParams, animationPropKeyframeParams || {});
      var keyframeDefinition = typeof keyframe === 'string' ? keyframe : {
        keyframe: keyframe,
        params: mergedKeyframeParams
      };

      if (typeof animation === 'string') {
        animationCSSProp = {
          animationName: keyframeDefinition,
          animationDelay: delay,
          animationDirection: direction,
          animationDuration: duration,
          animationFillMode: fillMode,
          animationIterationCount: iterationCount,
          animationPlayState: playState,
          animationTimingFunction: timingFunction
        };
      } else {
        animationCSSProp = {
          animationName: keyframeDefinition,
          animationDelay: animation.delay || delay,
          animationDirection: animation.direction || direction,
          animationDuration: animation.duration || duration,
          animationFillMode: animation.fillMode || fillMode,
          animationIterationCount: animation.iterationCount || iterationCount,
          animationPlayState: animation.playState || playState,
          animationTimingFunction: animation.timingFunction || timingFunction
        };
      }
    } else {
      // animations was not found in the theme object
      // TS issue, it's impossible to assign without this condition
      // eslint-disable-next-line no-lonely-if
      if (typeof animation === 'string') {
        animationCSSProp = {
          animationName: animation
        };
      } else {
        animationCSSProp = Object.assign({
          animationName: animation.name
        }, animation.delay && {
          animationDelay: animation.delay
        }, animation.direction && {
          animationDirection: animation.direction
        }, animation.duration && {
          animationDuration: animation.duration
        }, animation.fillMode && {
          animationFillMode: animation.fillMode
        }, animation.iterationCount && {
          animationIterationCount: animation.iterationCount
        }, animation.playState && {
          animationPlayState: animation.playState
        }, animation.timingFunction && {
          animationTimingFunction: animation.timingFunction
        });
      }
    }
  }

  return animationCSSProp;
};
//# sourceMappingURL=createAnimationStyles.js.map
