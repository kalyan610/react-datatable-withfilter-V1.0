"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
/**
 * Check whether source includes target ignoring case.
 */
exports.includes = function (source, target) {
    return _.toLower(source).indexOf(_.toLower(target)) !== -1;
};
/**
 * Checks whether the key or the value of data[key] contains the search string.
 */
exports.find = function (data, key, search) {
    var value = data[key];
    return (search !== '' &&
        (exports.includes(key, search) || (typeof value !== 'object' && !_.isNil(value) && exports.includes(value, search))));
};
/**
 * Checks if the data[key] is primitive and override in the overrides object.
 */
exports.isOverridden = function (data, key, overrides) {
    return typeof data[key] !== 'object' && !!overrides && overrides[key] !== null && overrides[key] !== undefined;
};
/**
 * Helper recursive function for the filter method.
 */
var filterR = function (search, data) {
    var result = false;
    Object.keys(data).forEach(function (key) {
        var value = data[key];
        if (exports.find(data, key, search)) {
            result = true;
        }
        // If the value is object invoke again
        if (typeof value === 'object' && filterR(search, value)) {
            result = true;
        }
    });
    return result;
};
/**
 * Filters the data for the value string (if it appears in the key or value). Considers nested objects.
 */
exports.filter = function (data, value) {
    return Object.keys(data)
        .filter(function (key) {
        if (exports.find(data, key, value)) {
            return true;
        }
        // if the value is object invoke again
        if (typeof data[key] === 'object' && data[key] !== null) {
            return filterR(value, data[key]);
        }
        return false;
    })
        .reduce(function (obj, key) {
        obj[key] = data[key];
        return obj;
    }, {});
};
/**
 * Returns array of values that matches the predicate. Considers nested objects.
 */
exports.getValues = function (value, predicate) {
    if (_.isNil(value)) {
        return [];
    }
    if (typeof value === 'string') {
        if (predicate(value)) {
            return [value];
        }
    }
    if (typeof value === 'object') {
        var arr_1 = [];
        Object.keys(value).forEach(function (key) {
            arr_1 = _.concat(arr_1, exports.getValues(value[key], predicate));
        });
        return arr_1;
    }
    return [];
};
/**
 * Removes null values from an object. Considers nested objects.
 */
exports.removeNulls = function (o) {
    if (typeof o !== 'object' && o !== null) {
        return o;
    }
    var result = {};
    Object.keys(o).forEach(function (k) {
        if (!o[k] || typeof o[k] !== 'object') {
            if (o[k]) {
                result[k] = o[k]; // If not null or not an object, copy value
            }
        }
        else {
            // The property is an object
            var val = exports.removeNulls(o[k]);
            if (typeof val === 'object' && val != null && Object.keys(val).length > 0) {
                result[k] = val;
            }
        }
    });
    return result;
};
