"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var TreeItem_1 = require("./TreeItem");
var TreeTitle_1 = require("./TreeTitle");
var utils_1 = require("../../utils");
var utils_2 = require("./utils");
exports.treeClassName = 'ui-tree';
function useStableProps(props) {
    var stableProps = React.useRef(props);
    React.useEffect(function () {
        stableProps.current = props;
    });
    return stableProps;
}
var expandedItemsGenerator = function (items, acc) {
    if (acc === void 0) { acc = []; }
    return _.reduce(items, function (acc, item) {
        if (item['expanded'] && acc.indexOf(item['id']) === -1) {
            acc.push(item['id']);
        }
        if (item['items']) {
            return expandedItemsGenerator(item['items'], acc);
        }
        return acc;
    }, acc);
};
var iterateItems = function (items, acc) {
    if (acc === void 0) { acc = []; }
    return _.reduce(items, function (acc, item) {
        if (item['selected'] && acc.indexOf(item['id']) === -1) {
            acc.push(item['id']);
        }
        if (item['items']) {
            return iterateItems(item['items']);
        }
        return acc;
    }, acc);
};
/**
 * A Tree displays data organised in tree hierarchy.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 * @accessibilityIssues
 * [Treeview - JAWS doesn't narrate position for each tree item](https://github.com/FreedomScientific/VFO-standards-support/issues/338)
 * [Aria compliant trees are read as empty tables](https://bugs.chromium.org/p/chromium/issues/detail?id=1048770)
 */
exports.Tree = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.Tree.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var exclusive = props.exclusive, items = props.items, renderItemTitle = props.renderItemTitle, selectable = props.selectable, children = props.children, renderedItems = props.renderedItems, className = props.className, design = props.design, styles = props.styles, variables = props.variables;
    var stableProps = useStableProps(props);
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Tree.handledProps, props);
    var _b = react_bindings_1.useAutoControlled({
        defaultValue: props.defaultActiveItemIds,
        value: props.activeItemIds,
        initialValue: expandedItemsGenerator(items),
    }), activeItemIds = _b[0], setActiveItemIdsState = _b[1];
    var _c = react_bindings_1.useAutoControlled({
        defaultValue: props.defaultSelectedItemIds,
        value: props.selectedItemIds,
        initialValue: iterateItems(items),
    }), selectedItemIds = _c[0], setSelectedItemIdsState = _c[1];
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.Tree.displayName,
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.Tree.displayName, {
        className: exports.treeClassName,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var treeRef = React.useRef();
    var itemsRef = React.useRef(new Map());
    var onFocusParent = React.useCallback(function (parent) {
        var parentRef = itemsRef.current.get(parent);
        if (!parentRef || !parentRef.current) {
            return;
        }
        parentRef.current.focus();
    }, [itemsRef]);
    var setSelectedItemIds = React.useCallback(function (e, updateSelectedItemIds) {
        _.invoke(stableProps.current, 'onSelectedItemIdsChange', e, tslib_1.__assign(tslib_1.__assign({}, stableProps.current), { selectedItemIds: updateSelectedItemIds }));
        setSelectedItemIdsState(updateSelectedItemIds);
    }, [stableProps, setSelectedItemIdsState]);
    var setActiveItemIds = React.useCallback(function (e, updateActiveItemIds) {
        _.invoke(stableProps.current, 'onActiveItemIdsChange', e, tslib_1.__assign(tslib_1.__assign({}, stableProps.current), { activeItemIds: updateActiveItemIds }));
        setActiveItemIdsState(updateActiveItemIds);
    }, [stableProps, setActiveItemIdsState]);
    var expandItems = React.useCallback(function (e, treeItemProps) {
        var id = treeItemProps.id;
        setActiveItemIds(e, function (currActiveItemIds) {
            var siblings = utils_2.getSiblings(stableProps.current.items, id);
            var activeItemIdIndex = currActiveItemIds.indexOf(id);
            var nextActiveItemsIds = currActiveItemIds;
            if (activeItemIdIndex > -1) {
                nextActiveItemsIds = utils_2.removeItemAtIndex(currActiveItemIds, activeItemIdIndex);
            }
            else {
                if (exclusive) {
                    siblings.some(function (sibling) {
                        var activeSiblingIdIndex = currActiveItemIds.indexOf(sibling['id']);
                        if (activeSiblingIdIndex > -1) {
                            nextActiveItemsIds = utils_2.removeItemAtIndex(currActiveItemIds, activeSiblingIdIndex);
                            return true;
                        }
                        return false;
                    });
                }
                nextActiveItemsIds = tslib_1.__spreadArrays(nextActiveItemsIds, [id]);
            }
            return nextActiveItemsIds;
        });
    }, [stableProps, setActiveItemIds, exclusive]);
    var onTitleClick = React.useCallback(function (e, treeItemProps, executeSelection) {
        if (executeSelection === void 0) { executeSelection = false; }
        var treeItemHasSubtree = utils_2.hasSubtree(treeItemProps);
        if (!treeItemProps) {
            return;
        }
        if (treeItemHasSubtree && !executeSelection) {
            expandItems(e, treeItemProps);
        }
        if (treeItemProps.selectable) {
            // parent must be selectable and expanded in order to procced with selection, otherwise return
            if (treeItemHasSubtree && !(treeItemProps.selectableParent && treeItemProps.expanded)) {
                return;
            }
            if (treeItemHasSubtree && !executeSelection) {
                return;
            }
            setSelectedItemIds(e, function (currSelectedItemIds) { return utils_2.processItemsForSelection(treeItemProps, currSelectedItemIds); });
        }
    }, [expandItems, setSelectedItemIds]);
    var onFocusFirstChild = React.useCallback(function (itemId) {
        var currentElement = itemsRef.current.get(itemId);
        if (!currentElement || !currentElement.current) {
            return;
        }
        var elementToBeFocused = react_bindings_1.getNextElement(treeRef.current, currentElement.current);
        if (!elementToBeFocused) {
            return;
        }
        elementToBeFocused.focus();
    }, [treeRef, itemsRef]);
    var isActiveItem = React.useCallback(function (id) {
        return activeItemIds.indexOf(id) > -1;
    }, [activeItemIds]);
    var onSiblingsExpand = React.useCallback(function (e, treeItemProps) {
        if (exclusive) {
            return;
        }
        var id = treeItemProps.id;
        var siblings = utils_2.getSiblings(stableProps.current.items, id);
        setActiveItemIds(e, function (currActiveItemIds) {
            var nextActiveItemsIds = tslib_1.__spreadArrays(currActiveItemIds);
            siblings.forEach(function (sibling) {
                if (utils_2.hasSubtree(sibling) && !isActiveItem(sibling['id'])) {
                    nextActiveItemsIds.push(sibling['id']);
                }
            });
            if (utils_2.hasSubtree(treeItemProps) && !isActiveItem(id)) {
                nextActiveItemsIds.push(id);
            }
            return nextActiveItemsIds;
        });
    }, [exclusive, stableProps, isActiveItem, setActiveItemIds]);
    var isIndeterminate = function (item) {
        if (!item.selectableParent || !item.items) {
            return false;
        }
        var selectableItemIds = utils_2.getAllSelectableChildrenId(item.items);
        return (!utils_2.isAllGroupChecked(item.items, selectedItemIds) &&
            selectableItemIds.some(function (id) { return selectedItemIds.indexOf(id) > -1; }));
    };
    var isSelectedItem = function (item) {
        if (item.selectableParent && item.items) {
            return utils_2.isAllGroupChecked(item.items, selectedItemIds);
        }
        return selectedItemIds && selectedItemIds.indexOf(item.id) > -1;
    };
    var contextValue = React.useMemo(function () { return ({
        onFocusParent: onFocusParent,
        onSiblingsExpand: onSiblingsExpand,
        onFocusFirstChild: onFocusFirstChild,
        onTitleClick: onTitleClick,
    }); }, [onFocusParent, onSiblingsExpand, onFocusFirstChild, onTitleClick]);
    var renderContent = function () {
        if (!items)
            return null;
        var renderItems = function (items, level, parent) {
            if (level === void 0) { level = 1; }
            return items.reduce(function (renderedItems, item, index) {
                var id = item.id;
                var isSubtree = utils_2.hasSubtree(item);
                var isSubtreeExpanded = isSubtree && isActiveItem(id);
                var indeterminate = isIndeterminate(item);
                if (!itemsRef.current.has(id)) {
                    itemsRef.current.set(id, React.createRef());
                }
                var renderedItem = TreeItem_1.TreeItem.create(item, {
                    defaultProps: function () {
                        return getA11yProps('item', {
                            expanded: isSubtreeExpanded,
                            selected: isSelectedItem(item),
                            selectable: selectable,
                            renderItemTitle: renderItemTitle,
                            id: id,
                            key: id,
                            parent: parent,
                            level: level,
                            index: index + 1,
                            contentRef: itemsRef.current.get(id),
                            treeSize: items.length,
                            indeterminate: indeterminate,
                            onSiblingsExpand: onSiblingsExpand,
                        });
                    },
                });
                return tslib_1.__spreadArrays(renderedItems, [
                    renderedItem
                ], (isSubtreeExpanded ? renderItems(item.items, level + 1, id) : []));
            }, []);
        };
        var itemsRendered = renderItems(items);
        return itemsRendered;
    };
    var element = (React.createElement(utils_2.TreeContext.Provider, { value: contextValue },
        React.createElement(react_component_ref_1.Ref, { innerRef: treeRef }, getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign(tslib_1.__assign({ className: classes.root }, utils_1.rtlTextContainer.getAttributes({ forElements: [children] })), unhandledProps))), utils_1.childrenExist(children) ? children : renderedItems ? renderedItems(renderContent()) : renderContent())))));
    setEnd();
    return element;
};
exports.Tree.displayName = 'Tree';
exports.Tree.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { activeItemIds: customPropTypes.collectionShorthand, selectedItemIds: customPropTypes.collectionShorthand, defaultActiveItemIds: customPropTypes.collectionShorthand, defaultSelectedItemIds: customPropTypes.collectionShorthand, exclusive: PropTypes.bool, selectable: PropTypes.bool, items: customPropTypes.collectionObjectShorthand, onActiveItemIdsChange: PropTypes.func, onSelectedItemIdsChange: PropTypes.func, renderItemTitle: PropTypes.func, renderedItems: PropTypes.func });
exports.Tree.Item = TreeItem_1.TreeItem;
exports.Tree.Title = TreeTitle_1.TreeTitle;
exports.Tree.defaultProps = {
    accessibility: accessibility_1.treeBehavior,
};
exports.Tree.handledProps = Object.keys(exports.Tree.propTypes);
exports.Tree.create = utils_1.createShorthandFactory({
    Component: exports.Tree,
    mappedArrayProp: 'items',
});
