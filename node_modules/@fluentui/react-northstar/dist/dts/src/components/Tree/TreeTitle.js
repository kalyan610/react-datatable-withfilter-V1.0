"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var Box_1 = require("../Box/Box");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
exports.treeTitleClassName = 'ui-tree__title';
exports.treeTitleSlotClassNames = {
    indicator: exports.treeTitleClassName + "__selection-indicator",
};
/**
 * A TreeTitle renders a title of TreeItem.
 */
exports.TreeTitle = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.TreeTitle.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, children = props.children, className = props.className, content = props.content, design = props.design, hasSubtree = props.hasSubtree, level = props.level, index = props.index, styles = props.styles, treeSize = props.treeSize, variables = props.variables, selectionIndicator = props.selectionIndicator, disabled = props.disabled, selected = props.selected, selectable = props.selectable, selectableParent = props.selectableParent, expanded = props.expanded, indeterminate = props.indeterminate;
    var getA11Props = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.TreeTitle.displayName,
        actionHandlers: {
            performClick: function (e) {
                e.preventDefault();
                e.stopPropagation();
                handleClick(e);
            },
            performSelection: function (e) {
                e.preventDefault();
                e.stopPropagation();
                handleClick(e);
            },
        },
        mapPropsToBehavior: function () { return ({
            hasSubtree: hasSubtree,
            level: level,
            index: index,
            treeSize: treeSize,
            selected: selected,
            selectable: selectable,
            selectableParent: selectableParent,
        }); },
        rtl: context.rtl,
    });
    var _b = react_bindings_1.useStyles(exports.TreeTitle.displayName, {
        className: exports.treeTitleClassName,
        mapPropsToStyles: function () { return ({
            selected: selected,
            selectableParent: selectableParent,
            disabled: disabled,
            selectable: selectable,
            indeterminate: indeterminate,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _b.classes, resolvedStyles = _b.styles;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.TreeTitle.handledProps, props);
    var handleClick = function (e) {
        _.invoke(props, 'onClick', e, props);
    };
    var selectionIndicatorOverrideProps = function (predefinedProps) { return ({
        onClick: function (e) {
            e.stopPropagation(); // otherwise onClick on title will also be executed
            handleClick(e);
            _.invoke(predefinedProps, 'onClick', e);
        },
    }); };
    var selectIndicator = Box_1.Box.create(selectionIndicator, {
        defaultProps: function () { return (tslib_1.__assign(tslib_1.__assign({ as: 'span', selected: selected }, (selectableParent && !_.isEmpty(selectionIndicator) && { expanded: expanded })), getA11Props('indicator', tslib_1.__assign({ className: exports.treeTitleSlotClassNames.indicator }, (((selectable && !hasSubtree) || (selectableParent && expanded)) &&
            _.isEmpty(selectionIndicator) && {
            styles: resolvedStyles.selectionIndicator,
        }))))); },
        overrideProps: selectionIndicatorOverrideProps,
    });
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11Props('root', tslib_1.__assign(tslib_1.__assign({ className: classes.root, onClick: handleClick, selected: selected }, utils_1.rtlTextContainer.getAttributes({ forElements: [children, content] })), unhandledProps))),
        utils_1.childrenExist(children) ? children : content,
        selectable && selectIndicator));
    setEnd();
    return element;
};
exports.TreeTitle.displayName = 'TreeTitle';
exports.TreeTitle.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { hasSubtree: PropTypes.bool, index: PropTypes.number, level: PropTypes.number, onClick: PropTypes.func, expanded: PropTypes.bool, selected: PropTypes.bool, selectable: PropTypes.bool, selectableParent: PropTypes.bool, treeSize: PropTypes.number, selectionIndicator: customPropTypes.shorthandAllowingChildren, indeterminate: PropTypes.bool });
exports.TreeTitle.defaultProps = {
    as: 'a',
    selectionIndicator: {},
    accessibility: accessibility_1.treeTitleBehavior,
};
exports.TreeTitle.handledProps = Object.keys(exports.TreeTitle.propTypes);
exports.TreeTitle.create = utils_1.createShorthandFactory({
    Component: exports.TreeTitle,
    mappedProp: 'content',
});
