"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var Box_1 = require("../Box/Box");
var Image_1 = require("../Image/Image");
var Label_1 = require("../Label/Label");
var Status_1 = require("../Status/Status");
var utils_1 = require("../../utils");
exports.avatarClassName = 'ui-avatar';
/**
 * An Avatar is a graphical representation of a user.
 */
exports.Avatar = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.Avatar.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, className = props.className, design = props.design, getInitials = props.getInitials, label = props.label, icon = props.icon, image = props.image, name = props.name, square = props.square, size = props.size, status = props.status, styles = props.styles, variables = props.variables;
    var getA11Props = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.Avatar.displayName,
        rtl: context.rtl,
    });
    var _b = react_bindings_1.useStyles(exports.Avatar.displayName, {
        className: exports.avatarClassName,
        mapPropsToStyles: function () { return ({ size: size, square: square }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
    }), classes = _b.classes, resolvedStyles = _b.styles;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Avatar.handledProps, props);
    var imageElement = Image_1.Image.create(image, {
        defaultProps: function () {
            return getA11Props('image', {
                fluid: true,
                avatar: !square,
                title: name,
                styles: resolvedStyles.image,
            });
        },
    });
    var iconElement = Box_1.Box.create(icon, {
        defaultProps: function () {
            return getA11Props('icon', {
                title: name,
                styles: resolvedStyles.icon,
            });
        },
    });
    var labelElement = Label_1.Label.create(label || {}, {
        defaultProps: function () {
            return getA11Props('label', {
                content: getInitials(name),
                circular: !square,
                title: name,
                styles: resolvedStyles.label,
            });
        },
    });
    var hasGlyph = !!image || !!icon;
    var result = (React.createElement(ElementType, tslib_1.__assign({}, getA11Props('root', tslib_1.__assign({ className: classes.root }, unhandledProps))),
        hasGlyph && (imageElement || iconElement),
        !hasGlyph && labelElement,
        Status_1.Status.create(status, {
            defaultProps: function () {
                return getA11Props('status', {
                    size: size,
                    styles: resolvedStyles.status,
                });
            },
        })));
    setEnd();
    return result;
};
exports.Avatar.displayName = 'Avatar';
exports.Avatar.defaultProps = {
    size: 'medium',
    getInitials: function (name) {
        if (!name) {
            return '';
        }
        var reducedName = name
            .replace(/\s+/g, ' ')
            .replace(/\s*\(.*?\)\s*/g, ' ')
            .replace(/\s*{.*?}\s*/g, ' ')
            .replace(/\s*\[.*?]\s*/g, ' ');
        var initials = reducedName
            .split(' ')
            .filter(function (item) { return item !== ''; })
            .map(function (item) { return item.charAt(0); })
            .reduce(function (accumulator, currentValue) { return accumulator + currentValue; }, '');
        if (initials.length > 2) {
            return initials.charAt(0) + initials.charAt(initials.length - 1);
        }
        return initials;
    },
};
exports.Avatar.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    children: false,
    content: false,
})), { name: PropTypes.string, icon: customPropTypes.shorthandAllowingChildren, image: customPropTypes.itemShorthandWithoutJSX, label: customPropTypes.itemShorthand, square: PropTypes.bool, size: customPropTypes.size, status: customPropTypes.itemShorthand, getInitials: PropTypes.func });
exports.Avatar.handledProps = Object.keys(exports.Avatar.propTypes);
exports.Avatar.create = utils_1.createShorthandFactory({ Component: exports.Avatar, mappedProp: 'name' });
