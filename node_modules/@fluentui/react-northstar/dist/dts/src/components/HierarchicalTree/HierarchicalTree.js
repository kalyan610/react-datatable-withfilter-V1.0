"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var HierarchicalTreeItem_1 = require("./HierarchicalTreeItem");
var utils_1 = require("../../utils");
var react_bindings_1 = require("@fluentui/react-bindings");
exports.hierarchicalTreeClassName = 'ui-hierarchicaltree';
/**
 * (DEPRECATED) A Tree displays data organised in tree hierarchy.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 */
exports.HierarchicalTree = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.HierarchicalTree.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var children = props.children, className = props.className, design = props.design, styles = props.styles, variables = props.variables, items = props.items, renderItemTitle = props.renderItemTitle, exclusive = props.exclusive;
    var _b = react_bindings_1.useAutoControlled({
        defaultValue: props.defaultActiveIndex,
        value: props.activeIndex,
        initialValue: exclusive ? -1 : [],
    }), activeIndex = _b[0], setActiveIndex = _b[1];
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.HierarchicalTree.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.HierarchicalTree.displayName,
        actionHandlers: {
            expandSiblings: function (e) {
                e.preventDefault();
                e.stopPropagation();
                if (exclusive) {
                    return;
                }
                var activeIndex = items
                    ? items.reduce(function (acc, item, index) {
                        if (item['items']) {
                            return tslib_1.__spreadArrays(acc, [index]);
                        }
                        return acc;
                    }, [])
                    : [];
                trySetActiveIndexAndTriggerEvent(e, activeIndex);
            },
        },
        mapPropsToBehavior: function () { return ({
            'aria-labelledby': props['aria-labelledby'],
        }); },
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.HierarchicalTree.displayName, {
        className: exports.hierarchicalTreeClassName,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var trySetActiveIndexAndTriggerEvent = function (e, activeIndex) {
        setActiveIndex(activeIndex);
        _.invoke(props, 'onActiveIndexChange', e, tslib_1.__assign(tslib_1.__assign({}, props), { activeIndex: activeIndex }));
    };
    var getActiveIndexes = function () {
        return _.isArray(activeIndex) ? activeIndex : [activeIndex];
    };
    var computeNewIndex = function (treeItemProps) {
        var index = treeItemProps.index, items = treeItemProps.items;
        var activeIndexes = getActiveIndexes();
        var exclusive = props.exclusive;
        if (!items) {
            return activeIndexes;
        }
        if (exclusive)
            return index;
        // check to see if index is in array, and remove it, if not then add it
        return _.includes(activeIndexes, index) ? _.without(activeIndexes, index) : tslib_1.__spreadArrays(activeIndexes, [index]);
    };
    var handleTreeItemOverrides = function (predefinedProps) { return ({
        onTitleClick: function (e, treeItemProps) {
            trySetActiveIndexAndTriggerEvent(e, computeNewIndex(treeItemProps));
            _.invoke(predefinedProps, 'onTitleClick', e, treeItemProps);
        },
    }); };
    var renderContent = function () {
        var activeIndexes = getActiveIndexes();
        return _.map(items, function (item, index) {
            return HierarchicalTreeItem_1.HierarchicalTreeItem.create(item, {
                defaultProps: function () { return ({
                    index: index,
                    exclusive: exclusive,
                    renderItemTitle: renderItemTitle,
                    open: exclusive ? index === activeIndex : _.includes(activeIndexes, index),
                }); },
                overrideProps: handleTreeItemOverrides,
            });
        });
    };
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign(tslib_1.__assign({ className: classes.root }, utils_1.rtlTextContainer.getAttributes({ forElements: [children] })), unhandledProps))), utils_1.childrenExist(children) ? children : renderContent()));
    setEnd();
    return element;
};
exports.HierarchicalTree.displayName = 'HierarchicalTree';
exports.HierarchicalTree.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { activeIndex: customPropTypes.every([
        customPropTypes.disallow(['children']),
        PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),
    ]), defaultActiveIndex: customPropTypes.every([
        customPropTypes.disallow(['children']),
        PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),
    ]), exclusive: PropTypes.bool, items: customPropTypes.collectionShorthand, renderItemTitle: PropTypes.func, onActiveIndexChange: PropTypes.func });
exports.HierarchicalTree.defaultProps = {
    as: 'ul',
    accessibility: accessibility_1.hierarchicalTreeBehavior,
};
exports.HierarchicalTree.handledProps = Object.keys(exports.HierarchicalTree.propTypes);
exports.HierarchicalTree.create = utils_1.createShorthandFactory({
    Component: exports.HierarchicalTree,
    mappedArrayProp: 'items',
});
