"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var HierarchicalTree_1 = require("./HierarchicalTree");
var HierarchicalTreeTitle_1 = require("./HierarchicalTreeTitle");
var utils_1 = require("../../utils");
exports.hierarchicalTreeItemClassName = 'ui-hierarchicaltree__item';
exports.hierarchicalTreeItemSlotClassNames = {
    subtree: exports.hierarchicalTreeItemClassName + "__subtree",
};
/**
 * A TreeItem renders an item of a Tree.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 */
exports.HierarchicalTreeItem = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.HierarchicalTreeItem.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var items = props.items, title = props.title, renderItemTitle = props.renderItemTitle, open = props.open, exclusive = props.exclusive, children = props.children, className = props.className, design = props.design, styles = props.styles, variables = props.variables;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.HierarchicalTreeItem.handledProps, props);
    var actionHandlers = {
        performClick: function (e) {
            e.preventDefault();
            e.stopPropagation();
            _.invoke(props, 'onTitleClick', e, props);
        },
        receiveFocus: function (e) {
            e.preventDefault();
            e.stopPropagation();
            // Focuses the title if the event comes from a child item.
            if (eventComesFromChildItem(e)) {
                itemRef.current.focus();
            }
        },
        collapse: function (e) {
            e.preventDefault();
            e.stopPropagation();
            // Handle click on title if the keyboard event was dispatched on that title
            if (!eventComesFromChildItem(e)) {
                handleTitleClick(e);
            }
        },
        expand: function (e) {
            e.preventDefault();
            e.stopPropagation();
            handleTitleClick(e);
        },
        focusSubtree: function (e) {
            e.preventDefault();
            e.stopPropagation();
            var element = react_bindings_1.getFirstFocusable(treeRef.current, treeRef.current, true);
            if (element) {
                element.focus();
            }
        },
    };
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.HierarchicalTreeItem.displayName,
        actionHandlers: actionHandlers,
        mapPropsToBehavior: function () { return ({
            hasItems: items && !!items.length,
            open: open,
        }); },
        rtl: context.rtl,
    });
    var itemRef = React.useRef();
    var treeRef = React.useRef();
    var classes = react_bindings_1.useStyles(exports.HierarchicalTreeItem.displayName, {
        className: exports.hierarchicalTreeItemClassName,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var eventComesFromChildItem = function (e) {
        return e.currentTarget !== e.target;
    };
    var handleTitleClick = function (e) {
        _.invoke(props, 'onTitleClick', e, props);
    };
    var handleTitleOverrides = function (predefinedProps) { return ({
        onClick: function (e, titleProps) {
            handleTitleClick(e);
            _.invoke(predefinedProps, 'onClick', e, titleProps);
        },
    }); };
    var renderContent = function () {
        var hasSubtree = !_.isNil(items);
        return (React.createElement(React.Fragment, null,
            HierarchicalTreeTitle_1.HierarchicalTreeTitle.create(title, {
                defaultProps: function () { return ({
                    open: open,
                    hasSubtree: hasSubtree,
                    as: hasSubtree ? 'span' : 'a',
                }); },
                render: renderItemTitle,
                overrideProps: handleTitleOverrides,
            }),
            hasSubtree && open && (React.createElement(react_component_ref_1.Ref, { innerRef: treeRef }, HierarchicalTree_1.HierarchicalTree.create(items, {
                defaultProps: function () {
                    return getA11yProps('item', {
                        accessibility: accessibility_1.hierarchicalSubtreeBehavior,
                        className: exports.hierarchicalTreeItemSlotClassNames.subtree,
                        exclusive: exclusive,
                        renderItemTitle: renderItemTitle,
                    });
                },
            })))));
    };
    var element = (React.createElement(react_component_ref_1.Ref, { innerRef: itemRef },
        React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign(tslib_1.__assign({ className: classes.root }, unhandledProps), utils_1.rtlTextContainer.getAttributes({ forElements: [children] })))), utils_1.childrenExist(children) ? children : renderContent())));
    setEnd();
    return element;
};
exports.HierarchicalTreeItem.displayName = 'HierarchicalTreeItem';
exports.HierarchicalTreeItem.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { items: customPropTypes.collectionShorthand, index: PropTypes.number, exclusive: PropTypes.bool, onTitleClick: PropTypes.func, open: PropTypes.bool, renderItemTitle: PropTypes.func, title: customPropTypes.itemShorthand });
exports.HierarchicalTreeItem.defaultProps = {
    as: 'li',
    accessibility: accessibility_1.hierarchicalTreeItemBehavior,
};
exports.HierarchicalTreeItem.handledProps = Object.keys(exports.HierarchicalTreeItem.propTypes);
exports.HierarchicalTreeItem.create = utils_1.createShorthandFactory({
    Component: exports.HierarchicalTreeItem,
    mappedProp: 'title',
});
