"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _disableIosBodyScroll = function (event) {
    event.preventDefault();
};
function enableBodyScroll(target) {
    if (target) {
        target.style.overflow = 'unset';
        target.removeEventListener('touchmove', _disableIosBodyScroll);
    }
}
exports.enableBodyScroll = enableBodyScroll;
function disableBodyScroll(target) {
    if (target) {
        target.style.overflow = 'hidden';
        target.addEventListener('touchmove', _disableIosBodyScroll, { passive: false, capture: false });
    }
}
exports.disableBodyScroll = disableBodyScroll;
var dialogsCounterAttribute = 'fluent-dialogs-count';
exports.lockBodyScroll = function (target) {
    var openDialogs = (+target.body.getAttribute(dialogsCounterAttribute) || 0) + 1;
    target.body.setAttribute(dialogsCounterAttribute, "" + openDialogs);
    // Avoid to block scroll in nested dialogs
    if (openDialogs === 1) {
        disableBodyScroll(target.body);
    }
};
exports.unlockBodyScroll = function (target) {
    var openDialogs = (+target.body.getAttribute(dialogsCounterAttribute) || 0) - 1;
    target.body.setAttribute(dialogsCounterAttribute, "" + openDialogs);
    // Only enables scroll if all dialogs are closed
    if (openDialogs === 0) {
        enableBodyScroll(target.body);
        target.body.removeAttribute(dialogsCounterAttribute);
    }
};
