"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var utils_1 = require("../../../../utils");
var accessibilityStyles_1 = require("../../../../utils/accessibility/Styles/accessibilityStyles");
var ListItem_1 = require("../../../../components/List/ListItem");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
var truncateStyle = {
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
};
var selectableHoverStyle = function (p, v) {
    var _a;
    return (_a = {
            background: v.selectableFocusHoverBackgroundColor,
            color: v.selectableFocusHoverColor,
            cursor: 'pointer'
        },
        _a["& ." + ListItem_1.listItemSlotClassNames.header] = { color: 'inherit' },
        _a["& ." + ListItem_1.listItemSlotClassNames.content] = { color: 'inherit' },
        // hide the header media and content media on hover
        _a["& ." + ListItem_1.listItemSlotClassNames.headerMedia] = tslib_1.__assign(tslib_1.__assign({}, accessibilityStyles_1.screenReaderContainerStyles), { color: 'inherit' }),
        _a["& ." + ListItem_1.listItemSlotClassNames.contentMedia] = { display: 'none', color: 'inherit' },
        // show the end media on hover
        _a["& ." + ListItem_1.listItemSlotClassNames.endMedia] = { display: 'block', color: 'inherit' },
        _a);
};
var selectedStyle = function (variables) { return ({
    background: variables.selectedBackgroundColor,
    color: variables.selectedColor,
}); };
exports.listItemStyles = {
    root: function (_a) {
        var _b;
        var p = _a.props, v = _a.variables, siteVariables = _a.theme.siteVariables;
        var borderFocusStyles = getBorderFocusStyles_1.getBorderFocusStyles({
            variables: siteVariables,
        });
        return tslib_1.__assign(tslib_1.__assign({ display: 'flex', alignItems: 'center', minHeight: v.minHeight, padding: v.rootPadding }, ((p.selectable || p.navigable) && tslib_1.__assign((_b = { position: 'relative' }, _b["& ." + ListItem_1.listItemSlotClassNames.endMedia] = { display: 'none' }, _b['&:hover'] = selectableHoverStyle(p, v), _b[':focus'] = borderFocusStyles[':focus'], _b[':focus-visible'] = tslib_1.__assign(tslib_1.__assign({}, borderFocusStyles[':focus-visible']), { zIndex: v.zIndex }), _b), (p.selected && selectedStyle(v))))), (p.important && {
            fontWeight: v.importantFontWeight,
        }));
    },
    media: function (_a) {
        var p = _a.props;
        return (tslib_1.__assign(tslib_1.__assign({}, (p.important && {
            '::before': {
                content: '""',
                position: 'absolute',
                left: utils_1.pxToRem(8),
                width: utils_1.pxToRem(2),
                height: utils_1.pxToRem(2),
                background: '#000',
            },
        })), ((p.hasHeader || p.hasContent) && {
            marginRight: utils_1.pxToRem(8),
        })));
    },
    header: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign({ flexGrow: 1, fontSize: v.headerFontSize, lineHeight: v.headerLineHeight }, (p.truncateHeader && truncateStyle)), ((!p.hasContent || p.hasHeaderMedia) && {
            marginRight: utils_1.pxToRem(8),
        })));
    },
    headerMedia: function (_a) {
        var v = _a.variables;
        return ({
            alignSelf: 'flex-end',
            fontSize: v.headerMediaFontSize,
            lineHeight: v.headerMediaLineHeight,
        });
    },
    content: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign({ flexGrow: 1, fontSize: v.contentFontSize, lineHeight: v.contentLineHeight }, (p.truncateContent && truncateStyle)), ((!p.hasHeader || p.hasContentMedia) && {
            marginRight: utils_1.pxToRem(8),
        })));
    },
    contentMedia: function (_a) {
        var v = _a.variables;
        return ({
            fontSize: v.contentMediaFontSize,
            lineHeight: v.contentMediaLineHeight,
        });
    },
    endMedia: function (_a) {
        var p = _a.props;
        return (tslib_1.__assign({ flexShrink: 0 }, ((p.selectable || p.navigable) && { display: 'none' })));
    },
    headerWrapper: function () { return ({
        display: 'flex',
    }); },
    contentWrapper: function () { return ({
        display: 'flex',
    }); },
    main: function () { return ({
        display: 'flex',
        flexDirection: 'column',
        flexGrow: 1,
        minWidth: 0,
    }); },
};
