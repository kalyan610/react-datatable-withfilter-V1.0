"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var utils_1 = require("../../../../utils");
var sizeToPxValue = {
    smallest: 20,
    smaller: 24,
    small: 28,
    medium: 32,
    large: 44,
    larger: 64,
    largest: 96,
};
var iconSizeToPxValue = {
    smallest: 10,
    smaller: 12,
    small: 16,
    medium: 16,
    large: 20,
    larger: 32,
    largest: 40,
};
exports.avatarStyles = {
    root: function (_a) {
        var size = _a.props.size;
        var sizeInRem = utils_1.pxToRem(sizeToPxValue[size]);
        return {
            position: 'relative',
            backgroundColor: 'inherit',
            display: 'inline-block',
            verticalAlign: 'middle',
            height: sizeInRem,
            width: sizeInRem,
        };
    },
    icon: function (_a) {
        var p = _a.props, v = _a.variables;
        var sizeInRem = utils_1.pxToRem(sizeToPxValue[p.size]);
        var iconsizeInRem = utils_1.pxToRem(iconSizeToPxValue[p.size]);
        return tslib_1.__assign(tslib_1.__assign({ color: v.iconColor, background: v.iconBackgroundColor, width: sizeInRem, height: sizeInRem, borderRadius: '50%', display: 'inline-flex', alignItems: 'center' }, (p.square && {
            borderRadius: v.squareAvatarBorderRadius,
        })), { '& > :first-child': {
                margin: '0 auto',
                width: iconsizeInRem,
                height: iconsizeInRem,
                '& svg': {
                    width: '100%',
                    height: '100%',
                },
            } });
    },
    image: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign({ borderColor: v.avatarBorderColor, borderStyle: 'solid', borderWidth: v.avatarBorderWidth, height: '100%', objectFit: 'cover', verticalAlign: 'top', width: '100%' }, (p.square && {
            borderRadius: v.squareAvatarBorderRadius,
        })));
    },
    label: function (_a) {
        var p = _a.props, v = _a.variables;
        var sizeInRem = utils_1.pxToRem(sizeToPxValue[p.size]);
        return tslib_1.__assign({ display: 'inline-block', width: sizeInRem, height: sizeInRem, lineHeight: sizeInRem, fontSize: utils_1.pxToRem(sizeToPxValue[p.size] / 2.333), verticalAlign: 'top', textAlign: 'center', padding: '0' }, (p.square && {
            borderRadius: v.squareAvatarBorderRadius,
        }));
    },
    status: function (_a) {
        var v = _a.variables;
        return ({
            position: 'absolute',
            bottom: 0,
            right: 0,
            boxShadow: "0 0 0 " + v.statusBorderWidth + " " + v.statusBorderColor,
        });
    },
};
