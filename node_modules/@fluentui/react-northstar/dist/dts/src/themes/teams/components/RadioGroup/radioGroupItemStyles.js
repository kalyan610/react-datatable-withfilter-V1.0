"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var RadioGroupItem_1 = require("../../../../components/RadioGroup/RadioGroupItem");
var utils_1 = require("../../../../utils");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
var restHoverFocusTextColor = function (textColor) { return ({
    color: textColor,
    ':hover': {
        color: textColor,
    },
    ':focus': {
        color: textColor,
    },
}); };
exports.radioGroupItemStyles = {
    root: function (_a) {
        var _b;
        var p = _a.props, v = _a.variables, siteVariables = _a.theme.siteVariables;
        return (tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ position: 'relative', alignItems: 'center', borderStyle: 'solid', borderWidth: "" + utils_1.pxToRem(1), borderColor: 'transparent', borderRadius: "" + utils_1.pxToRem(2), color: v.textColorDefault, cursor: 'pointer', display: p.vertical ? 'flex' : 'inline-flex', fontSize: v.textFontSize, padding: v.padding, ':hover': (_b = {
                    color: v.textColorDefaultHoverFocus
                },
                _b["& ." + RadioGroupItem_1.radioGroupItemSlotClassNames.indicator] = tslib_1.__assign({ borderColor: v.textColorDefaultHoverFocus }, (!p.disabled &&
                    !p.checked && {
                    borderColor: v.indicatorBorderColorDefaultHover,
                })),
                _b), ':focus': {
                color: v.textColorDefaultHoverFocus,
            } }, (p.checked && tslib_1.__assign({}, restHoverFocusTextColor(v.textColorChecked)))), (p.disabled && tslib_1.__assign({}, restHoverFocusTextColor(v.colorDisabled)))), getBorderFocusStyles_1.getBorderFocusStyles({ variables: siteVariables })));
    },
    indicator: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign({ margin: "0 " + utils_1.pxToRem(12) + " 0 0", borderRadius: '50%', borderWidth: '1px', borderStyle: 'solid', borderColor: v.indicatorBorderColorDefault, width: utils_1.pxToRem(12), height: utils_1.pxToRem(12) }, (p.checked && {
            background: v.indicatorBackgroundColorChecked,
            borderColor: 'transparent',
        })), (p.disabled && tslib_1.__assign({ borderColor: v.colorDisabled }, (p.checked && {
            background: v.colorDisabled,
        })))));
    },
};
