"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("lodash");
var ChatMessage_1 = require("../../../../components/Chat/ChatMessage");
var accessibilityStyles_1 = require("../../../../utils/accessibility/Styles/accessibilityStyles");
var utils_1 = require("../../../../utils");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
exports.chatMessageStyles = {
    root: function (_a) {
        var _b, _c, _d, _e;
        var p = _a.props, v = _a.variables, siteVariables = _a.theme.siteVariables;
        return (tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ display: 'inline-block', position: 'relative', marginLeft: p.mine ? v.offset : 0, marginRight: !p.mine ? v.offset : 0, maxWidth: "calc(100% - " + v.offset + ")", minWidth: v.offset, paddingLeft: v.padding, paddingRight: v.padding, paddingTop: utils_1.pxToRem(8), paddingBottom: utils_1.pxToRem(10), borderRadius: v.borderRadius, border: v.border, outline: 0, color: v.color, backgroundColor: p.mine ? v.backgroundColorMine : v.backgroundColor, wordBreak: 'break-word', wordWrap: 'break-word' }, ((v.hasMention || v.isImportant) && {
            '::before': {
                content: '""',
                backgroundColor: v.hasMention ? v.hasMentionColor : v.isImportantColor,
                height: '100%',
                left: '0',
                position: 'absolute',
                top: '0',
                width: utils_1.pxToRem(3),
                borderBottomLeftRadius: 'inherit',
                borderTopLeftRadius: 'inherit',
            },
        })), getBorderFocusStyles_1.getBorderFocusStyles({ variables: siteVariables })), (_.isNil(v.showActionMenu) && {
            ':hover': (_b = {},
                _b["> ." + ChatMessage_1.chatMessageSlotClassNames.actionMenu] = {
                    opacity: 1,
                    zIndex: v.overlayZIndex,
                    '[data-popper-escaped]': {
                        opacity: 0,
                    },
                },
                _b),
        })), (p.attached === true && (_c = {},
            _c[p.mine ? 'borderTopRightRadius' : 'borderTopLeftRadius'] = 0,
            _c[p.mine ? 'borderBottomRightRadius' : 'borderBottomLeftRadius'] = 0,
            _c.paddingTop = utils_1.pxToRem(5),
            _c.paddingBottom = utils_1.pxToRem(7),
            _c))), (p.attached === 'top' && (_d = {},
            _d[p.mine ? 'borderBottomRightRadius' : 'borderBottomLeftRadius'] = 0,
            _d))), (p.attached === 'bottom' && (_e = {},
            _e[p.mine ? 'borderTopRightRadius' : 'borderTopLeftRadius'] = 0,
            _e.paddingTop = utils_1.pxToRem(5),
            _e.paddingBottom = utils_1.pxToRem(7),
            _e))));
    },
    actionMenu: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ backgroundColor: v.backgroundColor, border: '1px solid', borderColor: v.reactionGroupBorderColor, borderRadius: v.borderRadius, boxShadow: v.actionMenuBoxShadow, 
            // we need higher zIndex for the action menu in order to be displayed above the focus border of the chat message
            zIndex: p.focused ? v.overlayZIndex : -1 }, (_.isNil(v.showActionMenu) && {
            overflow: p.focused ? 'visible' : 'hidden',
            // hide and squash actions menu to prevent accidental hovers over its invisible area
            opacity: p.focused ? 1 : 0,
            width: 'auto',
        })), (!_.isNil(v.showActionMenu) && {
            overflow: v.showActionMenu ? 'visible' : 'hidden',
            // opacity should always be preferred over visibility in order to avoid accessibility bugs in
            // JAWS behavior on Windows
            opacity: v.showActionMenu ? 1 : 0,
            width: v.showActionMenu ? 'auto' : 0,
        })), { '[data-popper-escaped]': {
                opacity: 0,
            } }));
    },
    author: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign({}, ((p.mine || p.attached === 'bottom' || p.attached === true) && accessibilityStyles_1.screenReaderContainerStyles)), { color: v.authorColor, marginRight: v.authorMarginRight, marginBottom: v.headerMarginBottom, fontWeight: v.authorFontWeight }));
    },
    timestamp: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign({ marginBottom: v.headerMarginBottom }, (p.mine && {
            color: v.timestampColorMine,
        })), ((p.attached === 'bottom' || p.attached === true) &&
            !p.hasReactionGroup &&
            accessibilityStyles_1.screenReaderContainerStyles)));
    },
    content: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign({ color: v.contentColor, display: 'block', '& a': {
                outline: 'none',
                color: p.mine ? v.linkColorMine : v.linkColor,
                ':focus': {
                    textDecoration: 'underline',
                },
            } }, (p.hasBadge &&
            p.badgePosition === 'end' && {
            marginRight: utils_1.pxToRem(4),
        })));
    },
    badge: function (_a) {
        var _b;
        var p = _a.props, v = _a.variables;
        var sidePosition = p.badgePosition === 'start' ? 'left' : 'right';
        return _b = {
                backgroundColor: v.hasMention ? v.hasMentionNubbinColor : v.isImportantColor,
                color: v.badgeTextColor,
                boxShadow: v.badgeShadow,
                position: 'absolute',
                padding: utils_1.pxToRem(4),
                height: 'auto',
                width: 'auto',
                borderRadius: '50%',
                top: utils_1.pxToRem(4),
                zIndex: v.zIndex
            },
            _b[sidePosition] = 0,
            _b.transform = p.badgePosition === 'start' ? 'translateX(-50%)' : 'translateX(50%)',
            _b['& > :first-child'] = {
                display: 'inline-flex',
            },
            _b;
    },
    reactionGroup: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign({ marginLeft: v.reactionGroupMarginLeft }, (p.hasBadge &&
            p.badgePosition === 'end' && {
            marginRight: utils_1.pxToRem(2),
        })), { float: 'right' }));
    },
};
