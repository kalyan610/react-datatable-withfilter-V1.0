"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var Menu_1 = require("src/components/Menu/Menu");
var commonTests_1 = require("test/specs/commonTests");
var utils_1 = require("test/utils");
var implementsCollectionShorthandProp_1 = require("../../commonTests/implementsCollectionShorthandProp");
var MenuItem_1 = require("src/components/Menu/MenuItem");
var accessibility_1 = require("@fluentui/accessibility");
var keyboard_key_1 = require("@fluentui/keyboard-key");
var menuImplementsCollectionShorthandProp = implementsCollectionShorthandProp_1.implementsCollectionShorthandProp(Menu_1.Menu);
describe('Menu', function () {
    commonTests_1.isConformant(Menu_1.Menu, { constructorName: 'Menu', autoControlledProps: ['activeIndex'] });
    menuImplementsCollectionShorthandProp('items', MenuItem_1.MenuItem);
    var getItems = function () { return [
        { key: 'home', content: 'home', onClick: jest.fn(), 'data-foo': 'something' },
        { key: 'users', content: 'users', 'data-foo': 'something' },
    ]; };
    var getNestedItems = function () { return [
        { key: 'home', content: 'home', onClick: jest.fn(), 'data-foo': 'something' },
        {
            key: 'users',
            content: 'users',
            'data-foo': 'something',
            menu: [
                { key: '1', content: 'Alice' },
                { key: '2', content: 'Bob' },
            ],
        },
    ]; };
    describe('items', function () {
        it('renders children', function () {
            var menuItems = utils_1.mountWithProvider(React.createElement(Menu_1.Menu, { items: getItems() })).find('MenuItem');
            expect(menuItems.length).toBe(2);
            expect(menuItems.first().props().content).toBe('home');
            expect(menuItems.last().props().content).toBe('users');
        });
        it('calls onClick handler for item', function () {
            var items = getItems();
            var menuItems = utils_1.mountWithProvider(React.createElement(Menu_1.Menu, { items: items })).find('MenuItem');
            menuItems
                .first()
                .find('a')
                .first()
                .simulate('click');
            expect(items[0].onClick).toHaveBeenCalled();
        });
        it('does not call onClick handler for disabled item', function () {
            var items = getItems();
            items[0]['disabled'] = true; // mark the first item as disabled
            var menuItems = utils_1.mountWithProvider(React.createElement(Menu_1.Menu, { items: items })).find('MenuItem');
            menuItems
                .first()
                .find('a')
                .first()
                .simulate('click');
            expect(items[0].onClick).not.toHaveBeenCalled();
        });
        it('passes arbitrary props', function () {
            var menuItems = utils_1.mountWithProvider(React.createElement(Menu_1.Menu, { items: getItems() })).find('MenuItem');
            expect(menuItems.everyWhere(function (item) { return item.prop('data-foo') === 'something'; })).toBe(true);
        });
        it('closes menu when item is clicked using spacebar', function () {
            var menu = utils_1.mountWithProvider(React.createElement(Menu_1.Menu, { items: getNestedItems() }));
            var menuItems = menu.find('MenuItem');
            menuItems
                .at(1)
                .find('a')
                .first()
                .simulate('keydown', { keyCode: keyboard_key_1.SpacebarKey });
            expect(menuItems
                .at(1)
                .at(0)
                .find('a')
                .first()
                .getDOMNode()
                .getAttribute('aria-expanded')).toBe('true');
            menuItems
                .at(1)
                .at(0)
                .find('a')
                .first()
                .simulate('keydown', { keyCode: keyboard_key_1.SpacebarKey });
            expect(menuItems
                .at(1)
                .at(0)
                .find('a')
                .first()
                .getDOMNode()
                .getAttribute('aria-expanded')).toBe('false');
        });
        describe('itemsCount and itemPosition', function () {
            it('should be set by default', function () {
                var menuItems = utils_1.mountWithProvider(React.createElement(Menu_1.Menu, { items: getItems() })).find('MenuItem');
                expect(menuItems.at(0).prop('itemPosition')).toBe(1);
                expect(menuItems.at(0).prop('itemsCount')).toBe(2);
                expect(menuItems.at(1).prop('itemPosition')).toBe(2);
                expect(menuItems.at(1).prop('itemsCount')).toBe(2);
            });
            it('should not be set on the divider', function () {
                var wrapper = utils_1.mountWithProvider(React.createElement(Menu_1.Menu, { items: tslib_1.__spreadArrays(getItems(), [{ kind: 'divider', key: 'divider' }]) }));
                var menuItems = wrapper.find('MenuItem');
                var menuDividers = wrapper.find('MenuDivider');
                expect(menuItems.at(0).prop('itemPosition')).toBe(1);
                expect(menuItems.at(0).prop('itemsCount')).toBe(2);
                expect(menuItems.at(1).prop('itemsCount')).toBe(2);
                expect(menuItems.at(1).prop('itemPosition')).toBe(2);
                expect(menuDividers.at(0).prop('itemsCount')).toBeUndefined();
                expect(menuDividers.at(0).prop('itemPosition')).toBeUndefined();
            });
        });
        describe('variables', function () {
            function checkMergedVariables(menu) {
                expect(menu
                    .find('MenuItem')
                    .first()
                    .prop('variables')()).toEqual(expect.objectContaining({ a: 'menu', b: 'overwritten', c: 'item' }));
                expect(menu
                    .find('MenuDivider')
                    .first()
                    .prop('variables')()).toEqual(expect.objectContaining({ a: 'menu', b: 'overwrittenInDivider', c: 'divider' }));
            }
            it('are passed from Menu to MenuItem and MenuDivider and correctly merged', function () {
                var menu = utils_1.mountWithProvider(React.createElement(Menu_1.Menu, { variables: { a: 'menu', b: 'menu' }, items: [
                        { key: 1, content: 'menu item', variables: { b: 'overwritten', c: 'item' } },
                        {
                            key: 'd1',
                            kind: 'divider',
                            variables: { b: 'overwrittenInDivider', c: 'divider' },
                        },
                    ] }));
                checkMergedVariables(menu);
            });
            it('as functions are passed from Menu to MenuItem and MenuDivider and correctly merged', function () {
                var menu = utils_1.mountWithProvider(React.createElement(Menu_1.Menu, { variables: function () { return ({ a: 'menu', b: 'menu' }); }, items: [
                        { key: 1, content: 'menu item', variables: function () { return ({ b: 'overwritten', c: 'item' }); } },
                        {
                            key: 'd1',
                            kind: 'divider',
                            variables: function () { return ({ b: 'overwrittenInDivider', c: 'divider' }); },
                        },
                    ] }));
                checkMergedVariables(menu);
            });
        });
        describe('accessibility', function () {
            commonTests_1.handlesAccessibility(Menu_1.Menu, {
                defaultRootRole: 'menu',
            });
            test('aria-label should be added to the menu', function () {
                var ariaLabel = 'A Nice Toolbar';
                var menuComponent = utils_1.mountWithProviderAndGetComponent(Menu_1.Menu, React.createElement(Menu_1.Menu, { "aria-label": ariaLabel }));
                expect(commonTests_1.getRenderedAttribute(menuComponent, 'aria-label', '')).toBe(ariaLabel);
            });
            test('aria-labelledby should be added to the menu', function () {
                var ariaLabelledByID = 'element-that-labels';
                var menuComponent = utils_1.mountWithProviderAndGetComponent(Menu_1.Menu, React.createElement(Menu_1.Menu, { "aria-labelledby": ariaLabelledByID }));
                expect(commonTests_1.getRenderedAttribute(menuComponent, 'aria-labelledby', '')).toBe(ariaLabelledByID);
            });
            test('attributes should override the default ones from child behavior', function () {
                var items = getItems();
                items[0]['accessibility'] = accessibility_1.tabBehavior;
                var menuItemComponent = utils_1.mountWithProviderAndGetComponent(Menu_1.Menu, React.createElement(Menu_1.Menu, { items: items, accessibility: accessibility_1.menuBehavior })).find('MenuItem');
                expect(commonTests_1.getRenderedAttribute(menuItemComponent.at(0), 'role', 'a')).toBe('tab');
            });
            describe('as a Toolbar', function () {
                test('root role should be menuAsToolbar', function () {
                    var menuComponent = utils_1.mountWithProviderAndGetComponent(Menu_1.Menu, React.createElement(Menu_1.Menu, { accessibility: accessibility_1.menuAsToolbarBehavior }));
                    expect(commonTests_1.getRenderedAttribute(menuComponent, 'role', '')).toBe('toolbar');
                });
                test('children role should be menuAsToolbarButton', function () {
                    var menuItemComponents = utils_1.mountWithProviderAndGetComponent(Menu_1.Menu, React.createElement(Menu_1.Menu, { accessibility: accessibility_1.menuAsToolbarBehavior, items: getItems() })).find('MenuItem');
                    expect(commonTests_1.getRenderedAttribute(menuItemComponents.at(0), 'role', 'a')).toBe('button');
                    expect(commonTests_1.getRenderedAttribute(menuItemComponents.at(1), 'role', 'a')).toBe('button');
                });
            });
            describe('as a TabList', function () {
                test('root role should be tablist', function () {
                    var menuComponent = utils_1.mountWithProviderAndGetComponent(Menu_1.Menu, React.createElement(Menu_1.Menu, { accessibility: accessibility_1.tabListBehavior }));
                    expect(commonTests_1.getRenderedAttribute(menuComponent, 'role', '')).toBe('tablist');
                });
                test('children role should be tab', function () {
                    var menuItemComponents = utils_1.mountWithProviderAndGetComponent(Menu_1.Menu, React.createElement(Menu_1.Menu, { accessibility: accessibility_1.tabListBehavior, items: getItems() })).find('MenuItem');
                    expect(commonTests_1.getRenderedAttribute(menuItemComponents.at(0), 'role', 'a')).toBe('tab');
                    expect(commonTests_1.getRenderedAttribute(menuItemComponents.at(1), 'role', 'a')).toBe('tab');
                });
            });
        });
    });
});
