"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var keyboard_key_1 = require("@fluentui/keyboard-key");
var commonTests_1 = require("test/specs/commonTests");
var utils_1 = require("test/utils");
var HierarchicalTree_1 = require("src/components/HierarchicalTree/HierarchicalTree");
var HierarchicalTreeTitle_1 = require("src/components/HierarchicalTree/HierarchicalTreeTitle");
var HierarchicalTreeItem_1 = require("src/components/HierarchicalTree/HierarchicalTreeItem");
var items = [
    {
        key: '1',
        title: '1',
        items: [
            {
                key: '11',
                title: '11',
            },
            {
                key: '12',
                title: '12',
                items: [
                    {
                        key: '121',
                        title: '121',
                    },
                ],
            },
        ],
    },
    {
        key: '2',
        title: '2',
        items: [
            {
                key: '21',
                title: '21',
                items: [
                    {
                        key: '211',
                        title: '211',
                    },
                ],
            },
            {
                key: '22',
                title: '22',
            },
        ],
    },
    {
        key: '3',
        title: '3',
    },
];
var getTitles = function (wrapper) {
    return wrapper.find("." + HierarchicalTreeTitle_1.hierarchicalTreeTitleClassName).filterWhere(function (n) { return typeof n.type() === 'string'; });
};
var getItems = function (wrapper) {
    return wrapper.find("." + HierarchicalTreeItem_1.hierarchicalTreeItemClassName).filterWhere(function (n) { return typeof n.type() === 'string'; });
};
var checkOpenTitles = function (wrapper, expected) {
    var titles = getTitles(wrapper);
    expect(titles.length).toEqual(expected.length);
    expected.forEach(function (expectedTitle, index) {
        expect(titles.at(index).getDOMNode().textContent).toEqual(expectedTitle);
    });
};
describe('HierarchialTree', function () {
    commonTests_1.isConformant(HierarchicalTree_1.HierarchicalTree, {
        constructorName: 'HierarchicalTree',
        autoControlledProps: ['activeIndex'],
    });
    describe('activeIndex', function () {
        it('should contain index of item open at click', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(HierarchicalTree_1.HierarchicalTree, { items: items }));
            getTitles(wrapper)
                .at(0) // title 1
                .simulate('click');
            checkOpenTitles(wrapper, ['1', '11', '12', '2', '3']);
            getTitles(wrapper)
                .at(3) // title 2
                .simulate('click');
            checkOpenTitles(wrapper, ['1', '11', '12', '2', '21', '22', '3']);
        });
        it('should have index of item removed when closed at click', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(HierarchicalTree_1.HierarchicalTree, { items: items, defaultActiveIndex: [0, 1] }));
            getTitles(wrapper)
                .at(0) // title 1
                .simulate('click');
            checkOpenTitles(wrapper, ['1', '2', '21', '22', '3']);
        });
        it('should contain only one index at a time if exclusive', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(HierarchicalTree_1.HierarchicalTree, { items: items, exclusive: true }));
            getTitles(wrapper)
                .at(0) // title 1
                .simulate('click');
            checkOpenTitles(wrapper, ['1', '11', '12', '2', '3']);
            getTitles(wrapper)
                .at(3) // title 2
                .simulate('click');
            checkOpenTitles(wrapper, ['1', '2', '21', '22', '3']);
        });
        it('should contain index of item open by ArrowRight', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(HierarchicalTree_1.HierarchicalTree, { items: items }));
            getTitles(wrapper)
                .at(0) // title 1
                .simulate('keydown', { keyCode: keyboard_key_1.keyboardKey.ArrowRight });
            checkOpenTitles(wrapper, ['1', '11', '12', '2', '3']);
        });
        it('should have index of item removed if closed by ArrowLeft', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(HierarchicalTree_1.HierarchicalTree, { items: items, defaultActiveIndex: [0, 1] }));
            getItems(wrapper)
                .at(0) // title 1
                .simulate('keydown', { keyCode: keyboard_key_1.keyboardKey.ArrowLeft });
            checkOpenTitles(wrapper, ['1', '2', '21', '22', '3']);
        });
        it('should have all TreeItems with a subtree open on asterisk key', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(HierarchicalTree_1.HierarchicalTree, { items: items }));
            getTitles(wrapper)
                .at(0) // title 1
                .simulate('keydown', { keyCode: keyboard_key_1.keyboardKey['*'] });
            checkOpenTitles(wrapper, ['1', '11', '12', '2', '21', '22', '3']);
        });
        it('should expand subtrees only on current level on asterisk key', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(HierarchicalTree_1.HierarchicalTree, { items: items, defaultActiveIndex: [0] }));
            getTitles(wrapper)
                .at(1) // title 11
                .simulate('keydown', { keyCode: keyboard_key_1.keyboardKey['*'] });
            checkOpenTitles(wrapper, ['1', '11', '12', '121', '2', '3']);
        });
        it('should not be changed on asterisk key if all siblings are already expanded', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(HierarchicalTree_1.HierarchicalTree, { items: items, defaultActiveIndex: [0, 1, 2] }));
            getTitles(wrapper)
                .at(0) // title 1
                .simulate('keydown', { keyCode: keyboard_key_1.keyboardKey['*'] });
            checkOpenTitles(wrapper, ['1', '11', '12', '2', '21', '22', '3']);
        });
    });
});
