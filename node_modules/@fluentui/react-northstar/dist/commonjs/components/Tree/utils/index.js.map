{"version":3,"sources":["components/Tree/utils/index.ts"],"names":["hasSubtree","item","length","removeItemAtIndex","items","itemIndex","slice","getAllSelectableChildrenId","reduce","acc","hasOwnProperty","selectable","id","isAllGroupChecked","selectedItemIds","selectableItemIds","every","indexOf","getSiblings","itemId","getSiblingsFn","findIndex","result","processItemsForSelection","treeItemProps","treeItemHasSubtree","isExpandedSelectableParent","selectableParent","expanded","nextSelectedItemIds","selectedItems","filter","selectItems","forEach","selectble","push","itemID","TreeContext","React","createContext","onFocusFirstChild","onFocusParent","onSiblingsExpand","onTitleClick"],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport * as React from 'react';\nimport { TreeItemProps } from '../TreeItem';\nimport { ShorthandValue } from '../../../types';\n\nexport const hasSubtree = (item: TreeItemProps | ShorthandValue<TreeItemProps>): boolean => {\n  return !_.isNil(item['items']) && item['items'].length > 0;\n};\n\nexport const removeItemAtIndex = (items: any[], itemIndex: number): any[] => {\n  return [...items.slice(0, itemIndex), ...items.slice(itemIndex + 1)];\n};\n\nexport const getAllSelectableChildrenId = (items: TreeItemProps[]): string[] => {\n  return items.reduce<string[]>((acc, item) => {\n    if (item.items) {\n      return [...acc, ...getAllSelectableChildrenId(item.items as TreeItemProps[])];\n    }\n\n    return item.hasOwnProperty('selectable') && !item.selectable ? acc : [...acc, item.id];\n  }, []);\n};\n\nexport const isAllGroupChecked = (items: TreeItemProps[], selectedItemIds: string[]) => {\n  const selectableItemIds = getAllSelectableChildrenId(items);\n\n  return selectableItemIds.every(id => selectedItemIds.indexOf(id) > -1);\n};\n\n/**\n * Looks for the item inside the nested items array and returns its siblings.\n * @param {any[]} items The nested items array.\n * @param {string} itemId The id of the item to return the children of.\n * @returns {any[]} The item siblings\n */\nexport const getSiblings = (items: any[], itemId: string): any[] => {\n  function getSiblingsFn(items: any[]) {\n    const itemIndex = items.findIndex(item => item.id === itemId);\n\n    if (itemIndex > -1) {\n      return removeItemAtIndex(items, itemIndex);\n    }\n\n    for (const item of items) {\n      if (item.items) {\n        const result = getSiblingsFn(item.items);\n\n        if (result) {\n          return result;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  return getSiblingsFn(items);\n};\n\nexport const processItemsForSelection = (treeItemProps: TreeItemProps, selectedItemIds: string[]) => {\n  const treeItemHasSubtree = hasSubtree(treeItemProps);\n  const isExpandedSelectableParent = treeItemHasSubtree && treeItemProps.selectableParent && treeItemProps.expanded;\n\n  let nextSelectedItemIds = selectedItemIds;\n\n  // push all tree items under particular parent into selection array\n  // not parent itself, therefore not procced with selection\n\n  if (isExpandedSelectableParent) {\n    if (isAllGroupChecked(treeItemProps.items as TreeItemProps[], selectedItemIds)) {\n      const selectedItems = getAllSelectableChildrenId(treeItemProps.items as TreeItemProps[]);\n      nextSelectedItemIds = selectedItemIds.filter(id => selectedItems.indexOf(id) === -1);\n    } else {\n      const selectItems = items => {\n        items.forEach(item => {\n          const selectble = item.hasOwnProperty('selectable') ? item.selectable : treeItemProps.selectable;\n          if (selectedItemIds.indexOf(item.id) === -1) {\n            if (item.items) {\n              selectItems(item.items);\n            } else if (selectble) {\n              nextSelectedItemIds.push(item.id);\n            }\n          }\n        });\n      };\n      selectItems(treeItemProps.items);\n    }\n\n    return [...nextSelectedItemIds];\n  }\n\n  // push/remove single tree item into selection array\n  if (selectedItemIds.indexOf(treeItemProps.id) === -1) {\n    nextSelectedItemIds = [...selectedItemIds, treeItemProps.id];\n  } else {\n    nextSelectedItemIds = nextSelectedItemIds.filter(itemID => itemID !== treeItemProps.id);\n  }\n\n  return nextSelectedItemIds;\n};\n\nexport interface TreeRenderContextValue {\n  onFocusFirstChild: (itemId: string) => void;\n  onFocusParent: (itemId: string) => void;\n  onSiblingsExpand: (e: React.SyntheticEvent, itemProps: TreeItemProps) => void;\n  onTitleClick: (e: React.SyntheticEvent, itemProps: TreeItemProps, executeSelection?: boolean) => void;\n}\n\nexport const TreeContext = React.createContext<TreeRenderContextValue>({\n  onFocusFirstChild: _.noop,\n  onFocusParent: _.noop,\n  onSiblingsExpand: _.noop,\n  onTitleClick: _.noop,\n});\n"],"file":"index.js"}