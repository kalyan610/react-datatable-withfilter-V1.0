"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.TreeContext = exports.processItemsForSelection = exports.getSiblings = exports.isAllGroupChecked = exports.getAllSelectableChildrenId = exports.removeItemAtIndex = exports.hasSubtree = void 0;

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _isNil2 = _interopRequireDefault(require("lodash/isNil"));

var React = _interopRequireWildcard(require("react"));

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var hasSubtree = function hasSubtree(item) {
  return !(0, _isNil2.default)(item['items']) && item['items'].length > 0;
};

exports.hasSubtree = hasSubtree;

var removeItemAtIndex = function removeItemAtIndex(items, itemIndex) {
  return [].concat(items.slice(0, itemIndex), items.slice(itemIndex + 1));
};

exports.removeItemAtIndex = removeItemAtIndex;

var getAllSelectableChildrenId = function getAllSelectableChildrenId(items) {
  return items.reduce(function (acc, item) {
    if (item.items) {
      return [].concat(acc, getAllSelectableChildrenId(item.items));
    }

    return item.hasOwnProperty('selectable') && !item.selectable ? acc : [].concat(acc, [item.id]);
  }, []);
};

exports.getAllSelectableChildrenId = getAllSelectableChildrenId;

var isAllGroupChecked = function isAllGroupChecked(items, selectedItemIds) {
  var selectableItemIds = getAllSelectableChildrenId(items);
  return selectableItemIds.every(function (id) {
    return selectedItemIds.indexOf(id) > -1;
  });
};
/**
 * Looks for the item inside the nested items array and returns its siblings.
 * @param {any[]} items The nested items array.
 * @param {string} itemId The id of the item to return the children of.
 * @returns {any[]} The item siblings
 */


exports.isAllGroupChecked = isAllGroupChecked;

var getSiblings = function getSiblings(items, itemId) {
  function getSiblingsFn(items) {
    var itemIndex = items.findIndex(function (item) {
      return item.id === itemId;
    });

    if (itemIndex > -1) {
      return removeItemAtIndex(items, itemIndex);
    }

    for (var _iterator = _createForOfIteratorHelperLoose(items), _step; !(_step = _iterator()).done;) {
      var item = _step.value;

      if (item.items) {
        var result = getSiblingsFn(item.items);

        if (result) {
          return result;
        }
      }
    }

    return null;
  }

  return getSiblingsFn(items);
};

exports.getSiblings = getSiblings;

var processItemsForSelection = function processItemsForSelection(treeItemProps, selectedItemIds) {
  var treeItemHasSubtree = hasSubtree(treeItemProps);
  var isExpandedSelectableParent = treeItemHasSubtree && treeItemProps.selectableParent && treeItemProps.expanded;
  var nextSelectedItemIds = selectedItemIds; // push all tree items under particular parent into selection array
  // not parent itself, therefore not procced with selection

  if (isExpandedSelectableParent) {
    if (isAllGroupChecked(treeItemProps.items, selectedItemIds)) {
      var selectedItems = getAllSelectableChildrenId(treeItemProps.items);
      nextSelectedItemIds = selectedItemIds.filter(function (id) {
        return selectedItems.indexOf(id) === -1;
      });
    } else {
      var selectItems = function selectItems(items) {
        items.forEach(function (item) {
          var selectble = item.hasOwnProperty('selectable') ? item.selectable : treeItemProps.selectable;

          if (selectedItemIds.indexOf(item.id) === -1) {
            if (item.items) {
              selectItems(item.items);
            } else if (selectble) {
              nextSelectedItemIds.push(item.id);
            }
          }
        });
      };

      selectItems(treeItemProps.items);
    }

    return [].concat(nextSelectedItemIds);
  } // push/remove single tree item into selection array


  if (selectedItemIds.indexOf(treeItemProps.id) === -1) {
    nextSelectedItemIds = [].concat(selectedItemIds, [treeItemProps.id]);
  } else {
    nextSelectedItemIds = nextSelectedItemIds.filter(function (itemID) {
      return itemID !== treeItemProps.id;
    });
  }

  return nextSelectedItemIds;
};

exports.processItemsForSelection = processItemsForSelection;
var TreeContext = /*#__PURE__*/React.createContext({
  onFocusFirstChild: _noop2.default,
  onFocusParent: _noop2.default,
  onSiblingsExpand: _noop2.default,
  onTitleClick: _noop2.default
});
exports.TreeContext = TreeContext;
//# sourceMappingURL=index.js.map
