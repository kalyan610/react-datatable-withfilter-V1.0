{"version":3,"sources":["components/Tree/TreeTitle.tsx"],"names":["treeTitleClassName","treeTitleSlotClassNames","indicator","TreeTitle","props","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","content","design","hasSubtree","level","index","styles","treeSize","variables","selectionIndicator","disabled","selected","selectable","selectableParent","expanded","indeterminate","getA11Props","debugName","actionHandlers","performClick","e","preventDefault","stopPropagation","handleClick","performSelection","mapPropsToBehavior","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","ElementType","unhandledProps","handledProps","selectionIndicatorOverrideProps","predefinedProps","onClick","selectIndicator","Box","create","defaultProps","as","overrideProps","element","root","rtlTextContainer","getAttributes","forElements","propTypes","commonPropTypes","createCommon","PropTypes","bool","number","func","customPropTypes","shorthandAllowingChildren","treeTitleBehavior","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, treeTitleBehavior, TreeTitleBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { Box, BoxProps } from '../Box/Box';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  commonPropTypes,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport { ComponentEventHandler, FluentComponentStaticProps, ShorthandValue } from '../../types';\n\nexport interface TreeTitleSlotClassNames {\n  indicator: string;\n}\n\nexport interface TreeTitleProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TreeTitleBehaviorProps>;\n\n  /** Whether or not the title has a subtree. */\n  hasSubtree?: boolean;\n\n  /** The index of the title among its siblings. Count starts at 1. */\n  index?: number;\n\n  /** Level of the tree/subtree that contains this title. */\n  level?: number;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<TreeTitleProps>;\n\n  /** Whether or not the subtree of the title is in the open state. */\n  expanded?: boolean;\n\n  /** Size of the tree containing this title without any children. */\n  treeSize?: number;\n\n  /** Whether or not tree title is part of the selectable parent. */\n  selectableParent?: boolean;\n\n  /** A selection indicator icon can be customized. */\n  selectionIndicator?: ShorthandValue<BoxProps>;\n\n  /** A selection indicator can appear disabled and be unable to change states. */\n  disabled?: SupportedIntrinsicInputProps['disabled'];\n\n  /** A state of selection indicator. */\n  selected?: boolean;\n\n  /** Whether or not tree title is selectable. */\n  selectable?: boolean;\n\n  /** For selectable parents define if all nested children are checked */\n  indeterminate?: boolean;\n}\n\nexport type TreeTitleStylesProps = Pick<\n  TreeTitleProps,\n  'selected' | 'selectable' | 'disabled' | 'selectableParent' | 'indeterminate'\n>;\n\nexport const treeTitleClassName = 'ui-tree__title';\n\nexport const treeTitleSlotClassNames = {\n  indicator: `${treeTitleClassName}__selection-indicator`,\n};\n\n/**\n * A TreeTitle renders a title of TreeItem.\n */\nexport const TreeTitle: ComponentWithAs<'a', TreeTitleProps> & FluentComponentStaticProps<TreeTitleProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TreeTitle.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    children,\n    className,\n    content,\n    design,\n    hasSubtree,\n    level,\n    index,\n    styles,\n    treeSize,\n    variables,\n    selectionIndicator,\n    disabled,\n    selected,\n    selectable,\n    selectableParent,\n    expanded,\n    indeterminate,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: TreeTitle.displayName,\n    actionHandlers: {\n      performClick: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleClick(e);\n      },\n      performSelection: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleClick(e);\n      },\n    },\n    mapPropsToBehavior: () => ({\n      hasSubtree,\n      level,\n      index,\n      treeSize,\n      selected,\n      selectable,\n      selectableParent,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<TreeTitleStylesProps>(TreeTitle.displayName, {\n    className: treeTitleClassName,\n    mapPropsToStyles: () => ({\n      selected,\n      selectableParent,\n      disabled,\n      selectable,\n      indeterminate,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TreeTitle.handledProps, props);\n  const handleClick = e => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const selectionIndicatorOverrideProps = (predefinedProps: BoxProps) => ({\n    onClick: (e: React.SyntheticEvent) => {\n      e.stopPropagation(); // otherwise onClick on title will also be executed\n      handleClick(e);\n      _.invoke(predefinedProps, 'onClick', e);\n    },\n  });\n\n  const selectIndicator = Box.create(selectionIndicator, {\n    defaultProps: () => ({\n      as: 'span',\n      selected,\n      ...(selectableParent && !_.isEmpty(selectionIndicator) && { expanded }),\n      ...getA11Props('indicator', {\n        className: treeTitleSlotClassNames.indicator,\n        ...(((selectable && !hasSubtree) || (selectableParent && expanded)) &&\n          _.isEmpty(selectionIndicator) && {\n            styles: resolvedStyles.selectionIndicator,\n          }),\n      }),\n    }),\n    overrideProps: selectionIndicatorOverrideProps,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        onClick: handleClick,\n        selected,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n\n      {selectable && selectIndicator}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nTreeTitle.displayName = 'TreeTitle';\n\nTreeTitle.propTypes = {\n  ...commonPropTypes.createCommon(),\n  hasSubtree: PropTypes.bool,\n  index: PropTypes.number,\n  level: PropTypes.number,\n  onClick: PropTypes.func,\n  expanded: PropTypes.bool,\n  selected: PropTypes.bool,\n  selectable: PropTypes.bool,\n  selectableParent: PropTypes.bool,\n  treeSize: PropTypes.number,\n  selectionIndicator: customPropTypes.shorthandAllowingChildren,\n  indeterminate: PropTypes.bool,\n};\nTreeTitle.defaultProps = {\n  as: 'a',\n  selectionIndicator: {},\n  accessibility: treeTitleBehavior,\n};\nTreeTitle.handledProps = Object.keys(TreeTitle.propTypes) as any;\n\nTreeTitle.create = createShorthandFactory({\n  Component: TreeTitle,\n  mappedProp: 'content',\n});\n"],"file":"TreeTitle.js"}