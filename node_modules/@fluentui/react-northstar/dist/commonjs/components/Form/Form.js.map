{"version":3,"sources":["components/Form/Form.tsx"],"names":["formClassName","Form","props","context","displayName","telemetry","setStart","setEnd","className","design","styles","variables","action","children","accessibility","ElementType","unhandledProps","handledProps","mapPropsToInlineStyles","rtl","classes","getA11yProps","debugName","handleSubmit","e","args","renderFields","fields","field","FormField","create","element","root","rtlTextContainer","getAttributes","forElements","propTypes","commonPropTypes","createCommon","content","PropTypes","string","customPropTypes","collectionShorthand","onSubmit","func","defaultProps","as","Object","keys","Component","Field","FieldCustom","FormFieldCustom","Label","FormLabel","Message","FormMessage","Input","FormInput","Checkbox","FormCheckbox","Dropdown","FormDropdown","Button","FormButton","RadioGroup","FormRadioGroup","Slider","FormSlider"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthandFactory,\n} from '../../utils';\nimport { ComponentEventHandler, ShorthandCollection, FluentComponentStaticProps } from '../../types';\nimport { FormField, FormFieldProps } from './FormField';\nimport {\n  ComponentWithAs,\n  useTelemetry,\n  getElementType,\n  useUnhandledProps,\n  useStyles,\n  useFluentContext,\n  useAccessibility,\n} from '@fluentui/react-bindings';\n\nimport { FormLabel } from './FormLabel';\nimport { FormMessage } from './FormMessage';\nimport { FormInput } from './FormInput';\nimport { FormCheckbox } from './FormCheckbox';\nimport { FormDropdown } from './FormDropdown';\nimport { FormButton } from './FormButton';\nimport { FormRadioGroup } from './FormRadioGroup';\nimport { FormSlider } from './FormSlider';\nimport { FormFieldCustom } from './FormFieldCustom';\n\nexport interface FormProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** The HTML form action. */\n  action?: string;\n\n  /** Shorthand array of props for the Form.Fields inside the Form. */\n  fields?: ShorthandCollection<FormFieldProps>;\n\n  /**\n   * The HTML form submit handler.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onSubmit?: ComponentEventHandler<FormProps>;\n}\n\nexport const formClassName = 'ui-form';\n\nexport type FormStylesProps = never;\n\n/**\n * A Form is used to collect, oprionally validate, and submit the user input, in a structured way.\n */\nexport const Form: ComponentWithAs<'form', FormProps> &\n  FluentComponentStaticProps<FormProps> & {\n    Field: typeof FormField;\n    Label: typeof FormLabel;\n    Message: typeof FormMessage;\n    Input: typeof FormInput;\n    Checkbox: typeof FormCheckbox;\n    Dropdown: typeof FormDropdown;\n    Button: typeof FormButton;\n    RadioGroup: typeof FormRadioGroup;\n    Slider: typeof FormSlider;\n    FieldCustom: typeof FormFieldCustom;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Form.displayName, context.telemetry);\n  setStart();\n  const { className, design, styles, variables, action, children, accessibility } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Form.handledProps, props);\n\n  const { classes } = useStyles<FormStylesProps>(Form.displayName, {\n    className: formClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11yProps = useAccessibility<never>(accessibility, {\n    debugName: Form.displayName,\n    rtl: context.rtl,\n  });\n\n  const handleSubmit = (e, ...args) => {\n    const { action } = props;\n\n    // Heads up! Third party libs can pass own data as first argument, we need to check that it has preventDefault()\n    // method.\n    if (!action) _.invoke(e, 'preventDefault');\n    _.invoke(props, 'onSubmit', e, props, ...args);\n  };\n\n  const renderFields = () => {\n    const { fields } = props;\n    return _.map(fields, field => FormField.create(field));\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n      action={action}\n      onSubmit={handleSubmit}\n    >\n      {childrenExist(children) ? children : renderFields()}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nForm.displayName = 'Form';\n\nForm.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  action: PropTypes.string,\n  fields: customPropTypes.collectionShorthand,\n  onSubmit: PropTypes.func,\n};\n\nForm.defaultProps = {\n  as: 'form',\n};\n\nForm.handledProps = Object.keys(Form.propTypes) as any;\n\nForm.create = createShorthandFactory({\n  Component: Form,\n});\n\nForm.Field = FormField;\nForm.FieldCustom = FormFieldCustom;\nForm.Label = FormLabel;\nForm.Message = FormMessage;\nForm.Input = FormInput;\nForm.Checkbox = FormCheckbox;\nForm.Dropdown = FormDropdown;\nForm.Button = FormButton;\nForm.RadioGroup = FormRadioGroup;\nForm.Slider = FormSlider;\n"],"file":"Form.js"}