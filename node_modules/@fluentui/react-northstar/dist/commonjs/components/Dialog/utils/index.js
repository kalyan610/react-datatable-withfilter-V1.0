"use strict";

exports.__esModule = true;
exports.enableBodyScroll = enableBodyScroll;
exports.disableBodyScroll = disableBodyScroll;
exports.unlockBodyScroll = exports.lockBodyScroll = void 0;

var _disableIosBodyScroll = function _disableIosBodyScroll(event) {
  event.preventDefault();
};

function enableBodyScroll(target) {
  if (target) {
    target.style.overflow = 'unset';
    target.removeEventListener('touchmove', _disableIosBodyScroll);
  }
}

function disableBodyScroll(target) {
  if (target) {
    target.style.overflow = 'hidden';
    target.addEventListener('touchmove', _disableIosBodyScroll, {
      passive: false,
      capture: false
    });
  }
}

var dialogsCounterAttribute = 'fluent-dialogs-count';

var lockBodyScroll = function lockBodyScroll(target) {
  var openDialogs = (+target.body.getAttribute(dialogsCounterAttribute) || 0) + 1;
  target.body.setAttribute(dialogsCounterAttribute, "" + openDialogs); // Avoid to block scroll in nested dialogs

  if (openDialogs === 1) {
    disableBodyScroll(target.body);
  }
};

exports.lockBodyScroll = lockBodyScroll;

var unlockBodyScroll = function unlockBodyScroll(target) {
  var openDialogs = (+target.body.getAttribute(dialogsCounterAttribute) || 0) - 1;
  target.body.setAttribute(dialogsCounterAttribute, "" + openDialogs); // Only enables scroll if all dialogs are closed

  if (openDialogs === 0) {
    enableBodyScroll(target.body);
    target.body.removeAttribute(dialogsCounterAttribute);
  }
};

exports.unlockBodyScroll = unlockBodyScroll;
//# sourceMappingURL=index.js.map
