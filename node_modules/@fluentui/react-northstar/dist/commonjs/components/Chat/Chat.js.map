{"version":3,"sources":["components/Chat/Chat.tsx"],"names":["chatClassName","chatSlotClassNames","item","Chat","props","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","design","items","styles","variables","getA11Props","debugName","rtl","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","unstable_wrapWithFocusZone","root","rtlTextContainer","getAttributes","forElements","ChatItem","create","defaultProps","chatBehavior","as","propTypes","commonPropTypes","createCommon","content","PropTypes","arrayOf","customPropTypes","itemShorthand","Object","keys","Item","Message","ChatMessage","MessageDetails","ChatMessageDetails","Component"],"mappings":"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","sourcesContent":["import { Accessibility, chatBehavior, ChatBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useFluentContext,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  ChildrenComponentProps,\n  commonPropTypes,\n  createShorthandFactory,\n  rtlTextContainer,\n  UIComponentProps,\n} from '../../utils';\nimport { ShorthandCollection, FluentComponentStaticProps } from '../../types';\nimport { ChatItem, ChatItemProps } from './ChatItem';\nimport { ChatMessage } from './ChatMessage';\nimport { ChatMessageDetails } from './ChatMessageDetails';\n\nexport interface ChatSlotClassNames {\n  item: string;\n}\n\nexport interface ChatProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ChatBehaviorProps>;\n\n  /** Shorthand array of the items inside the chat. */\n  items?: ShorthandCollection<ChatItemProps>;\n}\n\nexport type ChatStylesProps = {};\nexport const chatClassName = 'ui-chat';\nexport const chatSlotClassNames: ChatSlotClassNames = {\n  item: `${chatClassName}__item`,\n};\n\n/**\n * A Chat displays messages from a conversation between multiple users.\n */\nexport const Chat: ComponentWithAs<'ul', ChatProps> &\n  FluentComponentStaticProps<ChatProps> & {\n    Item: typeof ChatItem;\n    Message: typeof ChatMessage;\n    MessageDetails: typeof ChatMessageDetails;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Chat.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, design, items, styles, variables } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Chat.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ChatStylesProps>(Chat.displayName, {\n    className: chatClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Chat.handledProps, props);\n\n  const element = getA11Props.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children)\n        ? children\n        : _.map(items, item =>\n            ChatItem.create(item, {\n              defaultProps: () => ({ className: chatSlotClassNames.item }),\n            }),\n          )}\n    </ElementType>,\n  );\n  setEnd();\n\n  return element;\n};\n\nChat.displayName = 'Chat';\n\nChat.defaultProps = {\n  accessibility: chatBehavior,\n  as: 'ul',\n};\nChat.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  items: PropTypes.arrayOf(customPropTypes.itemShorthand),\n};\nChat.handledProps = Object.keys(Chat.propTypes) as any;\n\nChat.Item = ChatItem;\nChat.Message = ChatMessage;\nChat.MessageDetails = ChatMessageDetails;\n\nChat.create = createShorthandFactory({ Component: Chat });\n"],"file":"Chat.js"}