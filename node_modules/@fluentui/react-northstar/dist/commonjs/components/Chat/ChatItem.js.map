{"version":3,"sources":["components/Chat/ChatItem.tsx"],"names":["chatItemClassName","chatItemSlotClassNames","message","gutter","ChatItem","props","context","displayName","telemetry","setStart","setEnd","accessibility","attached","children","className","contentPosition","design","styles","variables","getA11Props","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","renderContent","gutterElement","Box","create","defaultProps","messageElement","ElementType","unhandledProps","handledProps","element","root","rtlTextContainer","getAttributes","forElements","as","propTypes","commonPropTypes","createCommon","content","PropTypes","oneOfType","bool","oneOf","customPropTypes","itemShorthand","Object","keys","Component","mappedProp"],"mappings":";;;;;;;AACA;;AASA;;AACA;;AACA;;AAGA;;AAQA;;AACA;;AAOO,IAAMA,iBAAiB,GAAG,eAA1B;;AACA,IAAMC,sBAA8C,GAAG;AAC5DC,EAAAA,OAAO,EAAKF,iBAAL,cADqD;AAE5DG,EAAAA,MAAM,EAAKH,iBAAL;AAFsD,CAAvD;;;AA0BP;;;AAGO,IAAMI,QAA0F,GAAG,SAA7FA,QAA6F,CAAAC,KAAK,EAAI;AACjH,MAAMC,OAAO,GAAG,sCAAhB;;AADiH,sBAEpF,iCAAaF,QAAQ,CAACG,WAAtB,EAAmCD,OAAO,CAACE,SAA3C,CAFoF;AAAA,MAEzGC,QAFyG,iBAEzGA,QAFyG;AAAA,MAE/FC,MAF+F,iBAE/FA,MAF+F;;AAGjHD,EAAAA,QAAQ;AAHyG,MAM/GE,aAN+G,GAgB7GN,KAhB6G,CAM/GM,aAN+G;AAAA,MAO/GC,QAP+G,GAgB7GP,KAhB6G,CAO/GO,QAP+G;AAAA,MAQ/GC,QAR+G,GAgB7GR,KAhB6G,CAQ/GQ,QAR+G;AAAA,MAS/GC,SAT+G,GAgB7GT,KAhB6G,CAS/GS,SAT+G;AAAA,MAU/GC,eAV+G,GAgB7GV,KAhB6G,CAU/GU,eAV+G;AAAA,MAW/GC,MAX+G,GAgB7GX,KAhB6G,CAW/GW,MAX+G;AAAA,MAY/Gb,MAZ+G,GAgB7GE,KAhB6G,CAY/GF,MAZ+G;AAAA,MAa/GD,OAb+G,GAgB7GG,KAhB6G,CAa/GH,OAb+G;AAAA,MAc/Ge,MAd+G,GAgB7GZ,KAhB6G,CAc/GY,MAd+G;AAAA,MAe/GC,SAf+G,GAgB7Gb,KAhB6G,CAe/Ga,SAf+G;AAkBjH,MAAMC,WAAW,GAAG,qCAAiBR,aAAjB,EAAgC;AAClDS,IAAAA,SAAS,EAAEhB,QAAQ,CAACG,WAD8B;AAElDc,IAAAA,GAAG,EAAEf,OAAO,CAACe;AAFqC,GAAhC,CAApB;;AAlBiH,mBAsBrE,8BAA+BjB,QAAQ,CAACG,WAAxC,EAAqD;AAC/FO,IAAAA,SAAS,EAAEd,iBADoF;AAE/FsB,IAAAA,gBAAgB,EAAE;AAAA,aAAO;AACvBV,QAAAA,QAAQ,EAARA,QADuB;AAEvBG,QAAAA,eAAe,EAAfA;AAFuB,OAAP;AAAA,KAF6E;AAM/FQ,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7BT,QAAAA,SAAS,EAATA,SAD6B;AAE7BE,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAAA,KANuE;AAY/FG,IAAAA,GAAG,EAAEf,OAAO,CAACe;AAZkF,GAArD,CAtBqE;AAAA,MAsBzGG,OAtByG,cAsBzGA,OAtByG;AAAA,MAsBxFC,cAtBwF,cAsBhGR,MAtBgG;;AAqCjH,MAAMS,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,QAAMC,aAAa,GAAGC,SAAIC,MAAJ,CAAW1B,MAAX,EAAmB;AACvC2B,MAAAA,YAAY,EAAE;AAAA,eACZX,WAAW,CAAC,QAAD,EAAW;AACpBL,UAAAA,SAAS,EAAEb,sBAAsB,CAACE,MADd;AAEpBc,UAAAA,MAAM,EAAEQ,cAAc,CAACtB;AAFH,SAAX,CADC;AAAA;AADyB,KAAnB,CAAtB;;AAOA,QAAM4B,cAAc,GAAGH,SAAIC,MAAJ,CAAW3B,OAAX,EAAoB;AACzC4B,MAAAA,YAAY,EAAE;AAAA,eACZX,WAAW,CAAC,SAAD,EAAY;AACrBL,UAAAA,SAAS,EAAEb,sBAAsB,CAACC,OADb;AAErBe,UAAAA,MAAM,EAAEQ,cAAc,CAACvB;AAFF,SAAZ,CADC;AAAA;AAD2B,KAApB,CAAvB;;AAQA,wBACE,oBAAC,wCAAD;AAAyB,MAAA,KAAK,EAAE;AAAEU,QAAAA,QAAQ,EAARA;AAAF;AAAhC,OACGG,eAAe,KAAK,OAApB,IAA+BY,aADlC,EAEGI,cAFH,EAGGhB,eAAe,KAAK,KAApB,IAA6BY,aAHhC,CADF;AAOD,GAvBD;;AAyBA,MAAMK,WAAW,GAAG,mCAAe3B,KAAf,CAApB;AACA,MAAM4B,cAAc,GAAG,sCAAkB7B,QAAQ,CAAC8B,YAA3B,EAAyC7B,KAAzC,CAAvB;AAEA,MAAM8B,OAAO,gBACX,oBAAC,WAAD,EACMhB,WAAW,CAAC,MAAD;AACbL,IAAAA,SAAS,EAAEU,OAAO,CAACY;AADN,KAEVC,wBAAiBC,aAAjB,CAA+B;AAAEC,IAAAA,WAAW,EAAE,CAAC1B,QAAD;AAAf,GAA/B,CAFU,EAGVoB,cAHU,EADjB,EAOG,0BAAcpB,QAAd,IAA0BA,QAA1B,GAAqCa,aAAa,EAPrD,CADF;AAWAhB,EAAAA,MAAM;AAEN,SAAOyB,OAAP;AACD,CA/EM;;;AAiFP/B,QAAQ,CAACG,WAAT,GAAuB,UAAvB;AAEAH,QAAQ,CAAC0B,YAAT,GAAwB;AACtBU,EAAAA,EAAE,EAAE,IADkB;AAEtBzB,EAAAA,eAAe,EAAE,OAFK;AAGtBH,EAAAA,QAAQ,EAAE;AAHY,CAAxB;AAKAR,QAAQ,CAACqC,SAAT,qBACKC,uBAAgBC,YAAhB,CAA6B;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAA7B,CADL;AAEEhC,EAAAA,QAAQ,EAAEiC,SAAS,CAACC,SAAV,CAAoB,CAACD,SAAS,CAACE,IAAX,EAAiBF,SAAS,CAACG,KAAV,CAAkC,CAAC,KAAD,EAAQ,QAAR,CAAlC,CAAjB,CAApB,CAFZ;AAGE7C,EAAAA,MAAM,EAAE8C,eAAe,CAACC,aAH1B;AAIEnC,EAAAA,eAAe,EAAE8B,SAAS,CAACG,KAAV,CAAgB,CAAC,OAAD,EAAU,KAAV,CAAhB,CAJnB;AAKE9C,EAAAA,OAAO,EAAE+C,eAAe,CAACC;AAL3B;AAOA9C,QAAQ,CAAC8B,YAAT,GAAwBiB,MAAM,CAACC,IAAP,CAAYhD,QAAQ,CAACqC,SAArB,CAAxB;AAEArC,QAAQ,CAACyB,MAAT,GAAkB,mCAAuB;AAAEwB,EAAAA,SAAS,EAAEjD,QAAb;AAAuBkD,EAAAA,UAAU,EAAE;AAAnC,CAAvB,CAAlB","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport { Box, BoxProps } from '../Box/Box';\nimport { ChatItemContextProvider } from './chatItemContext';\n\nexport interface ChatItemSlotClassNames {\n  message: string;\n  gutter: string;\n}\n\nexport const chatItemClassName = 'ui-chat__item';\nexport const chatItemSlotClassNames: ChatItemSlotClassNames = {\n  message: `${chatItemClassName}__message`,\n  gutter: `${chatItemClassName}__gutter`,\n};\n\nexport interface ChatItemProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** Controls item's relation to other chat items. */\n  attached?: boolean | 'top' | 'bottom';\n\n  /** Chat items can have a gutter. */\n  gutter?: ShorthandValue<BoxProps>;\n\n  /** Indicates whether the content is positioned at the start or the end. */\n  contentPosition?: 'start' | 'end';\n\n  /** Chat items can have a message. */\n  message?: ShorthandValue<BoxProps>;\n}\n\nexport type ChatItemStylesProps = Pick<ChatItemProps, 'attached' | 'contentPosition'>;\n\n/**\n * A ChatItem is container for single entity in Chat (e.g. message, notification, etc).\n */\nexport const ChatItem: ComponentWithAs<'li', ChatItemProps> & FluentComponentStaticProps<ChatItemProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(ChatItem.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    attached,\n    children,\n    className,\n    contentPosition,\n    design,\n    gutter,\n    message,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: ChatItem.displayName,\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<ChatItemStylesProps>(ChatItem.displayName, {\n    className: chatItemClassName,\n    mapPropsToStyles: () => ({\n      attached,\n      contentPosition,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const renderContent = () => {\n    const gutterElement = Box.create(gutter, {\n      defaultProps: () =>\n        getA11Props('gutter', {\n          className: chatItemSlotClassNames.gutter,\n          styles: resolvedStyles.gutter,\n        }),\n    });\n    const messageElement = Box.create(message, {\n      defaultProps: () =>\n        getA11Props('message', {\n          className: chatItemSlotClassNames.message,\n          styles: resolvedStyles.message,\n        }),\n    });\n\n    return (\n      <ChatItemContextProvider value={{ attached }}>\n        {contentPosition === 'start' && gutterElement}\n        {messageElement}\n        {contentPosition === 'end' && gutterElement}\n      </ChatItemContextProvider>\n    );\n  };\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ChatItem.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : renderContent()}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nChatItem.displayName = 'ChatItem';\n\nChatItem.defaultProps = {\n  as: 'li',\n  contentPosition: 'start',\n  attached: false,\n};\nChatItem.propTypes = {\n  ...commonPropTypes.createCommon({ content: false }),\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'top' | 'bottom'>(['top', 'bottom'])]),\n  gutter: customPropTypes.itemShorthand,\n  contentPosition: PropTypes.oneOf(['start', 'end']),\n  message: customPropTypes.itemShorthand,\n};\nChatItem.handledProps = Object.keys(ChatItem.propTypes) as any;\n\nChatItem.create = createShorthandFactory({ Component: ChatItem, mappedProp: 'message' });\n"],"file":"ChatItem.js"}