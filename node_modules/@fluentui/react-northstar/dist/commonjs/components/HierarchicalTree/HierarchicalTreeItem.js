"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.HierarchicalTreeItem = exports.hierarchicalTreeItemSlotClassNames = exports.hierarchicalTreeItemClassName = void 0;

var _isNil2 = _interopRequireDefault(require("lodash/isNil"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var _reactComponentRef = require("@fluentui/react-component-ref");

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _HierarchicalTree = require("./HierarchicalTree");

var _HierarchicalTreeTitle = require("./HierarchicalTreeTitle");

var _utils = require("../../utils");

var hierarchicalTreeItemClassName = 'ui-hierarchicaltree__item';
exports.hierarchicalTreeItemClassName = hierarchicalTreeItemClassName;
var hierarchicalTreeItemSlotClassNames = {
  subtree: hierarchicalTreeItemClassName + "__subtree"
};
exports.hierarchicalTreeItemSlotClassNames = hierarchicalTreeItemSlotClassNames;

/**
 * A TreeItem renders an item of a Tree.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 */
var HierarchicalTreeItem = function HierarchicalTreeItem(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(HierarchicalTreeItem.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var items = props.items,
      title = props.title,
      renderItemTitle = props.renderItemTitle,
      open = props.open,
      exclusive = props.exclusive,
      children = props.children,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables;
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(HierarchicalTreeItem.handledProps, props);
  var actionHandlers = {
    performClick: function performClick(e) {
      e.preventDefault();
      e.stopPropagation();
      (0, _invoke2.default)(props, 'onTitleClick', e, props);
    },
    receiveFocus: function receiveFocus(e) {
      e.preventDefault();
      e.stopPropagation(); // Focuses the title if the event comes from a child item.

      if (eventComesFromChildItem(e)) {
        itemRef.current.focus();
      }
    },
    collapse: function collapse(e) {
      e.preventDefault();
      e.stopPropagation(); // Handle click on title if the keyboard event was dispatched on that title

      if (!eventComesFromChildItem(e)) {
        handleTitleClick(e);
      }
    },
    expand: function expand(e) {
      e.preventDefault();
      e.stopPropagation();
      handleTitleClick(e);
    },
    focusSubtree: function focusSubtree(e) {
      e.preventDefault();
      e.stopPropagation();
      var element = (0, _reactBindings.getFirstFocusable)(treeRef.current, treeRef.current, true);

      if (element) {
        element.focus();
      }
    }
  };
  var getA11yProps = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: HierarchicalTreeItem.displayName,
    actionHandlers: actionHandlers,
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        hasItems: items && !!items.length,
        open: open
      };
    },
    rtl: context.rtl
  });
  var itemRef = React.useRef();
  var treeRef = React.useRef();

  var _useStyles = (0, _reactBindings.useStyles)(HierarchicalTreeItem.displayName, {
    className: hierarchicalTreeItemClassName,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var eventComesFromChildItem = function eventComesFromChildItem(e) {
    return e.currentTarget !== e.target;
  };

  var handleTitleClick = function handleTitleClick(e) {
    (0, _invoke2.default)(props, 'onTitleClick', e, props);
  };

  var handleTitleOverrides = function handleTitleOverrides(predefinedProps) {
    return {
      onClick: function onClick(e, titleProps) {
        handleTitleClick(e);
        (0, _invoke2.default)(predefinedProps, 'onClick', e, titleProps);
      }
    };
  };

  var renderContent = function renderContent() {
    var hasSubtree = !(0, _isNil2.default)(items);
    return /*#__PURE__*/React.createElement(React.Fragment, null, _HierarchicalTreeTitle.HierarchicalTreeTitle.create(title, {
      defaultProps: function defaultProps() {
        return {
          open: open,
          hasSubtree: hasSubtree,
          as: hasSubtree ? 'span' : 'a'
        };
      },
      render: renderItemTitle,
      overrideProps: handleTitleOverrides
    }), hasSubtree && open && /*#__PURE__*/React.createElement(_reactComponentRef.Ref, {
      innerRef: treeRef
    }, _HierarchicalTree.HierarchicalTree.create(items, {
      defaultProps: function defaultProps() {
        return getA11yProps('item', {
          accessibility: _accessibility.hierarchicalSubtreeBehavior,
          className: hierarchicalTreeItemSlotClassNames.subtree,
          exclusive: exclusive,
          renderItemTitle: renderItemTitle
        });
      }
    })));
  };

  var element = /*#__PURE__*/React.createElement(_reactComponentRef.Ref, {
    innerRef: itemRef
  }, /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root
  }, unhandledProps, _utils.rtlTextContainer.getAttributes({
    forElements: [children]
  }))), (0, _utils.childrenExist)(children) ? children : renderContent()));
  setEnd();
  return element;
};

exports.HierarchicalTreeItem = HierarchicalTreeItem;
HierarchicalTreeItem.displayName = 'HierarchicalTreeItem';
HierarchicalTreeItem.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  items: customPropTypes.collectionShorthand,
  index: PropTypes.number,
  exclusive: PropTypes.bool,
  onTitleClick: PropTypes.func,
  open: PropTypes.bool,
  renderItemTitle: PropTypes.func,
  title: customPropTypes.itemShorthand
});
HierarchicalTreeItem.defaultProps = {
  as: 'li',
  accessibility: _accessibility.hierarchicalTreeItemBehavior
};
HierarchicalTreeItem.handledProps = Object.keys(HierarchicalTreeItem.propTypes);
HierarchicalTreeItem.create = (0, _utils.createShorthandFactory)({
  Component: HierarchicalTreeItem,
  mappedProp: 'title'
});
//# sourceMappingURL=HierarchicalTreeItem.js.map
