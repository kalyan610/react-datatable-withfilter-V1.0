"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.HierarchicalTree = exports.hierarchicalTreeClassName = void 0;

var _map2 = _interopRequireDefault(require("lodash/map"));

var _without2 = _interopRequireDefault(require("lodash/without"));

var _includes2 = _interopRequireDefault(require("lodash/includes"));

var _isArray2 = _interopRequireDefault(require("lodash/isArray"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _HierarchicalTreeItem = require("./HierarchicalTreeItem");

var _utils = require("../../utils");

var _reactBindings = require("@fluentui/react-bindings");

var hierarchicalTreeClassName = 'ui-hierarchicaltree';
exports.hierarchicalTreeClassName = hierarchicalTreeClassName;

/**
 * (DEPRECATED) A Tree displays data organised in tree hierarchy.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 */
var HierarchicalTree = function HierarchicalTree(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(HierarchicalTree.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var children = props.children,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      items = props.items,
      renderItemTitle = props.renderItemTitle,
      exclusive = props.exclusive;

  var _useAutoControlled = (0, _reactBindings.useAutoControlled)({
    defaultValue: props.defaultActiveIndex,
    value: props.activeIndex,
    initialValue: exclusive ? -1 : []
  }),
      activeIndex = _useAutoControlled[0],
      setActiveIndex = _useAutoControlled[1];

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(HierarchicalTree.handledProps, props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: HierarchicalTree.displayName,
    actionHandlers: {
      expandSiblings: function expandSiblings(e) {
        e.preventDefault();
        e.stopPropagation();

        if (exclusive) {
          return;
        }

        var activeIndex = items ? items.reduce(function (acc, item, index) {
          if (item['items']) {
            return [].concat(acc, [index]);
          }

          return acc;
        }, []) : [];
        trySetActiveIndexAndTriggerEvent(e, activeIndex);
      }
    },
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        'aria-labelledby': props['aria-labelledby']
      };
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(HierarchicalTree.displayName, {
    className: hierarchicalTreeClassName,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var trySetActiveIndexAndTriggerEvent = function trySetActiveIndexAndTriggerEvent(e, activeIndex) {
    setActiveIndex(activeIndex);
    (0, _invoke2.default)(props, 'onActiveIndexChange', e, Object.assign({}, props, {
      activeIndex: activeIndex
    }));
  };

  var getActiveIndexes = function getActiveIndexes() {
    return (0, _isArray2.default)(activeIndex) ? activeIndex : [activeIndex];
  };

  var computeNewIndex = function computeNewIndex(treeItemProps) {
    var index = treeItemProps.index,
        items = treeItemProps.items;
    var activeIndexes = getActiveIndexes();
    var exclusive = props.exclusive;

    if (!items) {
      return activeIndexes;
    }

    if (exclusive) return index; // check to see if index is in array, and remove it, if not then add it

    return (0, _includes2.default)(activeIndexes, index) ? (0, _without2.default)(activeIndexes, index) : [].concat(activeIndexes, [index]);
  };

  var handleTreeItemOverrides = function handleTreeItemOverrides(predefinedProps) {
    return {
      onTitleClick: function onTitleClick(e, treeItemProps) {
        trySetActiveIndexAndTriggerEvent(e, computeNewIndex(treeItemProps));
        (0, _invoke2.default)(predefinedProps, 'onTitleClick', e, treeItemProps);
      }
    };
  };

  var renderContent = function renderContent() {
    var activeIndexes = getActiveIndexes();
    return (0, _map2.default)(items, function (item, index) {
      return _HierarchicalTreeItem.HierarchicalTreeItem.create(item, {
        defaultProps: function defaultProps() {
          return {
            index: index,
            exclusive: exclusive,
            renderItemTitle: renderItemTitle,
            open: exclusive ? index === activeIndex : (0, _includes2.default)(activeIndexes, index)
          };
        },
        overrideProps: handleTreeItemOverrides
      });
    });
  };

  var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root
  }, _utils.rtlTextContainer.getAttributes({
    forElements: [children]
  }), unhandledProps)), (0, _utils.childrenExist)(children) ? children : renderContent());
  setEnd();
  return element;
};

exports.HierarchicalTree = HierarchicalTree;
HierarchicalTree.displayName = 'HierarchicalTree';
HierarchicalTree.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  activeIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),
  defaultActiveIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),
  exclusive: PropTypes.bool,
  items: customPropTypes.collectionShorthand,
  renderItemTitle: PropTypes.func,
  onActiveIndexChange: PropTypes.func
});
HierarchicalTree.defaultProps = {
  as: 'ul',
  accessibility: _accessibility.hierarchicalTreeBehavior
};
HierarchicalTree.handledProps = Object.keys(HierarchicalTree.propTypes);
HierarchicalTree.create = (0, _utils.createShorthandFactory)({
  Component: HierarchicalTree,
  mappedArrayProp: 'items'
});
//# sourceMappingURL=HierarchicalTree.js.map
