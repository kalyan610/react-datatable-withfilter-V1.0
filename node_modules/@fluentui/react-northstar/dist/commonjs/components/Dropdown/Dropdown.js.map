{"version":3,"sources":["components/Dropdown/Dropdown.tsx"],"names":["dropdownClassName","dropdownSlotClassNames","clearIndicator","container","toggleIndicator","item","itemsList","searchInput","selectedItem","selectedItems","triggerButton","a11yStatusCleanupTime","charKeyPressedCleanupTime","normalizeValue","multiple","rawValue","normalizedValue","Array","isArray","slice","getFilteredValues","options","items","itemToString","itemToValue","search","searchQuery","value","filteredItemsByValue","filteredItemStrings","filteredItem","toLowerCase","filteredItems","filter","indexOf","isEmpty","prop","props","Dropdown","context","displayName","telemetry","setStart","setEnd","align","ariaLabelledby","clearable","checkable","checkableIndicator","className","design","disabled","error","fluid","getA11ySelectionMessage","getA11yStatusMessage","inline","inverted","highlightFirstItemOnOpen","headerMessage","moveFocusOnTab","noResultsMessage","loading","loadingMessage","placeholder","position","offset","renderItem","renderSelectedItem","styles","unstable_disableTether","unstable_pinned","variables","list","positioningProps","buttonRef","React","useRef","inputRef","listRef","selectedItemsRef","containerRef","defaultTriggerButtonId","useMemo","ElementType","unhandledProps","handledProps","defaultValue","defaultActiveSelectedIndex","initialValue","undefined","activeSelectedIndex","setActiveSelectedIndex","defaultHighlightedIndex","highlightedIndex","setHighlightedIndex","defaultOpen","open","setOpen","defaultSearchQuery","setSearchQuery","setValue","useState","a11ySelectionStatus","setA11ySelectionStatus","focused","setFocused","isFromKeyboard","setIsFromKeyboard","itemIsFromKeyboard","setItemIsFromKeyboard","startingString","setStartingString","mapPropsToStyles","isEmptyClearIndicator","hasToggleIndicator","mapPropsToInlineStyles","rtl","classes","resolvedStyles","clearA11ySelectionMessage","clearStartingString","handleChange","e","handleOnBlur","target","current","renderTriggerButton","getToggleButtonProps","content","getSelectedItemAsString","triggerButtonId","triggerButtonProps","onFocus","handleTriggerButtonOrListFocus","onBlur","handleTriggerButtonBlur","onKeyDown","handleTriggerButtonKeyDown","l","join","onClick","restTriggerButtonProps","Button","defaultProps","id","overrideProps","predefinedProps","renderSearchInput","accessibilityComboboxProps","getInputProps","selectItemAtIndex","toggleMenu","noPlaceholder","length","DropdownSearchInput","create","handleSearchInputOverrides","renderItemsList","getMenuProps","getItemProps","renderItems","refKey","suppressRefError","innerRef","accessibilityMenuProps","accessibilityInputProps","handleListKeyDown","listElement","List","tabIndex","listProps","handleListBlur","footerItem","renderItemsListFooter","headerItem","renderItemsListHeader","index","children","selected","DropdownItem","active","hasOwnProperty","key","header","handleItemOverrides","render","push","renderSelectedItems","map","DropdownSelectedItem","isSelectedItemActive","handleSelectedItemOverrides","downshiftStateReducer","state","changes","activeElement","type","Downshift","stateChangeTypes","blurButton","isOpen","handleStateChange","newState","changeInput","shouldValueChange","inputValue","shouldMenuClose","keyDownEnter","clickItem","shouldAddHighlightedIndex","isSameItemSelected","newValue","onAdd","setA11ySelectionMessage","setTimeout","scrollTop","scrollHeight","tryFocusTriggerButton","keyDownEscape","keyDownArrowDown","keyDownArrowUp","highlightedIndexOnArrowKeyOpen","getHighlightedIndexOnArrowKeyOpen","focus","mouseUp","clickButton","keyDownSpaceButton","itemMouseEnter","unknown","handlers","Boolean","setStateAndInvokeHandler","accessibilityItemProps","stopPropagation","nativeEvent","stopImmediatePropagation","onRemove","dropdownSelectedItemProps","handleSelectedItemRemove","handleSelectedItemKeyDown","handleInputBlur","searchInputProps","handleInputKeyDown","keyboardKey","Home","End","Tab","handleTabSelection","ArrowLeft","trySetLastSelectedItemAsActive","ArrowRight","Backspace","tryRemoveItemFromValue","Escape","onChange","node","onInputBlur","onInputKeyDown","preventDefault","selectionStart","selectionEnd","removeItemFromValue","handleClear","tryFocusSearchInput","handleContainerClick","accessibilityInputPropsKeyDown","keyCode","keyString","String","fromCharCode","test","setHighlightedIndexOnCharKeyDown","previousKey","nextKey","Delete","relatedTarget","newStartingString","newHighlightedIndex","startsWith","poppedItem","currentElement","pop","handlerNames","event","proposedValue","forEach","handlerName","isArrowUp","isArrowDown","itemsLength","useEffect","cancel","element","root","process","env","NODE_ENV","menu","nodeToScroll","actions","scrollMode","block","el","top","left","scrollLeft","defaultView","getRootProps","accessibilityRootPropsRest","showClearIndicator","Box","accessibility","indicatorBehavior","role","screenReaderContainerStyles","propTypes","commonPropTypes","createCommon","PropTypes","number","oneOf","ALIGNMENTS","bool","customPropTypes","shorthandAllowingChildren","string","oneOfType","itemShorthand","collectionShorthand","object","func","arrayOf","onOpenChange","onSearchQueryChange","onActiveSelectedIndexChange","onHighlightedIndexChange","POSITIONS","Object","keys","isValidElement","Item","SearchInput","SelectedItem"],"mappings":"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","sourcesContent":["import {\n  getElementType,\n  useAutoControlled,\n  useStyles,\n  useUnhandledProps,\n  ComponentWithAs,\n  useFluentContext,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { indicatorBehavior } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport cx from 'classnames';\nimport { getCode, keyboardKey } from '@fluentui/keyboard-key';\nimport computeScrollIntoView from 'compute-scroll-into-view';\n\nimport { ShorthandRenderFunction, ShorthandValue, ShorthandCollection, FluentComponentStaticProps } from '../../types';\nimport Downshift, {\n  DownshiftState,\n  StateChangeOptions,\n  A11yStatusMessageOptions,\n  GetMenuPropsOptions,\n  GetPropsCommonOptions,\n  GetInputPropsOptions,\n  GetToggleButtonPropsOptions,\n  GetItemPropsOptions,\n} from 'downshift';\nimport {\n  commonPropTypes,\n  UIComponentProps,\n  isFromKeyboard as detectIsFromKeyboard,\n  createShorthand,\n} from '../../utils';\nimport { List, ListProps } from '../List/List';\nimport { DropdownItem, DropdownItemProps } from './DropdownItem';\nimport { DropdownSelectedItem, DropdownSelectedItemProps } from './DropdownSelectedItem';\nimport { DropdownSearchInput, DropdownSearchInputProps } from './DropdownSearchInput';\nimport { Button, ButtonProps } from '../Button/Button';\nimport { screenReaderContainerStyles } from '../../utils/accessibility/Styles/accessibilityStyles';\nimport { Box, BoxProps } from '../Box/Box';\nimport { Portal } from '../Portal/Portal';\nimport {\n  ALIGNMENTS,\n  POSITIONS,\n  Popper,\n  PositioningProps,\n  PopperShorthandProps,\n  partitionPopperPropsFromShorthand,\n} from '../../utils/positioner';\n\nexport interface DownshiftA11yStatusMessageOptions<Item> extends Required<A11yStatusMessageOptions<Item>> {}\n\nexport interface DropdownSlotClassNames {\n  clearIndicator: string;\n  container: string;\n  toggleIndicator: string;\n  item: string;\n  itemsList: string;\n  searchInput: string;\n  selectedItem: string;\n  selectedItems: string;\n  triggerButton: string;\n}\n\nexport interface DropdownProps extends UIComponentProps<DropdownProps>, PositioningProps {\n  /** The index of the currently selected item, if the dropdown supports multiple selection. */\n  activeSelectedIndex?: number;\n\n  /** A dropdown item can show a check indicator if it is selected. */\n  checkable?: boolean;\n\n  /** A slot for a selected indicator in the dropdown list. */\n  checkableIndicator?: ShorthandValue<BoxProps>;\n\n  /** A dropdown can be clearable to let users remove their selection. */\n  clearable?: boolean;\n\n  /** A slot for the clearing indicator. */\n  clearIndicator?: ShorthandValue<BoxProps>;\n\n  /** The initial value for the index of the currently selected item in a multiple selection. */\n  defaultActiveSelectedIndex?: number;\n\n  /** The initial value for 'open' in uncontrolled mode. */\n  defaultOpen?: boolean;\n\n  /** The initial list item index to highlight. */\n  defaultHighlightedIndex?: number;\n\n  /** The initial value for the search query if the dropdown has `search` enabled. */\n  defaultSearchQuery?: string;\n\n  /** The initial value (or value array if the array has multiple selection). */\n  defaultValue?: ShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps>;\n\n  /** A dropdown can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** A dropdown can fill the width of its container. */\n  fluid?: boolean;\n\n  /** Object with callbacks for generating announcements for item selection and removal. */\n  getA11ySelectionMessage?: {\n    /**\n     * Callback that creates custom accessibility message a screen reader narrates on item added to selection.\n     * @param item - Dropdown added element.\n     */\n    onAdd?: (item: ShorthandValue<DropdownItemProps>) => string;\n    /**\n     * Callback that creates custom accessibility message a screen reader narrates on item removed from selection.\n     * @param item - Dropdown removed element.\n     */\n    onRemove?: (item: ShorthandValue<DropdownItemProps>) => string;\n  };\n\n  /**\n   * Callback that provides status announcement message with number of items in the list, using Arrow Up/Down keys to navigate through them and, if multiple, using Arrow Left/Right to navigate through selected items.\n   * @param messageGenerationProps - Object with properties to generate message from. See getA11yStatusMessage from Downshift repo.\n   */\n  getA11yStatusMessage?: (options: DownshiftA11yStatusMessageOptions<ShorthandValue<DropdownItemProps>>) => string;\n\n  /** A dropdown can highlight the first option when it opens. */\n  highlightFirstItemOnOpen?: boolean;\n\n  /** The index of the list item to highlight. */\n  highlightedIndex?: number;\n\n  /** A dropdown can be formatted to appear inline next to other elements. */\n  inline?: boolean;\n\n  /** A dropdown can have inverted colors. */\n  inverted?: boolean;\n\n  /** Array of props for generating list options (Dropdown.Item[]) and selected item labels (Dropdown.SelectedItem[]), if it's a multiple selection. */\n  items?: ShorthandCollection<DropdownItemProps>;\n\n  /**\n   * A function that converts an item to string. Used when dropdown has `search` enabled.\n   * By default, it:\n   * - returns the `header` property if it exists on an item\n   * - stringifies the item if it is a primitive type\n   */\n  itemToString?: (item: ShorthandValue<DropdownItemProps>) => string;\n\n  /** Used when comparing two items in multiple selection. Default comparison is by the header prop. */\n  itemToValue?: (item: ShorthandValue<DropdownItemProps>) => any;\n\n  /** A message to be displayed in the list header. */\n  headerMessage?: ShorthandValue<DropdownItemProps>;\n\n  /** A slot for dropdown list. */\n  list?: ShorthandValue<ListProps & { popper?: PopperShorthandProps }>;\n\n  /** A dropdown can show that it is currently loading data. */\n  loading?: boolean;\n\n  /** A message to be displayed in the list when the dropdown is loading. */\n  loadingMessage?: ShorthandValue<DropdownItemProps>;\n\n  /** When selecting an element with Tab, focus stays on the dropdown by default. If true, the focus will jump to next/previous element in DOM. Only available to multiple selection dropdowns. */\n  moveFocusOnTab?: boolean;\n\n  /** A dropdown can allow a user to select multiple items. */\n  multiple?: boolean;\n\n  /** A message to be displayed in the list when the dropdown has no items. */\n  noResultsMessage?: ShorthandValue<DropdownItemProps>;\n\n  /**\n   * Called when the dropdown's selected items index change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onActiveSelectedIndexChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's highlighted index change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onHighlightedIndexChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown opens or closes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `open` reflecting the new open state.\n   */\n  onOpenChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's search query changes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `searchQuery` reflecting its new value.\n   */\n  onSearchQueryChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's selected item(s) change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the focus moves out from dropdown.\n   * @param event - React's original SyntheticEvent.\n   */\n  onBlur?: (event: React.FocusEvent | null) => void;\n\n  /** A dropdown's open state can be controlled. */\n  open?: boolean;\n\n  /** A placeholder message for the input field. */\n  placeholder?: string;\n\n  /**\n   * A render function to customize how items are rendered in the dropdown.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItem?: ShorthandRenderFunction<DropdownItemProps>;\n\n  /**\n   * A custom render function for the selected item. Only applicable with the `multiple` prop.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderSelectedItem?: ShorthandRenderFunction<DropdownSelectedItemProps>;\n\n  /** A dropdown can have a search field instead of trigger button. Can receive a custom search function that will replace the default equivalent. */\n  search?:\n    | boolean\n    | ((items: ShorthandCollection<DropdownItemProps>, searchQuery: string) => ShorthandCollection<DropdownItemProps>);\n\n  /** A search dropdown's input can be customized. */\n  searchInput?: ShorthandValue<DropdownSearchInputProps>;\n\n  /** Sets search query value (controlled mode). */\n  searchQuery?: string;\n\n  /** Controls the appearance of the indicator that shows/hides the list of items. */\n  toggleIndicator?: ShorthandValue<BoxProps>;\n\n  /** Controls the appearance of the trigger button if it's a selection dropdown (not a search). */\n  triggerButton?: ShorthandValue<ButtonProps>;\n\n  /** Sets the dropdown's currently selected value(s) in controlled mode. */\n  value?: ShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps>;\n\n  /** Dropdown can have errors status  */\n  error?: boolean;\n}\n\nexport type DropdownStylesProps = Required<\n  Pick<DropdownProps, 'disabled' | 'error' | 'fluid' | 'inline' | 'inverted' | 'multiple' | 'position' | 'open'>\n> & {\n  focused: boolean;\n  isEmptyClearIndicator: boolean;\n  hasToggleIndicator: boolean;\n  isFromKeyboard: boolean;\n  search: boolean;\n};\n\ntype DropdownStateForInvoke = {\n  activeSelectedIndex?: number | null;\n  highlightedIndex?: number | null;\n  itemIsFromKeyboard?: boolean;\n  open?: boolean;\n  searchQuery?: string;\n  value?: ShorthandCollection<DropdownItemProps>;\n};\n\nexport const dropdownClassName = 'ui-dropdown';\nexport const dropdownSlotClassNames: DropdownSlotClassNames = {\n  clearIndicator: `${dropdownClassName}__clear-indicator`,\n  container: `${dropdownClassName}__container`,\n  toggleIndicator: `${dropdownClassName}__toggle-indicator`,\n  item: `${dropdownClassName}__item`,\n  itemsList: `${dropdownClassName}__items-list`,\n  searchInput: `${dropdownClassName}__searchinput`,\n  selectedItem: `${dropdownClassName}__selecteditem`,\n  selectedItems: `${dropdownClassName}__selected-items`,\n  triggerButton: `${dropdownClassName}__trigger-button`,\n};\n\nconst a11yStatusCleanupTime = 500;\nconst charKeyPressedCleanupTime = 500;\n\n/** `normalizedValue` should be normalized always as it can be received from props */\nfunction normalizeValue(multiple: boolean, rawValue: DropdownProps['value']): ShorthandCollection<DropdownItemProps> {\n  const normalizedValue = Array.isArray(rawValue) ? rawValue : [rawValue];\n\n  return multiple ? normalizedValue : normalizedValue.slice(0, 1);\n}\n\n/**\n * Used to compute the filtered items (by value and search query) and, if needed,\n * their string equivalents, in order to be used throughout the component.\n */\nfunction getFilteredValues(\n  options: Required<\n    Pick<DropdownProps, 'multiple' | 'items' | 'itemToValue' | 'itemToString' | 'search' | 'searchQuery'>\n  > & {\n    value: ShorthandCollection<DropdownItemProps>;\n  },\n) {\n  const { items, itemToString, itemToValue, multiple, search, searchQuery, value } = options;\n\n  const filteredItemsByValue = multiple ? _.differenceBy(items, value, itemToValue) : items;\n  const filteredItemStrings = _.map(filteredItemsByValue, filteredItem => itemToString(filteredItem).toLowerCase());\n\n  if (search) {\n    if (_.isFunction(search)) {\n      return {\n        filteredItems: search(filteredItemsByValue, searchQuery),\n        filteredItemStrings,\n      };\n    }\n\n    return {\n      filteredItems: filteredItemsByValue.filter(\n        item =>\n          itemToString(item)\n            .toLowerCase()\n            .indexOf(searchQuery.toLowerCase()) !== -1,\n      ),\n      filteredItemStrings,\n    };\n  }\n\n  return {\n    filteredItems: filteredItemsByValue,\n    filteredItemStrings,\n  };\n}\n\nconst isEmpty = prop => {\n  return typeof prop === 'object' && !prop.props && !_.get(prop, 'children') && !_.get(prop, 'content');\n};\n\n/**\n * A Dropdown allows user to select one or more values from a list of options.\n * Can be created with search and multi-selection capabilities.\n *\n * @accessibility\n * Implements [ARIA Combo Box](https://www.w3.org/TR/wai-aria-practices-1.1/#combobox) design pattern, uses aria-live to announce state changes.\n * @accessibilityIssues\n * [Issue 991203: VoiceOver doesn't narrate properly elements in the input/combobox](https://bugs.chromium.org/p/chromium/issues/detail?id=991203)\n */\nexport const Dropdown: ComponentWithAs<'div', DropdownProps> &\n  FluentComponentStaticProps<DropdownProps> & {\n    Item: typeof DropdownItem;\n    SearchInput: typeof DropdownSearchInput;\n    SelectedItem: typeof DropdownSelectedItem;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Dropdown.displayName, context.telemetry);\n\n  setStart();\n\n  const {\n    align,\n    'aria-labelledby': ariaLabelledby,\n    clearable,\n    clearIndicator,\n    checkable,\n    checkableIndicator,\n    className,\n    design,\n    disabled,\n    error,\n    fluid,\n    getA11ySelectionMessage,\n    getA11yStatusMessage,\n    inline,\n    inverted,\n    itemToString,\n    itemToValue,\n    items,\n    highlightFirstItemOnOpen,\n    multiple,\n    headerMessage,\n    moveFocusOnTab,\n    noResultsMessage,\n    loading,\n    loadingMessage,\n    placeholder,\n    position,\n    offset,\n    renderItem,\n    renderSelectedItem,\n    search,\n    searchInput,\n    styles,\n    toggleIndicator,\n    triggerButton,\n    unstable_disableTether,\n    unstable_pinned,\n    variables,\n  } = props;\n  const [list, positioningProps] = partitionPopperPropsFromShorthand(props.list);\n\n  const buttonRef = React.useRef<HTMLElement>();\n  const inputRef = React.useRef<HTMLInputElement | undefined>() as React.MutableRefObject<HTMLInputElement | undefined>;\n  const listRef = React.useRef<HTMLElement>();\n  const selectedItemsRef = React.useRef<HTMLDivElement>();\n  const containerRef = React.useRef<HTMLDivElement>();\n\n  const defaultTriggerButtonId = React.useMemo(() => _.uniqueId('dropdown-trigger-button-'), []);\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Dropdown.handledProps, props);\n\n  const [activeSelectedIndex, setActiveSelectedIndex] = useAutoControlled<number | null | undefined>({\n    defaultValue: props.defaultActiveSelectedIndex,\n    initialValue: multiple ? null : undefined,\n    value: props.activeSelectedIndex,\n  });\n  const [highlightedIndex, setHighlightedIndex] = useAutoControlled<number | null>({\n    defaultValue: props.defaultHighlightedIndex,\n    initialValue: highlightFirstItemOnOpen ? 0 : null,\n    value: props.highlightedIndex,\n  });\n  const [open, setOpen] = useAutoControlled({\n    defaultValue: props.defaultOpen,\n    initialValue: false,\n    value: props.open,\n  });\n  const [searchQuery, setSearchQuery] = useAutoControlled<string | undefined>({\n    defaultValue: props.defaultSearchQuery,\n    initialValue: search ? '' : undefined,\n    value: props.searchQuery,\n  });\n  const [rawValue, setValue] = useAutoControlled({\n    defaultValue: props.defaultValue,\n    initialValue: [],\n    value: props.value,\n  });\n  const value = normalizeValue(multiple, rawValue);\n\n  const [a11ySelectionStatus, setA11ySelectionStatus] = React.useState('');\n  const [focused, setFocused] = React.useState(false);\n  const [isFromKeyboard, setIsFromKeyboard] = React.useState(false);\n  const [itemIsFromKeyboard, setItemIsFromKeyboard] = React.useState(false);\n  const [startingString, setStartingString] = React.useState<string | undefined>(search ? undefined : '');\n\n  const { filteredItems, filteredItemStrings } = getFilteredValues({\n    itemToString,\n    itemToValue,\n    items,\n    multiple,\n    search,\n    searchQuery,\n    value,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<DropdownStylesProps>(Dropdown.displayName, {\n    className: dropdownClassName,\n    mapPropsToStyles: () => ({\n      disabled,\n      error,\n      fluid,\n      focused,\n      isEmptyClearIndicator: isEmpty(clearIndicator),\n      hasToggleIndicator: !!toggleIndicator,\n      inline,\n      inverted,\n      isFromKeyboard,\n      multiple,\n      open,\n      position,\n      search: !!search,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const clearA11ySelectionMessage = React.useMemo(\n    () =>\n      _.debounce(() => {\n        setA11ySelectionStatus('');\n      }, a11yStatusCleanupTime),\n    [],\n  );\n  const clearStartingString = React.useMemo(\n    () =>\n      _.debounce(() => {\n        setStartingString('');\n      }, charKeyPressedCleanupTime),\n    [],\n  );\n\n  const handleChange = (e: React.SyntheticEvent) => {\n    // Dropdown component doesn't present any `input` component in markup, however all of our\n    // components should handle events transparently.\n    _.invoke(props, 'onChange', e, { ...props, value });\n  };\n\n  const handleOnBlur = (e: React.SyntheticEvent) => {\n    // Dropdown component doesn't present any `input` component in markup, however all of our\n    // components should handle events transparently.\n    if (e.target !== buttonRef.current) {\n      _.invoke(props, 'onBlur', e, props);\n    }\n  };\n\n  const renderTriggerButton = (getToggleButtonProps: (options?: GetToggleButtonPropsOptions) => any): JSX.Element => {\n    const content = getSelectedItemAsString(value[0]);\n    const triggerButtonId = triggerButton['id'] || defaultTriggerButtonId;\n\n    const triggerButtonProps = getToggleButtonProps({\n      disabled,\n      onFocus: handleTriggerButtonOrListFocus,\n      onBlur: handleTriggerButtonBlur,\n      onKeyDown: e => {\n        handleTriggerButtonKeyDown(e);\n      },\n      'aria-label': undefined,\n      'aria-labelledby': [ariaLabelledby, triggerButtonId].filter(l => !!l).join(' '),\n    });\n\n    const { onClick, onFocus, onBlur, onKeyDown, ...restTriggerButtonProps } = triggerButtonProps;\n\n    return (\n      <Ref innerRef={buttonRef}>\n        {createShorthand(Button, triggerButton, {\n          defaultProps: () => ({\n            className: dropdownSlotClassNames.triggerButton,\n            content,\n            disabled,\n            id: triggerButtonId,\n            fluid: true,\n            styles: resolvedStyles.triggerButton,\n            ...restTriggerButtonProps,\n          }),\n          overrideProps: (predefinedProps: ButtonProps) => ({\n            onClick: e => {\n              onClick(e);\n              _.invoke(predefinedProps, 'onClick', e, predefinedProps);\n            },\n            onFocus: e => {\n              onFocus(e);\n              _.invoke(predefinedProps, 'onFocus', e, predefinedProps);\n            },\n            onBlur: e => {\n              if (!disabled) {\n                onBlur(e);\n              }\n\n              _.invoke(predefinedProps, 'onBlur', e, predefinedProps);\n            },\n            onKeyDown: e => {\n              if (!disabled) {\n                onKeyDown(e);\n              }\n\n              _.invoke(predefinedProps, 'onKeyDown', e, predefinedProps);\n            },\n          }),\n        })}\n      </Ref>\n    );\n  };\n\n  const renderSearchInput = (\n    accessibilityComboboxProps: Object,\n    highlightedIndex: number,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n    selectItemAtIndex: (index: number, otherStateToSet?: Partial<StateChangeOptions<any>>, cb?: () => void) => void,\n    toggleMenu: () => void,\n    variables,\n  ): JSX.Element => {\n    const noPlaceholder = searchQuery.length > 0 || (multiple && value.length > 0);\n\n    return DropdownSearchInput.create(searchInput || {}, {\n      defaultProps: () => ({\n        className: dropdownSlotClassNames.searchInput,\n        placeholder: noPlaceholder ? '' : placeholder,\n        inline,\n        variables,\n        disabled,\n      }),\n      overrideProps: handleSearchInputOverrides(\n        highlightedIndex,\n        selectItemAtIndex,\n        toggleMenu,\n        accessibilityComboboxProps,\n        getInputProps,\n      ),\n    });\n  };\n\n  const renderItemsList = (\n    highlightedIndex: number,\n    toggleMenu: () => void,\n    selectItemAtIndex: (index: number) => void,\n    getMenuProps: (options?: GetMenuPropsOptions, otherOptions?: GetPropsCommonOptions) => any,\n    getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n  ) => {\n    const items = open ? renderItems(getItemProps) : [];\n    const { innerRef, ...accessibilityMenuProps } = getMenuProps({ refKey: 'innerRef' }, { suppressRefError: true });\n\n    // If it's just a selection, some attributes and listeners from Downshift input need to go on the menu list.\n    if (!search) {\n      const accessibilityInputProps = getInputProps();\n\n      accessibilityMenuProps['aria-activedescendant'] = accessibilityInputProps['aria-activedescendant'];\n      accessibilityMenuProps['onKeyDown'] = e => {\n        handleListKeyDown(e, highlightedIndex, accessibilityInputProps['onKeyDown'], toggleMenu, selectItemAtIndex);\n      };\n    }\n\n    return (\n      <Ref\n        innerRef={(listElement: HTMLElement) => {\n          handleRef(listRef, listElement);\n          handleRef(innerRef, listElement);\n        }}\n      >\n        <Popper\n          align={align}\n          position={position}\n          offset={offset}\n          rtl={context.rtl}\n          enabled={open}\n          targetRef={containerRef}\n          unstable_disableTether={unstable_disableTether}\n          unstable_pinned={unstable_pinned}\n          positioningDependencies={[items.length]}\n          {...positioningProps}\n        >\n          {List.create(list, {\n            defaultProps: () => ({\n              className: dropdownSlotClassNames.itemsList,\n              ...accessibilityMenuProps,\n              styles: resolvedStyles.list,\n              items,\n              tabIndex: search ? undefined : -1, // needs to be focused when trigger button is activated.\n              'aria-hidden': !open,\n            }),\n\n            overrideProps: (predefinedProps: ListProps) => ({\n              onFocus: (e: React.SyntheticEvent<HTMLElement>, listProps: ListProps) => {\n                handleTriggerButtonOrListFocus();\n                _.invoke(predefinedProps, 'onClick', e, listProps);\n              },\n              onBlur: (e: React.SyntheticEvent<HTMLElement>, listProps: ListProps) => {\n                handleListBlur(e);\n                _.invoke(predefinedProps, 'onBlur', e, listProps);\n              },\n            }),\n          })}\n        </Popper>\n      </Ref>\n    );\n  };\n\n  const renderItems = (getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any) => {\n    const footerItem = renderItemsListFooter();\n    const headerItem = renderItemsListHeader();\n\n    const items = _.map(filteredItems, (item, index) => ({\n      children: () => {\n        const selected = value.indexOf(item) !== -1;\n\n        return DropdownItem.create(item, {\n          defaultProps: () => ({\n            className: dropdownSlotClassNames.item,\n            active: highlightedIndex === index,\n            selected,\n            checkable,\n            checkableIndicator,\n            isFromKeyboard: itemIsFromKeyboard,\n            variables,\n            ...(typeof item === 'object' &&\n              !item.hasOwnProperty('key') && {\n                key: (item as any).header,\n              }),\n          }),\n          overrideProps: handleItemOverrides(item, index, getItemProps, selected),\n          render: renderItem,\n        });\n      },\n    }));\n\n    if (footerItem) {\n      items.push(footerItem);\n    }\n\n    return headerItem ? [headerItem, ...items] : items;\n  };\n\n  const renderItemsListHeader = () => {\n    if (headerMessage) {\n      return {\n        children: () =>\n          DropdownItem.create(headerMessage, {\n            defaultProps: () => ({\n              key: 'items-list-footer-message',\n              styles: resolvedStyles.headerMessage,\n            }),\n          }),\n      };\n    }\n\n    return null;\n  };\n\n  const renderItemsListFooter = () => {\n    if (loading) {\n      return {\n        children: () =>\n          DropdownItem.create(loadingMessage, {\n            defaultProps: () => ({\n              key: 'loading-message',\n              styles: resolvedStyles.loadingMessage,\n            }),\n          }),\n      };\n    }\n\n    if (filteredItems && filteredItems.length === 0) {\n      return {\n        children: () =>\n          DropdownItem.create(noResultsMessage, {\n            defaultProps: () => ({\n              key: 'no-results-message',\n              styles: resolvedStyles.noResultsMessage,\n            }),\n          }),\n      };\n    }\n\n    return null;\n  };\n\n  const renderSelectedItems = () => {\n    if (value.length === 0) {\n      return null;\n    }\n\n    return value.map((item: DropdownItemProps, index) =>\n      // (!) an item matches DropdownItemProps\n      DropdownSelectedItem.create(item, {\n        defaultProps: () => ({\n          className: dropdownSlotClassNames.selectedItem,\n          active: isSelectedItemActive(index),\n          variables,\n          ...(typeof item === 'object' &&\n            !item.hasOwnProperty('key') && {\n              key: (item as any).header,\n            }),\n        }),\n        overrideProps: handleSelectedItemOverrides(item),\n        render: renderSelectedItem,\n      }),\n    );\n  };\n\n  const downshiftStateReducer = (\n    state: DownshiftState<ShorthandValue<DropdownItemProps>>,\n    changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>,\n  ) => {\n    const activeElement: Element = context.target.activeElement;\n\n    switch (changes.type) {\n      case Downshift.stateChangeTypes.blurButton:\n        // Downshift closes the list by default on trigger blur. It does not support the case when dropdown is\n        // single selection and focuses list on trigger click/up/down/space/enter. Treating that here.\n        if (state.isOpen && activeElement === listRef.current) {\n          return {}; // won't change state in this case.\n        }\n        _.invoke(props, 'onBlur', null);\n      default:\n        return changes;\n    }\n  };\n\n  const handleStateChange = (changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>) => {\n    const { type } = changes;\n    const newState = {} as DropdownStateForInvoke;\n\n    switch (type) {\n      case Downshift.stateChangeTypes.changeInput: {\n        const shouldValueChange = changes.inputValue === '' && !multiple && value.length > 0;\n        newState.searchQuery = changes.inputValue;\n        newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n\n        if (shouldValueChange) {\n          newState.value = [];\n        }\n\n        if (open) {\n          // we clear value when in single selection user cleared the query.\n          const shouldMenuClose = changes.inputValue === '' || changes.selectedItem !== undefined;\n\n          if (shouldMenuClose) {\n            newState.open = false;\n          }\n        } else {\n          newState.open = true;\n        }\n\n        break;\n      }\n      case Downshift.stateChangeTypes.keyDownEnter:\n      case Downshift.stateChangeTypes.clickItem:\n        const shouldAddHighlightedIndex = !multiple && items && items.length > 0;\n        const isSameItemSelected = changes.selectedItem === undefined;\n        const newValue = isSameItemSelected ? value[0] : changes.selectedItem;\n\n        newState.searchQuery = getSelectedItemAsString(newValue);\n        newState.open = false;\n        newState.highlightedIndex = shouldAddHighlightedIndex ? items.indexOf(newValue) : null;\n\n        if (!isSameItemSelected) {\n          newState.value = multiple ? [...value, changes.selectedItem] : [changes.selectedItem];\n\n          if (getA11ySelectionMessage && getA11ySelectionMessage.onAdd) {\n            setA11ySelectionMessage(getA11ySelectionMessage.onAdd(newValue));\n          }\n        }\n\n        if (multiple) {\n          setTimeout(() => (selectedItemsRef.current.scrollTop = selectedItemsRef.current.scrollHeight), 0);\n        }\n\n        tryFocusTriggerButton();\n\n        break;\n      case Downshift.stateChangeTypes.keyDownEscape:\n        if (search) {\n          newState.searchQuery = '';\n\n          if (!multiple) {\n            newState.value = [];\n          }\n        }\n        newState.open = false;\n        newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n        break;\n      case Downshift.stateChangeTypes.keyDownArrowDown:\n      case Downshift.stateChangeTypes.keyDownArrowUp:\n        if (changes.isOpen !== undefined) {\n          newState.open = changes.isOpen;\n          newState.highlightedIndex = changes.highlightedIndex;\n\n          if (changes.isOpen) {\n            const highlightedIndexOnArrowKeyOpen = getHighlightedIndexOnArrowKeyOpen(changes);\n\n            if (_.isNumber(highlightedIndexOnArrowKeyOpen)) {\n              newState.highlightedIndex = highlightedIndexOnArrowKeyOpen;\n            }\n\n            if (!search) {\n              listRef.current.focus();\n            }\n          } else {\n            newState.highlightedIndex = null;\n          }\n        }\n      case Downshift.stateChangeTypes['keyDownHome']:\n      case Downshift.stateChangeTypes['keyDownEnd']:\n        if (open && _.isNumber(changes.highlightedIndex)) {\n          newState.highlightedIndex = changes.highlightedIndex;\n          newState.itemIsFromKeyboard = true;\n        }\n\n        break;\n      case Downshift.stateChangeTypes.mouseUp:\n        if (open) {\n          newState.open = false;\n          newState.highlightedIndex = null;\n        }\n\n        break;\n      case Downshift.stateChangeTypes.clickButton:\n      case Downshift.stateChangeTypes.keyDownSpaceButton:\n        newState.open = changes.isOpen;\n\n        if (changes.isOpen) {\n          const highlightedIndexOnArrowKeyOpen = getHighlightedIndexOnArrowKeyOpen(changes);\n\n          if (_.isNumber(highlightedIndexOnArrowKeyOpen)) {\n            newState.highlightedIndex = highlightedIndexOnArrowKeyOpen;\n          }\n\n          if (!search) {\n            listRef.current.focus();\n          }\n        } else {\n          newState.highlightedIndex = null;\n        }\n        break;\n      case Downshift.stateChangeTypes.itemMouseEnter:\n        newState.highlightedIndex = changes.highlightedIndex;\n        newState.itemIsFromKeyboard = false;\n        break;\n      case Downshift.stateChangeTypes.unknown:\n        if (changes.selectedItem) {\n          newState.value = multiple ? [...value, changes.selectedItem] : [changes.selectedItem];\n          newState.searchQuery = multiple ? '' : changes.inputValue;\n          newState.open = false;\n          newState.highlightedIndex = changes.highlightedIndex;\n\n          tryFocusTriggerButton();\n        } else {\n          newState.open = changes.isOpen;\n        }\n      default:\n        break;\n    }\n\n    if (_.isEmpty(newState)) {\n      return;\n    }\n\n    const handlers: (keyof DropdownProps)[] = [\n      newState.highlightedIndex !== undefined && 'onHighlightedIndexChange',\n      newState.open !== undefined && 'onOpenChange',\n      newState.searchQuery !== undefined && 'onSearchQueryChange',\n      newState.value !== undefined && 'onChange',\n    ].filter(Boolean) as (keyof DropdownProps)[];\n\n    setStateAndInvokeHandler(handlers, null, newState);\n  };\n\n  const isSelectedItemActive = (index: number): boolean => {\n    return index === activeSelectedIndex;\n  };\n\n  const handleItemOverrides = (\n    item: ShorthandValue<DropdownItemProps>,\n    index: number,\n    getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any,\n    selected: boolean,\n  ) => (predefinedProps: DropdownItemProps) => ({\n    accessibilityItemProps: {\n      ...getItemProps({\n        item,\n        index,\n        disabled: item['disabled'],\n        onClick: e => {\n          e.stopPropagation();\n          e.nativeEvent.stopImmediatePropagation();\n          _.invoke(predefinedProps, 'onClick', e, predefinedProps);\n        },\n      }),\n      // for single selection the selected item should have aria-selected, instead of the highlighted\n      ...(!multiple && {\n        'aria-selected': selected,\n      }),\n    },\n  });\n\n  const handleSelectedItemOverrides = (item: ShorthandValue<DropdownItemProps>) => (\n    predefinedProps: DropdownSelectedItemProps,\n  ) => ({\n    onRemove: (e: React.SyntheticEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n    },\n    onClick: (e: React.SyntheticEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n        activeSelectedIndex: value.indexOf(item),\n      });\n      e.stopPropagation();\n      _.invoke(predefinedProps, 'onClick', e, dropdownSelectedItemProps);\n    },\n    onKeyDown: (e: React.KeyboardEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      handleSelectedItemKeyDown(e, item, predefinedProps, dropdownSelectedItemProps);\n    },\n  });\n\n  const handleSearchInputOverrides = (\n    highlightedIndex: number,\n    selectItemAtIndex: (index: number, otherStateToSet?: Partial<StateChangeOptions<any>>, cb?: () => void) => void,\n    toggleMenu: () => void,\n    accessibilityComboboxProps: Object,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n  ) => (predefinedProps: DropdownSearchInputProps) => {\n    const handleInputBlur = (e: React.SyntheticEvent, searchInputProps: DropdownSearchInputProps) => {\n      if (!disabled) {\n        setFocused(false);\n        setIsFromKeyboard(detectIsFromKeyboard());\n\n        e.nativeEvent['preventDownshiftDefault'] = true;\n      }\n\n      _.invoke(predefinedProps, 'onInputBlur', e, searchInputProps);\n    };\n\n    const handleInputKeyDown = (\n      e: React.KeyboardEvent<HTMLInputElement>,\n      searchInputProps: DropdownSearchInputProps,\n    ) => {\n      if (!disabled) {\n        switch (getCode(e)) {\n          // https://github.com/downshift-js/downshift/issues/1097\n          // Downshift skips Home/End if Deopdown is opened\n          case keyboardKey.Home:\n            e.nativeEvent['preventDownshiftDefault'] = filteredItems.length === 0;\n            break;\n          case keyboardKey.End:\n            e.nativeEvent['preventDownshiftDefault'] = filteredItems.length === 0;\n            break;\n          case keyboardKey.Tab:\n            e.stopPropagation();\n            handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n            break;\n          case keyboardKey.ArrowLeft:\n            e.stopPropagation();\n            if (!context.rtl) {\n              trySetLastSelectedItemAsActive();\n            }\n            break;\n          case keyboardKey.ArrowRight:\n            e.stopPropagation();\n            if (context.rtl) {\n              trySetLastSelectedItemAsActive();\n            }\n            break;\n          case keyboardKey.Backspace:\n            e.stopPropagation();\n            tryRemoveItemFromValue();\n            break;\n          case keyboardKey.Escape:\n            // If dropdown list is open ESC should close it and not propagate to the parent\n            // otherwise event should propagate\n            if (open) {\n              e.stopPropagation();\n            }\n          default:\n            break;\n        }\n      }\n\n      _.invoke(predefinedProps, 'onInputKeyDown', e, {\n        ...searchInputProps,\n        highlightedIndex,\n        selectItemAtIndex,\n      });\n    };\n\n    return {\n      // getInputProps adds Downshift handlers. We also add our own by passing them as params to that function.\n      // user handlers were also added to our handlers previously, at the beginning of this function.\n      accessibilityInputProps: {\n        ...getInputProps({\n          disabled,\n          onBlur: e => {\n            handleInputBlur(e, predefinedProps);\n          },\n          onKeyDown: e => {\n            handleInputKeyDown(e, predefinedProps);\n          },\n          onChange: (e: React.ChangeEvent<HTMLInputElement>) => {\n            // we prevent the onChange input event to bubble up to our Dropdown handler,\n            // since in Dropdown it gets handled as onSearchQueryChange.\n            e.stopPropagation();\n\n            // A state modification should be triggered there otherwise it will go to an another frame and will break\n            // cursor position:\n            // https://github.com/facebook/react/issues/955#issuecomment-469352730\n            setSearchQuery(e.target.value);\n          },\n        }),\n      },\n      // same story as above for getRootProps.\n      accessibilityComboboxProps,\n\n      inputRef: (node: HTMLInputElement) => {\n        handleRef(predefinedProps.inputRef, node);\n        inputRef.current = node;\n      },\n      onFocus: (e: React.FocusEvent, searchInputProps: DropdownSearchInputProps) => {\n        if (!disabled) {\n          setFocused(true);\n          setIsFromKeyboard(detectIsFromKeyboard());\n        }\n\n        _.invoke(predefinedProps, 'onFocus', e, searchInputProps);\n      },\n      onInputBlur: (e: React.FocusEvent, searchInputProps: DropdownSearchInputProps) => {\n        handleInputBlur(e, searchInputProps);\n      },\n      onInputKeyDown: (e: React.KeyboardEvent<HTMLInputElement>, searchInputProps: DropdownSearchInputProps) => {\n        handleInputKeyDown(e, searchInputProps);\n      },\n    };\n  };\n\n  /**\n   * Custom Tab selection logic, at least until Downshift will implement selection on blur.\n   * Also keeps focus on multiple selection dropdown when selecting by Tab.\n   */\n  const handleTabSelection = (\n    e: React.SyntheticEvent,\n    highlightedIndex: number,\n    selectItemAtIndex: (highlightedIndex: number) => void,\n    toggleMenu: () => void,\n  ): void => {\n    if (open) {\n      if (!_.isNil(highlightedIndex) && filteredItems.length && !items[highlightedIndex]['disabled']) {\n        selectItemAtIndex(highlightedIndex);\n\n        if (multiple && !moveFocusOnTab) {\n          e.preventDefault();\n        }\n      } else {\n        toggleMenu();\n      }\n    }\n  };\n\n  const trySetLastSelectedItemAsActive = () => {\n    if (!multiple || (inputRef.current && inputRef.current.selectionStart !== 0)) {\n      return;\n    }\n\n    if (value.length > 0) {\n      // If last element was already active, perform a 'reset' of activeSelectedIndex.\n      if (activeSelectedIndex === value.length - 1) {\n        setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n          activeSelectedIndex: value.length - 1,\n        });\n      } else {\n        setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n          activeSelectedIndex: value.length - 1,\n        });\n      }\n    }\n  };\n\n  const tryRemoveItemFromValue = () => {\n    if (\n      multiple &&\n      (searchQuery === '' || (inputRef.current.selectionStart === 0 && inputRef.current.selectionEnd === 0)) &&\n      value.length > 0\n    ) {\n      removeItemFromValue();\n    }\n  };\n\n  const handleClear = (e: React.SyntheticEvent<HTMLElement>) => {\n    setStateAndInvokeHandler(['onChange', 'onActiveSelectedIndexChange', 'onHighlightedIndexChange'], e, {\n      activeSelectedIndex: multiple ? null : undefined,\n      highlightedIndex: highlightFirstItemOnOpen ? 0 : null,\n      open: false,\n      searchQuery: search ? '' : undefined,\n      value: [],\n    });\n\n    tryFocusSearchInput();\n    tryFocusTriggerButton();\n  };\n\n  const handleContainerClick = () => {\n    tryFocusSearchInput();\n  };\n\n  const handleTriggerButtonKeyDown = (e: React.KeyboardEvent) => {\n    switch (getCode(e)) {\n      case keyboardKey.ArrowLeft:\n        if (!context.rtl) {\n          trySetLastSelectedItemAsActive();\n        }\n        return;\n      case keyboardKey.ArrowRight:\n        if (context.rtl) {\n          trySetLastSelectedItemAsActive();\n        }\n        return;\n      default:\n        return;\n    }\n  };\n\n  const handleListKeyDown = (\n    e: React.KeyboardEvent,\n    highlightedIndex: number,\n    accessibilityInputPropsKeyDown: (e) => any,\n    toggleMenu: () => void,\n    selectItemAtIndex: (index: number) => void,\n  ) => {\n    const keyCode = getCode(e);\n    switch (keyCode) {\n      case keyboardKey.Tab:\n        handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n        return;\n      case keyboardKey.Escape:\n        accessibilityInputPropsKeyDown(e);\n        tryFocusTriggerButton();\n        e.stopPropagation();\n        return;\n      default:\n        const keyString = String.fromCharCode(keyCode);\n        if (/[a-zA-Z0-9]/.test(keyString)) {\n          setHighlightedIndexOnCharKeyDown(keyString);\n        }\n        accessibilityInputPropsKeyDown(e);\n        return;\n    }\n  };\n\n  const handleSelectedItemKeyDown = (\n    e: React.KeyboardEvent,\n    item: ShorthandValue<DropdownItemProps>,\n    predefinedProps: DropdownSelectedItemProps,\n    dropdownSelectedItemProps: DropdownSelectedItemProps,\n  ) => {\n    const previousKey = context.rtl ? keyboardKey.ArrowRight : keyboardKey.ArrowLeft;\n    const nextKey = context.rtl ? keyboardKey.ArrowLeft : keyboardKey.ArrowRight;\n\n    switch (getCode(e)) {\n      case keyboardKey.Delete:\n      case keyboardKey.Backspace:\n        handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n        break;\n      case previousKey:\n        if (value.length > 0 && !_.isNil(activeSelectedIndex) && activeSelectedIndex > 0) {\n          setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n            activeSelectedIndex: activeSelectedIndex - 1,\n          });\n        }\n        break;\n      case nextKey:\n        if (value.length > 0 && !_.isNil(activeSelectedIndex)) {\n          if (activeSelectedIndex < value.length - 1) {\n            setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n              activeSelectedIndex: activeSelectedIndex + 1,\n            });\n          } else {\n            setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n              activeSelectedIndex: null,\n            });\n\n            if (search) {\n              e.preventDefault(); // prevents caret to forward one position in input.\n              inputRef.current.focus();\n            } else {\n              buttonRef.current.focus();\n            }\n          }\n        }\n        break;\n      default:\n        break;\n    }\n    _.invoke(predefinedProps, 'onKeyDown', e, dropdownSelectedItemProps);\n  };\n\n  const handleTriggerButtonOrListFocus = () => {\n    setFocused(true);\n    setIsFromKeyboard(detectIsFromKeyboard());\n  };\n\n  const handleTriggerButtonBlur = e => {\n    if (listRef.current !== e.relatedTarget) {\n      setFocused(false);\n      setIsFromKeyboard(detectIsFromKeyboard());\n    }\n  };\n\n  const handleListBlur = e => {\n    if (buttonRef.current !== e.relatedTarget) {\n      setFocused(false);\n      setIsFromKeyboard(detectIsFromKeyboard());\n    }\n  };\n\n  /**\n   * Sets highlightedIndex to be the item that starts with the character keys the\n   * user has typed. Only used in non-search dropdowns.\n   *\n   * @param keystring - The string the item needs to start with. It is composed by typing keys in fast succession.\n   */\n  const setHighlightedIndexOnCharKeyDown = (keyString: string): void => {\n    const newStartingString = `${startingString}${keyString.toLowerCase()}`;\n    let newHighlightedIndex = -1;\n\n    setStartingString(newStartingString);\n    clearStartingString();\n\n    if (_.isNumber(highlightedIndex)) {\n      newHighlightedIndex = _.findIndex(\n        filteredItemStrings,\n        item => item.startsWith(newStartingString),\n        highlightedIndex + (startingString.length > 0 ? 0 : 1),\n      );\n    }\n\n    if (newHighlightedIndex < 0) {\n      newHighlightedIndex = _.findIndex(filteredItemStrings, item => item.startsWith(newStartingString));\n    }\n\n    if (newHighlightedIndex >= 0) {\n      setStateAndInvokeHandler(['onHighlightedIndexChange'], null, {\n        highlightedIndex: newHighlightedIndex,\n      });\n    }\n  };\n\n  const handleSelectedItemRemove = (\n    e: React.SyntheticEvent,\n    item: ShorthandValue<DropdownItemProps>,\n    predefinedProps: DropdownSelectedItemProps,\n    dropdownSelectedItemProps: DropdownSelectedItemProps,\n  ) => {\n    setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n      activeSelectedIndex: null,\n    });\n    removeItemFromValue(item);\n    tryFocusSearchInput();\n    tryFocusTriggerButton();\n    _.invoke(predefinedProps, 'onRemove', e, dropdownSelectedItemProps);\n  };\n\n  const removeItemFromValue = (item?: ShorthandValue<DropdownItemProps>) => {\n    let poppedItem = item;\n    let newValue = [...value];\n\n    if (poppedItem) {\n      newValue = newValue.filter(currentElement => currentElement !== item);\n    } else {\n      poppedItem = newValue.pop();\n    }\n\n    if (getA11ySelectionMessage && getA11ySelectionMessage.onRemove) {\n      setA11ySelectionMessage(getA11ySelectionMessage.onRemove(poppedItem));\n    }\n\n    setStateAndInvokeHandler(['onChange'], null, { value: newValue });\n  };\n\n  /**\n   * Calls setState and invokes event handler exposed to user.\n   * We don't have the event object for most events coming from Downshift se we send an empty event\n   * because we want to keep the event handling interface\n   */\n  const setStateAndInvokeHandler = (\n    handlerNames: (keyof DropdownProps)[],\n    event: React.SyntheticEvent<HTMLElement>,\n    newState: DropdownStateForInvoke,\n  ) => {\n    const proposedValue = _.isNil(newState.value) ? value : newState.value;\n    // `proposedValue` should be normalized for single/multiple variations, `null` condition is\n    // required as first item can be undefined\n    const newValue = multiple ? proposedValue : proposedValue[0] || null;\n\n    if (newState.hasOwnProperty('activeSelectedIndex')) {\n      setActiveSelectedIndex(newState.activeSelectedIndex);\n    }\n    if (newState.hasOwnProperty('highlightedIndex')) {\n      setHighlightedIndex(newState.highlightedIndex);\n    }\n    if (newState.hasOwnProperty('itemIsFromKeyboard')) {\n      setItemIsFromKeyboard(newState.itemIsFromKeyboard);\n    }\n    if (newState.hasOwnProperty('open')) {\n      setOpen(newState.open);\n    }\n    if (newState.hasOwnProperty('searchQuery')) {\n      setSearchQuery(newState.searchQuery);\n    }\n    if (newState.hasOwnProperty('value')) {\n      setValue(newState.value);\n    }\n\n    handlerNames.forEach(handlerName => {\n      _.invoke(props, handlerName, event, { ...props, ...newState, value: newValue });\n    });\n  };\n\n  const tryFocusTriggerButton = () => {\n    if (!search && buttonRef.current) {\n      buttonRef.current.focus();\n    }\n  };\n\n  const tryFocusSearchInput = () => {\n    if (search && inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  /**\n   * If there is no value we use the placeholder value\n   * otherwise, for single selection we convert the value with itemToString\n   * and for multiple selection we return empty string, the values are rendered by renderSelectedItems\n   */\n  const getSelectedItemAsString = (value: ShorthandValue<DropdownItemProps>): string => {\n    if (!value) {\n      return search ? '' : placeholder;\n    }\n\n    if (multiple) {\n      return '';\n    }\n\n    return itemToString(value);\n  };\n\n  const getHighlightedIndexOnArrowKeyOpen = (\n    changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>,\n  ): number => {\n    const isArrowUp = changes.type === Downshift.stateChangeTypes.keyDownArrowUp;\n    const isArrowDown = changes.type === Downshift.stateChangeTypes.keyDownArrowDown;\n    const itemsLength = filteredItems.length;\n\n    if (highlightedIndex) {\n      return highlightedIndex;\n    }\n\n    if (highlightFirstItemOnOpen) {\n      // otherwise, if highlightFirstItemOnOpen prop is provied, highlight first item.\n      return 0;\n    }\n\n    if (!multiple && !search && value.length > 0) {\n      // in single selection, if there is a selected item, highlight it.\n      const offset = isArrowUp ? -1 : isArrowDown ? 1 : 0;\n      const newHighlightedIndex = items.indexOf(value[0]) + offset;\n      if (newHighlightedIndex >= itemsLength) {\n        return 0;\n      }\n      if (newHighlightedIndex < 0) {\n        return itemsLength - 1;\n      }\n      return newHighlightedIndex;\n    }\n\n    if (isArrowDown) {\n      return 0;\n    }\n    if (isArrowUp) {\n      return itemsLength - 1;\n    }\n\n    return null;\n  };\n\n  /**\n   * Function that sets and cleans the selection message after it has been set,\n   * so it is not read anymore via virtual cursor.\n   */\n  const setA11ySelectionMessage = (a11ySelectionStatus: string): void => {\n    setA11ySelectionStatus(a11ySelectionStatus);\n    clearA11ySelectionMessage();\n  };\n\n  React.useEffect(() => {\n    return () => {\n      clearStartingString.cancel();\n      clearA11ySelectionMessage.cancel();\n    };\n  }, [clearA11ySelectionMessage, clearStartingString]);\n\n  const element = (\n    <ElementType\n      className={classes.root}\n      onBlur={handleOnBlur}\n      onChange={handleChange}\n      {...unhandledProps}\n      {...(process.env.NODE_ENV === 'test' && { 'data-test-focused': focused })}\n    >\n      <Downshift\n        isOpen={open}\n        inputValue={search ? searchQuery : null}\n        stateReducer={downshiftStateReducer}\n        itemToString={itemToString}\n        // downshift does not work with arrays as selectedItem.\n        selectedItem={multiple || !value.length ? null : value[0]}\n        scrollIntoView={(node: HTMLElement, menu: HTMLElement) => {\n          if (node) {\n            const { children } = menu;\n            let nodeToScroll = node;\n            /**\n             * If it's loading downshift doesn't take the last node with loadingMessage\n             * in consideration to scrolld so we need to check if the current is the\n             * antepenultimate and is so scroll the loading into view, same for headerMessage\n             */\n            if (loading && children[children.length - 2] === node) {\n              nodeToScroll = children[children.length - 1] as HTMLElement;\n            } else if (headerMessage && children[1] === node) {\n              nodeToScroll = children[0] as HTMLElement;\n            }\n\n            // Replicating same config that Downshift uses\n            const actions = computeScrollIntoView(nodeToScroll, {\n              scrollMode: 'if-needed',\n              block: 'nearest',\n              inline: 'nearest',\n            });\n            actions.forEach(({ el, top, left }) => {\n              el.scrollTop = top;\n              el.scrollLeft = left;\n            });\n          }\n        }}\n        getA11yStatusMessage={getA11yStatusMessage}\n        highlightedIndex={highlightedIndex}\n        onStateChange={handleStateChange}\n        labelId={ariaLabelledby}\n        environment={context.target?.defaultView}\n        inputId={searchInput && searchInput['id'] ? searchInput['id'] : undefined}\n      >\n        {({\n          getInputProps,\n          getItemProps,\n          getMenuProps,\n          getRootProps,\n          getToggleButtonProps,\n          toggleMenu,\n          highlightedIndex,\n          selectItemAtIndex,\n        }) => {\n          const { innerRef, ...accessibilityRootPropsRest } = getRootProps(\n            { refKey: 'innerRef' },\n            { suppressRefError: true },\n          );\n          const showClearIndicator = clearable && value.length > 0;\n\n          return (\n            <Ref innerRef={innerRef}>\n              <div\n                ref={containerRef}\n                className={cx(dropdownSlotClassNames.container, classes.container)}\n                onClick={search && !open ? handleContainerClick : undefined}\n              >\n                <div ref={selectedItemsRef} className={cx(dropdownSlotClassNames.selectedItems, classes.selectedItems)}>\n                  {multiple && renderSelectedItems()}\n                  {search\n                    ? renderSearchInput(\n                        accessibilityRootPropsRest,\n                        highlightedIndex,\n                        getInputProps,\n                        selectItemAtIndex,\n                        toggleMenu,\n                        variables,\n                      )\n                    : renderTriggerButton(getToggleButtonProps)}\n                </div>\n                {showClearIndicator\n                  ? Box.create(clearIndicator, {\n                      defaultProps: () => ({\n                        className: dropdownSlotClassNames.clearIndicator,\n                        styles: resolvedStyles.clearIndicator,\n                        accessibility: indicatorBehavior,\n                        ...(!search && { tabIndex: 0, role: 'button' }),\n                      }),\n                      overrideProps: (predefinedProps: BoxProps) => ({\n                        onClick: (e: React.SyntheticEvent<HTMLElement>) => {\n                          _.invoke(predefinedProps, 'onClick', e);\n                          handleClear(e);\n                        },\n                      }),\n                    })\n                  : Box.create(toggleIndicator, {\n                      defaultProps: () => ({\n                        className: dropdownSlotClassNames.toggleIndicator,\n                        styles: resolvedStyles.toggleIndicator,\n                        accessibility: indicatorBehavior,\n                      }),\n                      overrideProps: (predefinedProps: BoxProps) => ({\n                        onClick: e => {\n                          if (!disabled) {\n                            getToggleButtonProps({ disabled }).onClick(e);\n                          }\n\n                          _.invoke(predefinedProps, 'onClick', e);\n                        },\n                      }),\n                    })}\n                {renderItemsList(\n                  highlightedIndex,\n                  toggleMenu,\n                  selectItemAtIndex,\n                  getMenuProps,\n                  getItemProps,\n                  getInputProps,\n                )}\n              </div>\n            </Ref>\n          );\n        }}\n      </Downshift>\n      <Portal open={!!getA11ySelectionMessage}>\n        <div role=\"status\" aria-live=\"polite\" aria-relevant=\"additions text\" style={screenReaderContainerStyles}>\n          {a11ySelectionStatus}\n        </div>\n      </Portal>\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nDropdown.displayName = 'Dropdown';\n\nDropdown.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false,\n  }),\n  activeSelectedIndex: PropTypes.number,\n  align: PropTypes.oneOf(ALIGNMENTS),\n  checkable: PropTypes.bool,\n  checkableIndicator: customPropTypes.shorthandAllowingChildren,\n  clearable: PropTypes.bool,\n  clearIndicator: customPropTypes.shorthandAllowingChildren,\n  defaultActiveSelectedIndex: PropTypes.number,\n  defaultOpen: PropTypes.bool,\n  defaultHighlightedIndex: PropTypes.number,\n  defaultSearchQuery: PropTypes.string,\n  defaultValue: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  disabled: PropTypes.bool,\n  error: PropTypes.bool,\n  fluid: PropTypes.bool,\n  getA11ySelectionMessage: PropTypes.object,\n  getA11yStatusMessage: PropTypes.func,\n  highlightFirstItemOnOpen: PropTypes.bool,\n  highlightedIndex: PropTypes.number,\n  inline: PropTypes.bool,\n  inverted: PropTypes.bool,\n  items: customPropTypes.collectionShorthand,\n  itemToString: PropTypes.func,\n  itemToValue: PropTypes.func,\n  headerMessage: customPropTypes.itemShorthand,\n  list: customPropTypes.itemShorthand,\n  loading: PropTypes.bool,\n  loadingMessage: customPropTypes.itemShorthand,\n  moveFocusOnTab: PropTypes.bool,\n  multiple: PropTypes.bool,\n  noResultsMessage: customPropTypes.itemShorthand,\n  offset: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.arrayOf(PropTypes.number) as PropTypes.Requireable<[number, number]>,\n  ]),\n  onOpenChange: PropTypes.func,\n  onSearchQueryChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onActiveSelectedIndexChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  open: PropTypes.bool,\n  placeholder: PropTypes.string,\n  position: PropTypes.oneOf(POSITIONS),\n  renderItem: PropTypes.func,\n  renderSelectedItem: PropTypes.func,\n  search: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n  searchQuery: PropTypes.string,\n  searchInput: customPropTypes.itemShorthand,\n  toggleIndicator: customPropTypes.shorthandAllowingChildren,\n  triggerButton: customPropTypes.itemShorthand,\n  unstable_disableTether: PropTypes.oneOf([true, false, 'all']),\n  unstable_pinned: PropTypes.bool,\n  value: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n};\nDropdown.handledProps = Object.keys(Dropdown.propTypes) as any;\n\nDropdown.defaultProps = {\n  align: 'start',\n  clearIndicator: {},\n  itemToString: item => {\n    if (!item || React.isValidElement(item)) {\n      return '';\n    }\n\n    // targets DropdownItem shorthand objects\n    return (item as any).header || String(item);\n  },\n  itemToValue: item => {\n    if (!item || React.isValidElement(item)) {\n      return '';\n    }\n\n    // targets DropdownItem shorthand objects\n    return (item as any).header || String(item);\n  },\n  list: {},\n  position: 'below',\n  toggleIndicator: {},\n  triggerButton: {},\n};\n\nDropdown.Item = DropdownItem;\nDropdown.SearchInput = DropdownSearchInput;\nDropdown.SelectedItem = DropdownSelectedItem;\n"],"file":"Dropdown.js"}