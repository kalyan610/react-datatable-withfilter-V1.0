{"version":3,"sources":["components/TextArea/TextArea.tsx"],"names":["textAreaClassName","TextArea","props","context","displayName","telemetry","setStart","setEnd","disabled","accessibility","inverted","resize","fluid","className","design","styles","variables","defaultValue","value","initialValue","setValue","unhandledProps","handledProps","getA11yProps","debugName","mapPropsToBehavior","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","handleChange","e","newValue","element","root","onChange","propTypes","commonPropTypes","createCommon","content","PropTypes","string","func","bool","defaultProps","as","textAreaBehavior","Object","keys","create","Component"],"mappings":"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","sourcesContent":["import { Accessibility, textAreaBehavior, TextAreaBehaviorProps } from '@fluentui/accessibility';\nimport { ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { UIComponentProps, ChildrenComponentProps, commonPropTypes, createShorthandFactory } from '../../utils';\nimport {\n  ComponentWithAs,\n  useAutoControlled,\n  getElementType,\n  useTelemetry,\n  useUnhandledProps,\n  useFluentContext,\n  useAccessibility,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface TextAreaProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TextAreaBehaviorProps>;\n\n  /** The default value of the text area. */\n  defaultValue?: string;\n\n  /**\n   * Called on change.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<TextAreaProps>;\n\n  /** The value of the text area. */\n  value?: string;\n\n  /** The text area becomes read-only. */\n  disabled?: boolean;\n\n  /** An input can have inverted colors. */\n  inverted?: boolean;\n\n  /** A textarea can be resized. */\n  resize?: 'none' | 'both' | 'horizontal' | 'vertical';\n\n  /** A textarea can take the width of its container. */\n  fluid?: boolean;\n}\n\nexport type TextAreaStylesProps = Required<Pick<TextAreaProps, 'inverted' | 'resize' | 'fluid' | 'disabled'>>;\n\nexport const textAreaClassName = 'ui-textarea';\n\n/**\n * A TextArea is a multi-line plan-text editing control.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for textarea.\n * When using maxlength attribute, provide the information about max length in label for screen reader.\n * @accessibilityIssues\n * [NVDA - No announcement of maxlength](https://github.com/nvaccess/nvda/issues/7910)\n * [JAWS - textarea - no announcement of maxlength](https://github.com/FreedomScientific/VFO-standards-support/issues/300)\n */\nexport const TextArea: ComponentWithAs<'textarea', TextAreaProps> &\n  FluentComponentStaticProps<TextAreaProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TextArea.displayName, context.telemetry);\n\n  setStart();\n\n  const { disabled, accessibility, inverted, resize, fluid, className, design, styles, variables } = props;\n\n  const [value, setValue] = useAutoControlled({\n    defaultValue: props.defaultValue,\n    value: props.value,\n    initialValue: '',\n  });\n\n  const unhandledProps = useUnhandledProps(TextArea.handledProps, props);\n\n  const getA11yProps = useAccessibility<TextAreaBehaviorProps>(accessibility, {\n    debugName: TextArea.displayName,\n    mapPropsToBehavior: () => ({\n      disabled,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<TextAreaStylesProps>(TextArea.displayName, {\n    className: textAreaClassName,\n    mapPropsToStyles: () => ({\n      inverted,\n      resize,\n      fluid,\n      disabled,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n\n  const handleChange = (e: React.ChangeEvent | React.FormEvent) => {\n    const newValue = _.get(e, 'target.value');\n\n    _.invoke(props, 'onChange', e, { ...props, value: newValue });\n    setValue(newValue);\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        value,\n        disabled,\n        onChange: handleChange,\n        ...unhandledProps,\n      })}\n    />\n  );\n  setEnd();\n  return element;\n};\n\nTextArea.displayName = 'TextArea';\n\nTextArea.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  defaultValue: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.string,\n  disabled: PropTypes.bool,\n  inverted: PropTypes.bool,\n};\n\nTextArea.defaultProps = {\n  as: 'textarea',\n  accessibility: textAreaBehavior,\n};\n\nTextArea.handledProps = Object.keys(TextArea.propTypes) as any;\n\nTextArea.create = createShorthandFactory({\n  Component: TextArea,\n});\n"],"file":"TextArea.js"}