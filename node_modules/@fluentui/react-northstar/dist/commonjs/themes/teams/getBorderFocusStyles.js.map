{"version":3,"sources":["themes/teams/getBorderFocusStyles.ts"],"names":["defaultColor","getPseudoElementStyles","borderEdgeValue","styles","content","position","borderStyle","pointerEvents","top","right","bottom","left","getBorderFocusStyles","args","sv","variables","borderWidth","borderRadius","focusInnerBorderColor","focusOuterBorderColor","borderPadding","afterBorderEdgeValue","beforeBorderEdgeValue","outline","borderColor","zIndex","zIndexes","foreground"],"mappings":";;;;AAqBA,IAAMA,YAAY,GAAG,aAArB;;AAEA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,eAAD,EAA0BC,MAA1B,EAAmE;AAChG;AACEC,IAAAA,OAAO,EAAE,IADX;AAEEC,IAAAA,QAAQ,EAAE,UAFZ;AAGEC,IAAAA,WAAW,EAAE,OAHf;AAIEC,IAAAA,aAAa,EAAE,MAJjB;AAMEC,IAAAA,GAAG,EAAEN,eANP;AAOEO,IAAAA,KAAK,EAAEP,eAPT;AAQEQ,IAAAA,MAAM,EAAER,eARV;AASES,IAAAA,IAAI,EAAET;AATR,KAWKC,MAXL;AAaD,CAdD;AAgBA;;;;;;;AAKO,IAAMS,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD,EAA4C;AAC9E,MAAMC,EAAE,GAAGD,IAAI,CAACE,SAAhB;AAD8E,0BAQ1EF,IAR0E,CAG5EG,WAH4E;AAAA,MAG5EA,WAH4E,kCAG9DF,EAAE,CAACE,WAH2D;AAAA,2BAQ1EH,IAR0E,CAI5EI,YAJ4E;AAAA,MAI5EA,YAJ4E,mCAI7DH,EAAE,CAACG,YAJ0D;AAAA,8BAQ1EJ,IAR0E,CAK5EK,qBAL4E;AAAA,MAK5EA,qBAL4E,sCAKpDJ,EAAE,CAACI,qBAAH,IAA4BlB,YALwB;AAAA,8BAQ1Ea,IAR0E,CAM5EM,qBAN4E;AAAA,MAM5EA,qBAN4E,sCAMpDL,EAAE,CAACK,qBAAH,IAA4BnB,YANwB;AAAA,MAO5EoB,aAP4E,GAQ1EP,IAR0E,CAO5EO,aAP4E;AAU9E,MAAMC,oBAAoB,GACxBD,aAAa,IAAI,IAAjB,SAA4BJ,WAA5B,mBAA0DI,aAA1D,WAA6EJ,WAA7E,MADF;AAEA,MAAMM,qBAAqB,GAAGF,aAAa,IAAI,IAAjB,GAAwB,GAAxB,SAAkCA,aAAhE;AAEA,SAAO;AACL,cAAU;AACRG,MAAAA,OAAO,EAAE;AADD,KADL;AAIL,sBAAkB;AAChBC,MAAAA,WAAW,EAAE,aADG;AAGhB,iBAAWvB,sBAAsB,CAACqB,qBAAD,EAAwB;AACvDG,QAAAA,MAAM,EAAEX,EAAE,CAACY,QAAH,CAAYC,UADmC;AAEvDH,QAAAA,WAAW,EAAEN,qBAF0C;AAGvDF,QAAAA,WAAW,EAAXA,WAHuD;AAIvDC,QAAAA,YAAY,EAAZA;AAJuD,OAAxB,CAHjB;AAUhB,gBAAUhB,sBAAsB,CAACoB,oBAAD,EAAuB;AACrDI,QAAAA,MAAM,EAAEX,EAAE,CAACY,QAAH,CAAYC,UADiC;AAErDH,QAAAA,WAAW,EAAEL,qBAFwC;AAGrDH,QAAAA,WAAW,EAAXA,WAHqD;AAIrDC,QAAAA,YAAY,EAAZA;AAJqD,OAAvB;AAVhB;AAJb,GAAP;AAsBD,CApCM","sourcesContent":["import { ICSSInJSStyle, SiteVariablesPrepared } from '@fluentui/styles';\nimport * as React from 'react';\n\ntype CSSBorderStyles = Pick<ICSSInJSStyle, 'borderWidth' | 'borderRadius'>;\n\ntype BorderFocusStyles = CSSBorderStyles & {\n  variables?:\n    | SiteVariablesPrepared\n    | {\n        borderWidth: string;\n        borderRadius: string;\n        focusInnerBorderColor: string;\n        focusOuterBorderColor: string;\n\n        zIndexes: { foreground: string };\n      };\n  focusInnerBorderColor?: string;\n  focusOuterBorderColor?: string;\n  borderPadding?: React.CSSProperties['padding'];\n};\n\nconst defaultColor = 'transparent';\n\nconst getPseudoElementStyles = (borderEdgeValue: string, styles: ICSSInJSStyle): ICSSInJSStyle => {\n  return {\n    content: '\"\"',\n    position: 'absolute',\n    borderStyle: 'solid',\n    pointerEvents: 'none',\n\n    top: borderEdgeValue,\n    right: borderEdgeValue,\n    bottom: borderEdgeValue,\n    left: borderEdgeValue,\n\n    ...styles,\n  };\n};\n\n/**\n * Returns style object that can be used for styling components on focus state.\n * NOTE: the element where this is used needs to have relative positioning so that the\n * pseudo elements created on focus can be properly positioned.\n */\nexport const getBorderFocusStyles = (args: BorderFocusStyles): ICSSInJSStyle => {\n  const sv = args.variables;\n  const {\n    borderWidth = sv.borderWidth,\n    borderRadius = sv.borderRadius,\n    focusInnerBorderColor = sv.focusInnerBorderColor || defaultColor,\n    focusOuterBorderColor = sv.focusOuterBorderColor || defaultColor,\n    borderPadding,\n  } = args;\n\n  const afterBorderEdgeValue =\n    borderPadding == null ? `-${borderWidth}` : `calc(0px - ${borderPadding} - ${borderWidth})`;\n  const beforeBorderEdgeValue = borderPadding == null ? '0' : `-${borderPadding}`;\n\n  return {\n    ':focus': {\n      outline: 0,\n    },\n    ':focus-visible': {\n      borderColor: 'transparent',\n\n      ':before': getPseudoElementStyles(beforeBorderEdgeValue, {\n        zIndex: sv.zIndexes.foreground,\n        borderColor: focusInnerBorderColor,\n        borderWidth,\n        borderRadius,\n      }),\n\n      ':after': getPseudoElementStyles(afterBorderEdgeValue, {\n        zIndex: sv.zIndexes.foreground,\n        borderColor: focusOuterBorderColor,\n        borderWidth,\n        borderRadius,\n      }),\n    },\n  };\n};\n"],"file":"getBorderFocusStyles.js"}