"use strict";

exports.__esModule = true;
exports.getBorderFocusStyles = void 0;
var defaultColor = 'transparent';

var getPseudoElementStyles = function getPseudoElementStyles(borderEdgeValue, styles) {
  return Object.assign({
    content: '""',
    position: 'absolute',
    borderStyle: 'solid',
    pointerEvents: 'none',
    top: borderEdgeValue,
    right: borderEdgeValue,
    bottom: borderEdgeValue,
    left: borderEdgeValue
  }, styles);
};
/**
 * Returns style object that can be used for styling components on focus state.
 * NOTE: the element where this is used needs to have relative positioning so that the
 * pseudo elements created on focus can be properly positioned.
 */


var getBorderFocusStyles = function getBorderFocusStyles(args) {
  var sv = args.variables;
  var _args$borderWidth = args.borderWidth,
      borderWidth = _args$borderWidth === void 0 ? sv.borderWidth : _args$borderWidth,
      _args$borderRadius = args.borderRadius,
      borderRadius = _args$borderRadius === void 0 ? sv.borderRadius : _args$borderRadius,
      _args$focusInnerBorde = args.focusInnerBorderColor,
      focusInnerBorderColor = _args$focusInnerBorde === void 0 ? sv.focusInnerBorderColor || defaultColor : _args$focusInnerBorde,
      _args$focusOuterBorde = args.focusOuterBorderColor,
      focusOuterBorderColor = _args$focusOuterBorde === void 0 ? sv.focusOuterBorderColor || defaultColor : _args$focusOuterBorde,
      borderPadding = args.borderPadding;
  var afterBorderEdgeValue = borderPadding == null ? "-" + borderWidth : "calc(0px - " + borderPadding + " - " + borderWidth + ")";
  var beforeBorderEdgeValue = borderPadding == null ? '0' : "-" + borderPadding;
  return {
    ':focus': {
      outline: 0
    },
    ':focus-visible': {
      borderColor: 'transparent',
      ':before': getPseudoElementStyles(beforeBorderEdgeValue, {
        zIndex: sv.zIndexes.foreground,
        borderColor: focusInnerBorderColor,
        borderWidth: borderWidth,
        borderRadius: borderRadius
      }),
      ':after': getPseudoElementStyles(afterBorderEdgeValue, {
        zIndex: sv.zIndexes.foreground,
        borderColor: focusOuterBorderColor,
        borderWidth: borderWidth,
        borderRadius: borderRadius
      })
    }
  };
};

exports.getBorderFocusStyles = getBorderFocusStyles;
//# sourceMappingURL=getBorderFocusStyles.js.map
