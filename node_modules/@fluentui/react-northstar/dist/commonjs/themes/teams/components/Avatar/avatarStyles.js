"use strict";

exports.__esModule = true;
exports.avatarStyles = void 0;

var _utils = require("../../../../utils");

var sizeToPxValue = {
  smallest: 20,
  smaller: 24,
  small: 28,
  medium: 32,
  large: 44,
  larger: 64,
  largest: 96
};
var iconSizeToPxValue = {
  smallest: 10,
  smaller: 12,
  small: 16,
  medium: 16,
  large: 20,
  larger: 32,
  largest: 40
};
var avatarStyles = {
  root: function root(_ref) {
    var size = _ref.props.size;
    var sizeInRem = (0, _utils.pxToRem)(sizeToPxValue[size]);
    return {
      position: 'relative',
      backgroundColor: 'inherit',
      display: 'inline-block',
      verticalAlign: 'middle',
      height: sizeInRem,
      width: sizeInRem
    };
  },
  icon: function icon(_ref2) {
    var p = _ref2.props,
        v = _ref2.variables;
    var sizeInRem = (0, _utils.pxToRem)(sizeToPxValue[p.size]);
    var iconsizeInRem = (0, _utils.pxToRem)(iconSizeToPxValue[p.size]);
    return Object.assign({
      color: v.iconColor,
      background: v.iconBackgroundColor,
      width: sizeInRem,
      height: sizeInRem,
      borderRadius: '50%',
      display: 'inline-flex',
      alignItems: 'center'
    }, p.square && {
      borderRadius: v.squareAvatarBorderRadius
    }, {
      '& > :first-child': {
        margin: '0 auto',
        width: iconsizeInRem,
        height: iconsizeInRem,
        '& svg': {
          width: '100%',
          height: '100%'
        }
      }
    });
  },
  image: function image(_ref3) {
    var p = _ref3.props,
        v = _ref3.variables;
    return Object.assign({
      borderColor: v.avatarBorderColor,
      borderStyle: 'solid',
      borderWidth: v.avatarBorderWidth,
      height: '100%',
      objectFit: 'cover',
      verticalAlign: 'top',
      width: '100%'
    }, p.square && {
      borderRadius: v.squareAvatarBorderRadius
    });
  },
  label: function label(_ref4) {
    var p = _ref4.props,
        v = _ref4.variables;
    var sizeInRem = (0, _utils.pxToRem)(sizeToPxValue[p.size]);
    return Object.assign({
      display: 'inline-block',
      width: sizeInRem,
      height: sizeInRem,
      lineHeight: sizeInRem,
      fontSize: (0, _utils.pxToRem)(sizeToPxValue[p.size] / 2.333),
      verticalAlign: 'top',
      textAlign: 'center',
      padding: '0'
    }, p.square && {
      borderRadius: v.squareAvatarBorderRadius
    });
  },
  status: function status(_ref5) {
    var v = _ref5.variables;
    return {
      position: 'absolute',
      bottom: 0,
      right: 0,
      boxShadow: "0 0 0 " + v.statusBorderWidth + " " + v.statusBorderColor
    };
  }
};
exports.avatarStyles = avatarStyles;
//# sourceMappingURL=avatarStyles.js.map
