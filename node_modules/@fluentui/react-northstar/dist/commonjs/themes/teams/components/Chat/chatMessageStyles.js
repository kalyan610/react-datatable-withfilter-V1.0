"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.chatMessageStyles = void 0;

var _isNil2 = _interopRequireDefault(require("lodash/isNil"));

var _ChatMessage = require("../../../../components/Chat/ChatMessage");

var _accessibilityStyles = require("../../../../utils/accessibility/Styles/accessibilityStyles");

var _utils = require("../../../../utils");

var _getBorderFocusStyles = require("../../getBorderFocusStyles");

var chatMessageStyles = {
  root: function root(_ref) {
    var _hover, _ref2, _ref3, _ref4;

    var p = _ref.props,
        v = _ref.variables,
        siteVariables = _ref.theme.siteVariables;
    return Object.assign({
      display: 'inline-block',
      position: 'relative',
      marginLeft: p.mine ? v.offset : 0,
      marginRight: !p.mine ? v.offset : 0,
      maxWidth: "calc(100% - " + v.offset + ")",
      minWidth: v.offset,
      paddingLeft: v.padding,
      paddingRight: v.padding,
      paddingTop: (0, _utils.pxToRem)(8),
      paddingBottom: (0, _utils.pxToRem)(10),
      borderRadius: v.borderRadius,
      border: v.border,
      outline: 0,
      color: v.color,
      backgroundColor: p.mine ? v.backgroundColorMine : v.backgroundColor,
      wordBreak: 'break-word',
      wordWrap: 'break-word'
    }, (v.hasMention || v.isImportant) && {
      '::before': {
        content: '""',
        backgroundColor: v.hasMention ? v.hasMentionColor : v.isImportantColor,
        height: '100%',
        left: '0',
        position: 'absolute',
        top: '0',
        width: (0, _utils.pxToRem)(3),
        borderBottomLeftRadius: 'inherit',
        borderTopLeftRadius: 'inherit'
      }
    }, (0, _getBorderFocusStyles.getBorderFocusStyles)({
      variables: siteVariables
    }), (0, _isNil2.default)(v.showActionMenu) && {
      ':hover': (_hover = {}, _hover["> ." + _ChatMessage.chatMessageSlotClassNames.actionMenu] = {
        opacity: 1,
        zIndex: v.overlayZIndex,
        '[data-popper-escaped]': {
          opacity: 0
        }
      }, _hover)
    }, p.attached === true && (_ref2 = {}, _ref2[p.mine ? 'borderTopRightRadius' : 'borderTopLeftRadius'] = 0, _ref2[p.mine ? 'borderBottomRightRadius' : 'borderBottomLeftRadius'] = 0, _ref2.paddingTop = (0, _utils.pxToRem)(5), _ref2.paddingBottom = (0, _utils.pxToRem)(7), _ref2), p.attached === 'top' && (_ref3 = {}, _ref3[p.mine ? 'borderBottomRightRadius' : 'borderBottomLeftRadius'] = 0, _ref3), p.attached === 'bottom' && (_ref4 = {}, _ref4[p.mine ? 'borderTopRightRadius' : 'borderTopLeftRadius'] = 0, _ref4.paddingTop = (0, _utils.pxToRem)(5), _ref4.paddingBottom = (0, _utils.pxToRem)(7), _ref4));
  },
  actionMenu: function actionMenu(_ref5) {
    var p = _ref5.props,
        v = _ref5.variables;
    return Object.assign({
      backgroundColor: v.backgroundColor,
      border: '1px solid',
      borderColor: v.reactionGroupBorderColor,
      borderRadius: v.borderRadius,
      boxShadow: v.actionMenuBoxShadow,
      // we need higher zIndex for the action menu in order to be displayed above the focus border of the chat message
      zIndex: p.focused ? v.overlayZIndex : -1
    }, (0, _isNil2.default)(v.showActionMenu) && {
      overflow: p.focused ? 'visible' : 'hidden',
      // hide and squash actions menu to prevent accidental hovers over its invisible area
      opacity: p.focused ? 1 : 0,
      width: 'auto'
    }, !(0, _isNil2.default)(v.showActionMenu) && {
      overflow: v.showActionMenu ? 'visible' : 'hidden',
      // opacity should always be preferred over visibility in order to avoid accessibility bugs in
      // JAWS behavior on Windows
      opacity: v.showActionMenu ? 1 : 0,
      width: v.showActionMenu ? 'auto' : 0
    }, {
      '[data-popper-escaped]': {
        opacity: 0
      }
    });
  },
  author: function author(_ref6) {
    var p = _ref6.props,
        v = _ref6.variables;
    return Object.assign({}, (p.mine || p.attached === 'bottom' || p.attached === true) && _accessibilityStyles.screenReaderContainerStyles, {
      color: v.authorColor,
      marginRight: v.authorMarginRight,
      marginBottom: v.headerMarginBottom,
      fontWeight: v.authorFontWeight
    });
  },
  timestamp: function timestamp(_ref7) {
    var p = _ref7.props,
        v = _ref7.variables;
    return Object.assign({
      marginBottom: v.headerMarginBottom
    }, p.mine && {
      color: v.timestampColorMine
    }, (p.attached === 'bottom' || p.attached === true) && !p.hasReactionGroup && _accessibilityStyles.screenReaderContainerStyles);
  },
  content: function content(_ref8) {
    var p = _ref8.props,
        v = _ref8.variables;
    return Object.assign({
      color: v.contentColor,
      display: 'block',
      '& a': {
        outline: 'none',
        color: p.mine ? v.linkColorMine : v.linkColor,
        ':focus': {
          textDecoration: 'underline'
        }
      }
    }, p.hasBadge && p.badgePosition === 'end' && {
      marginRight: (0, _utils.pxToRem)(4)
    });
  },
  badge: function badge(_ref9) {
    var _ref10;

    var p = _ref9.props,
        v = _ref9.variables;
    var sidePosition = p.badgePosition === 'start' ? 'left' : 'right';
    return _ref10 = {
      backgroundColor: v.hasMention ? v.hasMentionNubbinColor : v.isImportantColor,
      color: v.badgeTextColor,
      boxShadow: v.badgeShadow,
      position: 'absolute',
      padding: (0, _utils.pxToRem)(4),
      height: 'auto',
      width: 'auto',
      borderRadius: '50%',
      top: (0, _utils.pxToRem)(4),
      zIndex: v.zIndex
    }, _ref10[sidePosition] = 0, _ref10.transform = p.badgePosition === 'start' ? 'translateX(-50%)' : 'translateX(50%)', _ref10['& > :first-child'] = {
      display: 'inline-flex'
    }, _ref10;
  },
  reactionGroup: function reactionGroup(_ref11) {
    var p = _ref11.props,
        v = _ref11.variables;
    return Object.assign({
      marginLeft: v.reactionGroupMarginLeft
    }, p.hasBadge && p.badgePosition === 'end' && {
      marginRight: (0, _utils.pxToRem)(2)
    }, {
      float: 'right'
    });
  }
};
exports.chatMessageStyles = chatMessageStyles;
//# sourceMappingURL=chatMessageStyles.js.map
