{"version":3,"sources":["components/Chat/ChatItem.tsx"],"names":["getElementType","useUnhandledProps","useAccessibility","useFluentContext","useStyles","useTelemetry","customPropTypes","PropTypes","React","childrenExist","createShorthandFactory","commonPropTypes","rtlTextContainer","Box","ChatItemContextProvider","chatItemClassName","chatItemSlotClassNames","message","gutter","ChatItem","props","context","displayName","telemetry","setStart","setEnd","accessibility","attached","children","className","contentPosition","design","styles","variables","getA11Props","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","renderContent","gutterElement","create","defaultProps","messageElement","ElementType","unhandledProps","handledProps","element","root","getAttributes","forElements","as","propTypes","createCommon","content","oneOfType","bool","oneOf","itemShorthand","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport { Box, BoxProps } from '../Box/Box';\nimport { ChatItemContextProvider } from './chatItemContext';\n\nexport interface ChatItemSlotClassNames {\n  message: string;\n  gutter: string;\n}\n\nexport const chatItemClassName = 'ui-chat__item';\nexport const chatItemSlotClassNames: ChatItemSlotClassNames = {\n  message: `${chatItemClassName}__message`,\n  gutter: `${chatItemClassName}__gutter`,\n};\n\nexport interface ChatItemProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** Controls item's relation to other chat items. */\n  attached?: boolean | 'top' | 'bottom';\n\n  /** Chat items can have a gutter. */\n  gutter?: ShorthandValue<BoxProps>;\n\n  /** Indicates whether the content is positioned at the start or the end. */\n  contentPosition?: 'start' | 'end';\n\n  /** Chat items can have a message. */\n  message?: ShorthandValue<BoxProps>;\n}\n\nexport type ChatItemStylesProps = Pick<ChatItemProps, 'attached' | 'contentPosition'>;\n\n/**\n * A ChatItem is container for single entity in Chat (e.g. message, notification, etc).\n */\nexport const ChatItem: ComponentWithAs<'li', ChatItemProps> & FluentComponentStaticProps<ChatItemProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(ChatItem.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    attached,\n    children,\n    className,\n    contentPosition,\n    design,\n    gutter,\n    message,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: ChatItem.displayName,\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<ChatItemStylesProps>(ChatItem.displayName, {\n    className: chatItemClassName,\n    mapPropsToStyles: () => ({\n      attached,\n      contentPosition,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const renderContent = () => {\n    const gutterElement = Box.create(gutter, {\n      defaultProps: () =>\n        getA11Props('gutter', {\n          className: chatItemSlotClassNames.gutter,\n          styles: resolvedStyles.gutter,\n        }),\n    });\n    const messageElement = Box.create(message, {\n      defaultProps: () =>\n        getA11Props('message', {\n          className: chatItemSlotClassNames.message,\n          styles: resolvedStyles.message,\n        }),\n    });\n\n    return (\n      <ChatItemContextProvider value={{ attached }}>\n        {contentPosition === 'start' && gutterElement}\n        {messageElement}\n        {contentPosition === 'end' && gutterElement}\n      </ChatItemContextProvider>\n    );\n  };\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ChatItem.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : renderContent()}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nChatItem.displayName = 'ChatItem';\n\nChatItem.defaultProps = {\n  as: 'li',\n  contentPosition: 'start',\n  attached: false,\n};\nChatItem.propTypes = {\n  ...commonPropTypes.createCommon({ content: false }),\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'top' | 'bottom'>(['top', 'bottom'])]),\n  gutter: customPropTypes.itemShorthand,\n  contentPosition: PropTypes.oneOf(['start', 'end']),\n  message: customPropTypes.itemShorthand,\n};\nChatItem.handledProps = Object.keys(ChatItem.propTypes) as any;\n\nChatItem.create = createShorthandFactory({ Component: ChatItem, mappedProp: 'message' });\n"],"file":"ChatItem.js"}