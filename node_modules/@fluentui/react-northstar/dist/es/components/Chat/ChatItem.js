import { getElementType, useUnhandledProps, useAccessibility, useFluentContext, useStyles, useTelemetry } from '@fluentui/react-bindings';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';
import { Box } from '../Box/Box';
import { ChatItemContextProvider } from './chatItemContext';
export var chatItemClassName = 'ui-chat__item';
export var chatItemSlotClassNames = {
  message: chatItemClassName + "__message",
  gutter: chatItemClassName + "__gutter"
};

/**
 * A ChatItem is container for single entity in Chat (e.g. message, notification, etc).
 */
export var ChatItem = /*#__PURE__*/function () {
  var ChatItem = function ChatItem(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(ChatItem.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var accessibility = props.accessibility,
        attached = props.attached,
        children = props.children,
        className = props.className,
        contentPosition = props.contentPosition,
        design = props.design,
        gutter = props.gutter,
        message = props.message,
        styles = props.styles,
        variables = props.variables;
    var getA11Props = useAccessibility(accessibility, {
      debugName: ChatItem.displayName,
      rtl: context.rtl
    });

    var _useStyles = useStyles(ChatItem.displayName, {
      className: chatItemClassName,
      mapPropsToStyles: function mapPropsToStyles() {
        return {
          attached: attached,
          contentPosition: contentPosition
        };
      },
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes,
        resolvedStyles = _useStyles.styles;

    var renderContent = function renderContent() {
      var gutterElement = Box.create(gutter, {
        defaultProps: function defaultProps() {
          return getA11Props('gutter', {
            className: chatItemSlotClassNames.gutter,
            styles: resolvedStyles.gutter
          });
        }
      });
      var messageElement = Box.create(message, {
        defaultProps: function defaultProps() {
          return getA11Props('message', {
            className: chatItemSlotClassNames.message,
            styles: resolvedStyles.message
          });
        }
      });
      return /*#__PURE__*/React.createElement(ChatItemContextProvider, {
        value: {
          attached: attached
        }
      }, contentPosition === 'start' && gutterElement, messageElement, contentPosition === 'end' && gutterElement);
    };

    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(ChatItem.handledProps, props);
    var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
      className: classes.root
    }, rtlTextContainer.getAttributes({
      forElements: [children]
    }), unhandledProps)), childrenExist(children) ? children : renderContent());
    setEnd();
    return element;
  };

  ChatItem.displayName = 'ChatItem';
  ChatItem.defaultProps = {
    as: 'li',
    contentPosition: 'start',
    attached: false
  };
  ChatItem.propTypes = Object.assign({}, commonPropTypes.createCommon({
    content: false
  }), {
    attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),
    gutter: customPropTypes.itemShorthand,
    contentPosition: PropTypes.oneOf(['start', 'end']),
    message: customPropTypes.itemShorthand
  });
  ChatItem.handledProps = Object.keys(ChatItem.propTypes);
  ChatItem.create = createShorthandFactory({
    Component: ChatItem,
    mappedProp: 'message'
  });
  return ChatItem;
}();
//# sourceMappingURL=ChatItem.js.map
