{"version":3,"sources":["components/Chat/Chat.tsx"],"names":["chatBehavior","getElementType","useUnhandledProps","useFluentContext","useAccessibility","useStyles","useTelemetry","customPropTypes","PropTypes","React","childrenExist","commonPropTypes","createShorthandFactory","rtlTextContainer","ChatItem","ChatMessage","ChatMessageDetails","chatClassName","chatSlotClassNames","item","Chat","props","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","design","items","styles","variables","getA11Props","debugName","rtl","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","unstable_wrapWithFocusZone","root","getAttributes","forElements","create","defaultProps","as","propTypes","createCommon","content","arrayOf","itemShorthand","Object","keys","Item","Message","MessageDetails","Component"],"mappings":"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","sourcesContent":["import { Accessibility, chatBehavior, ChatBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useFluentContext,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  ChildrenComponentProps,\n  commonPropTypes,\n  createShorthandFactory,\n  rtlTextContainer,\n  UIComponentProps,\n} from '../../utils';\nimport { ShorthandCollection, FluentComponentStaticProps } from '../../types';\nimport { ChatItem, ChatItemProps } from './ChatItem';\nimport { ChatMessage } from './ChatMessage';\nimport { ChatMessageDetails } from './ChatMessageDetails';\n\nexport interface ChatSlotClassNames {\n  item: string;\n}\n\nexport interface ChatProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ChatBehaviorProps>;\n\n  /** Shorthand array of the items inside the chat. */\n  items?: ShorthandCollection<ChatItemProps>;\n}\n\nexport type ChatStylesProps = {};\nexport const chatClassName = 'ui-chat';\nexport const chatSlotClassNames: ChatSlotClassNames = {\n  item: `${chatClassName}__item`,\n};\n\n/**\n * A Chat displays messages from a conversation between multiple users.\n */\nexport const Chat: ComponentWithAs<'ul', ChatProps> &\n  FluentComponentStaticProps<ChatProps> & {\n    Item: typeof ChatItem;\n    Message: typeof ChatMessage;\n    MessageDetails: typeof ChatMessageDetails;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Chat.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, design, items, styles, variables } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Chat.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ChatStylesProps>(Chat.displayName, {\n    className: chatClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Chat.handledProps, props);\n\n  const element = getA11Props.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children)\n        ? children\n        : _.map(items, item =>\n            ChatItem.create(item, {\n              defaultProps: () => ({ className: chatSlotClassNames.item }),\n            }),\n          )}\n    </ElementType>,\n  );\n  setEnd();\n\n  return element;\n};\n\nChat.displayName = 'Chat';\n\nChat.defaultProps = {\n  accessibility: chatBehavior,\n  as: 'ul',\n};\nChat.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  items: PropTypes.arrayOf(customPropTypes.itemShorthand),\n};\nChat.handledProps = Object.keys(Chat.propTypes) as any;\n\nChat.Item = ChatItem;\nChat.Message = ChatMessage;\nChat.MessageDetails = ChatMessageDetails;\n\nChat.create = createShorthandFactory({ Component: Chat });\n"],"file":"Chat.js"}