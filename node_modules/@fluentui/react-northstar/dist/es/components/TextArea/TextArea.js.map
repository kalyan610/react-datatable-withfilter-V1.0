{"version":3,"sources":["components/TextArea/TextArea.tsx"],"names":["textAreaBehavior","React","PropTypes","commonPropTypes","createShorthandFactory","useAutoControlled","getElementType","useTelemetry","useUnhandledProps","useFluentContext","useAccessibility","useStyles","textAreaClassName","TextArea","props","context","displayName","telemetry","setStart","setEnd","disabled","accessibility","inverted","resize","fluid","className","design","styles","variables","defaultValue","value","initialValue","setValue","unhandledProps","handledProps","getA11yProps","debugName","mapPropsToBehavior","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","handleChange","e","newValue","element","root","onChange","propTypes","createCommon","content","string","func","bool","defaultProps","as","Object","keys","create","Component"],"mappings":"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","sourcesContent":["import { Accessibility, textAreaBehavior, TextAreaBehaviorProps } from '@fluentui/accessibility';\nimport { ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { UIComponentProps, ChildrenComponentProps, commonPropTypes, createShorthandFactory } from '../../utils';\nimport {\n  ComponentWithAs,\n  useAutoControlled,\n  getElementType,\n  useTelemetry,\n  useUnhandledProps,\n  useFluentContext,\n  useAccessibility,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface TextAreaProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TextAreaBehaviorProps>;\n\n  /** The default value of the text area. */\n  defaultValue?: string;\n\n  /**\n   * Called on change.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<TextAreaProps>;\n\n  /** The value of the text area. */\n  value?: string;\n\n  /** The text area becomes read-only. */\n  disabled?: boolean;\n\n  /** An input can have inverted colors. */\n  inverted?: boolean;\n\n  /** A textarea can be resized. */\n  resize?: 'none' | 'both' | 'horizontal' | 'vertical';\n\n  /** A textarea can take the width of its container. */\n  fluid?: boolean;\n}\n\nexport type TextAreaStylesProps = Required<Pick<TextAreaProps, 'inverted' | 'resize' | 'fluid' | 'disabled'>>;\n\nexport const textAreaClassName = 'ui-textarea';\n\n/**\n * A TextArea is a multi-line plan-text editing control.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for textarea.\n * When using maxlength attribute, provide the information about max length in label for screen reader.\n * @accessibilityIssues\n * [NVDA - No announcement of maxlength](https://github.com/nvaccess/nvda/issues/7910)\n * [JAWS - textarea - no announcement of maxlength](https://github.com/FreedomScientific/VFO-standards-support/issues/300)\n */\nexport const TextArea: ComponentWithAs<'textarea', TextAreaProps> &\n  FluentComponentStaticProps<TextAreaProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TextArea.displayName, context.telemetry);\n\n  setStart();\n\n  const { disabled, accessibility, inverted, resize, fluid, className, design, styles, variables } = props;\n\n  const [value, setValue] = useAutoControlled({\n    defaultValue: props.defaultValue,\n    value: props.value,\n    initialValue: '',\n  });\n\n  const unhandledProps = useUnhandledProps(TextArea.handledProps, props);\n\n  const getA11yProps = useAccessibility<TextAreaBehaviorProps>(accessibility, {\n    debugName: TextArea.displayName,\n    mapPropsToBehavior: () => ({\n      disabled,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<TextAreaStylesProps>(TextArea.displayName, {\n    className: textAreaClassName,\n    mapPropsToStyles: () => ({\n      inverted,\n      resize,\n      fluid,\n      disabled,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n\n  const handleChange = (e: React.ChangeEvent | React.FormEvent) => {\n    const newValue = _.get(e, 'target.value');\n\n    _.invoke(props, 'onChange', e, { ...props, value: newValue });\n    setValue(newValue);\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        value,\n        disabled,\n        onChange: handleChange,\n        ...unhandledProps,\n      })}\n    />\n  );\n  setEnd();\n  return element;\n};\n\nTextArea.displayName = 'TextArea';\n\nTextArea.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  defaultValue: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.string,\n  disabled: PropTypes.bool,\n  inverted: PropTypes.bool,\n};\n\nTextArea.defaultProps = {\n  as: 'textarea',\n  accessibility: textAreaBehavior,\n};\n\nTextArea.handledProps = Object.keys(TextArea.propTypes) as any;\n\nTextArea.create = createShorthandFactory({\n  Component: TextArea,\n});\n"],"file":"TextArea.js"}