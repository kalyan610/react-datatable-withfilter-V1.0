import _invoke from "lodash/invoke";
import { hierarchicalTreeTitleBehavior } from '@fluentui/accessibility';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';
import { getElementType, useUnhandledProps, useFluentContext, useTelemetry, useAccessibility, useStyles } from '@fluentui/react-bindings';
export var hierarchicalTreeTitleClassName = 'ui-hierarchicaltree__title';

/**
 * A TreeTitle renders a title of TreeItem.
 */
export var HierarchicalTreeTitle = /*#__PURE__*/function () {
  var HierarchicalTreeTitle = function HierarchicalTreeTitle(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(HierarchicalTreeTitle.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var children = props.children,
        content = props.content,
        open = props.open,
        hasSubtree = props.hasSubtree,
        className = props.className,
        design = props.design,
        styles = props.styles,
        variables = props.variables;
    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(HierarchicalTreeTitle.handledProps, props);
    var getA11yProps = useAccessibility(props.accessibility, {
      debugName: HierarchicalTreeTitle.displayName,
      actionHandlers: {
        performClick: function performClick(e) {
          e.preventDefault();
          handleClick(e);
        }
      },
      mapPropsToBehavior: function mapPropsToBehavior() {
        return {
          open: open,
          hasSubtree: hasSubtree
        };
      },
      rtl: context.rtl
    });

    var _useStyles = useStyles(HierarchicalTreeTitle.displayName, {
      className: hierarchicalTreeTitleClassName,
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes;

    var handleClick = function handleClick(e) {
      _invoke(props, 'onClick', e, props);
    };

    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
      className: classes.root,
      onClick: handleClick
    }, unhandledProps, rtlTextContainer.getAttributes({
      forElements: [children, content]
    }))), childrenExist(children) ? children : content);
    setEnd();
    return element;
  };

  HierarchicalTreeTitle.displayName = 'HierarchicalTreeTitle';
  HierarchicalTreeTitle.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
    onClick: PropTypes.func,
    open: PropTypes.bool,
    hasSubtree: PropTypes.bool
  });
  HierarchicalTreeTitle.defaultProps = {
    as: 'a',
    accessibility: hierarchicalTreeTitleBehavior
  };
  HierarchicalTreeTitle.handledProps = Object.keys(HierarchicalTreeTitle.propTypes);
  HierarchicalTreeTitle.create = createShorthandFactory({
    Component: HierarchicalTreeTitle,
    mappedProp: 'content'
  });
  return HierarchicalTreeTitle;
}();
//# sourceMappingURL=HierarchicalTreeTitle.js.map
