import _isNil from "lodash/isNil";
import _invoke from "lodash/invoke";
import { hierarchicalTreeItemBehavior, hierarchicalSubtreeBehavior } from '@fluentui/accessibility';
import { getFirstFocusable, useTelemetry, useFluentContext, getElementType, useUnhandledProps, useAccessibility, useStyles } from '@fluentui/react-bindings';
import * as customPropTypes from '@fluentui/react-proptypes';
import { Ref } from '@fluentui/react-component-ref';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { HierarchicalTree } from './HierarchicalTree';
import { HierarchicalTreeTitle } from './HierarchicalTreeTitle';
import { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';
export var hierarchicalTreeItemClassName = 'ui-hierarchicaltree__item';
export var hierarchicalTreeItemSlotClassNames = {
  subtree: hierarchicalTreeItemClassName + "__subtree"
};

/**
 * A TreeItem renders an item of a Tree.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 */
export var HierarchicalTreeItem = /*#__PURE__*/function () {
  var HierarchicalTreeItem = function HierarchicalTreeItem(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(HierarchicalTreeItem.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var items = props.items,
        title = props.title,
        renderItemTitle = props.renderItemTitle,
        open = props.open,
        exclusive = props.exclusive,
        children = props.children,
        className = props.className,
        design = props.design,
        styles = props.styles,
        variables = props.variables;
    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(HierarchicalTreeItem.handledProps, props);
    var actionHandlers = {
      performClick: function performClick(e) {
        e.preventDefault();
        e.stopPropagation();

        _invoke(props, 'onTitleClick', e, props);
      },
      receiveFocus: function receiveFocus(e) {
        e.preventDefault();
        e.stopPropagation(); // Focuses the title if the event comes from a child item.

        if (eventComesFromChildItem(e)) {
          itemRef.current.focus();
        }
      },
      collapse: function collapse(e) {
        e.preventDefault();
        e.stopPropagation(); // Handle click on title if the keyboard event was dispatched on that title

        if (!eventComesFromChildItem(e)) {
          handleTitleClick(e);
        }
      },
      expand: function expand(e) {
        e.preventDefault();
        e.stopPropagation();
        handleTitleClick(e);
      },
      focusSubtree: function focusSubtree(e) {
        e.preventDefault();
        e.stopPropagation();
        var element = getFirstFocusable(treeRef.current, treeRef.current, true);

        if (element) {
          element.focus();
        }
      }
    };
    var getA11yProps = useAccessibility(props.accessibility, {
      debugName: HierarchicalTreeItem.displayName,
      actionHandlers: actionHandlers,
      mapPropsToBehavior: function mapPropsToBehavior() {
        return {
          hasItems: items && !!items.length,
          open: open
        };
      },
      rtl: context.rtl
    });
    var itemRef = React.useRef();
    var treeRef = React.useRef();

    var _useStyles = useStyles(HierarchicalTreeItem.displayName, {
      className: hierarchicalTreeItemClassName,
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes;

    var eventComesFromChildItem = function eventComesFromChildItem(e) {
      return e.currentTarget !== e.target;
    };

    var handleTitleClick = function handleTitleClick(e) {
      _invoke(props, 'onTitleClick', e, props);
    };

    var handleTitleOverrides = function handleTitleOverrides(predefinedProps) {
      return {
        onClick: function onClick(e, titleProps) {
          handleTitleClick(e);

          _invoke(predefinedProps, 'onClick', e, titleProps);
        }
      };
    };

    var renderContent = function renderContent() {
      var hasSubtree = !_isNil(items);
      return /*#__PURE__*/React.createElement(React.Fragment, null, HierarchicalTreeTitle.create(title, {
        defaultProps: function defaultProps() {
          return {
            open: open,
            hasSubtree: hasSubtree,
            as: hasSubtree ? 'span' : 'a'
          };
        },
        render: renderItemTitle,
        overrideProps: handleTitleOverrides
      }), hasSubtree && open && /*#__PURE__*/React.createElement(Ref, {
        innerRef: treeRef
      }, HierarchicalTree.create(items, {
        defaultProps: function defaultProps() {
          return getA11yProps('item', {
            accessibility: hierarchicalSubtreeBehavior,
            className: hierarchicalTreeItemSlotClassNames.subtree,
            exclusive: exclusive,
            renderItemTitle: renderItemTitle
          });
        }
      })));
    };

    var element = /*#__PURE__*/React.createElement(Ref, {
      innerRef: itemRef
    }, /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
      className: classes.root
    }, unhandledProps, rtlTextContainer.getAttributes({
      forElements: [children]
    }))), childrenExist(children) ? children : renderContent()));
    setEnd();
    return element;
  };

  HierarchicalTreeItem.displayName = 'HierarchicalTreeItem';
  HierarchicalTreeItem.propTypes = Object.assign({}, commonPropTypes.createCommon({
    content: false
  }), {
    items: customPropTypes.collectionShorthand,
    index: PropTypes.number,
    exclusive: PropTypes.bool,
    onTitleClick: PropTypes.func,
    open: PropTypes.bool,
    renderItemTitle: PropTypes.func,
    title: customPropTypes.itemShorthand
  });
  HierarchicalTreeItem.defaultProps = {
    as: 'li',
    accessibility: hierarchicalTreeItemBehavior
  };
  HierarchicalTreeItem.handledProps = Object.keys(HierarchicalTreeItem.propTypes);
  HierarchicalTreeItem.create = createShorthandFactory({
    Component: HierarchicalTreeItem,
    mappedProp: 'title'
  });
  return HierarchicalTreeItem;
}();
//# sourceMappingURL=HierarchicalTreeItem.js.map
