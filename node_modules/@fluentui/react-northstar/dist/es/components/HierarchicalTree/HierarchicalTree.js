import _map from "lodash/map";
import _without from "lodash/without";
import _includes from "lodash/includes";
import _isArray from "lodash/isArray";
import _invoke from "lodash/invoke";
import { hierarchicalTreeBehavior } from '@fluentui/accessibility';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { HierarchicalTreeItem } from './HierarchicalTreeItem';
import { childrenExist, commonPropTypes, createShorthandFactory, rtlTextContainer } from '../../utils';
import { useTelemetry, useFluentContext, useAutoControlled, useUnhandledProps, getElementType, useAccessibility, useStyles } from '@fluentui/react-bindings';
export var hierarchicalTreeClassName = 'ui-hierarchicaltree';

/**
 * (DEPRECATED) A Tree displays data organised in tree hierarchy.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 */
export var HierarchicalTree = /*#__PURE__*/function () {
  var HierarchicalTree = function HierarchicalTree(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(HierarchicalTree.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var children = props.children,
        className = props.className,
        design = props.design,
        styles = props.styles,
        variables = props.variables,
        items = props.items,
        renderItemTitle = props.renderItemTitle,
        exclusive = props.exclusive;

    var _useAutoControlled = useAutoControlled({
      defaultValue: props.defaultActiveIndex,
      value: props.activeIndex,
      initialValue: exclusive ? -1 : []
    }),
        activeIndex = _useAutoControlled[0],
        setActiveIndex = _useAutoControlled[1];

    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(HierarchicalTree.handledProps, props);
    var getA11yProps = useAccessibility(props.accessibility, {
      debugName: HierarchicalTree.displayName,
      actionHandlers: {
        expandSiblings: function expandSiblings(e) {
          e.preventDefault();
          e.stopPropagation();

          if (exclusive) {
            return;
          }

          var activeIndex = items ? items.reduce(function (acc, item, index) {
            if (item['items']) {
              return [].concat(acc, [index]);
            }

            return acc;
          }, []) : [];
          trySetActiveIndexAndTriggerEvent(e, activeIndex);
        }
      },
      mapPropsToBehavior: function mapPropsToBehavior() {
        return {
          'aria-labelledby': props['aria-labelledby']
        };
      },
      rtl: context.rtl
    });

    var _useStyles = useStyles(HierarchicalTree.displayName, {
      className: hierarchicalTreeClassName,
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes;

    var trySetActiveIndexAndTriggerEvent = function trySetActiveIndexAndTriggerEvent(e, activeIndex) {
      setActiveIndex(activeIndex);

      _invoke(props, 'onActiveIndexChange', e, Object.assign({}, props, {
        activeIndex: activeIndex
      }));
    };

    var getActiveIndexes = function getActiveIndexes() {
      return _isArray(activeIndex) ? activeIndex : [activeIndex];
    };

    var computeNewIndex = function computeNewIndex(treeItemProps) {
      var index = treeItemProps.index,
          items = treeItemProps.items;
      var activeIndexes = getActiveIndexes();
      var exclusive = props.exclusive;

      if (!items) {
        return activeIndexes;
      }

      if (exclusive) return index; // check to see if index is in array, and remove it, if not then add it

      return _includes(activeIndexes, index) ? _without(activeIndexes, index) : [].concat(activeIndexes, [index]);
    };

    var handleTreeItemOverrides = function handleTreeItemOverrides(predefinedProps) {
      return {
        onTitleClick: function onTitleClick(e, treeItemProps) {
          trySetActiveIndexAndTriggerEvent(e, computeNewIndex(treeItemProps));

          _invoke(predefinedProps, 'onTitleClick', e, treeItemProps);
        }
      };
    };

    var renderContent = function renderContent() {
      var activeIndexes = getActiveIndexes();
      return _map(items, function (item, index) {
        return HierarchicalTreeItem.create(item, {
          defaultProps: function defaultProps() {
            return {
              index: index,
              exclusive: exclusive,
              renderItemTitle: renderItemTitle,
              open: exclusive ? index === activeIndex : _includes(activeIndexes, index)
            };
          },
          overrideProps: handleTreeItemOverrides
        });
      });
    };

    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
      className: classes.root
    }, rtlTextContainer.getAttributes({
      forElements: [children]
    }), unhandledProps)), childrenExist(children) ? children : renderContent());
    setEnd();
    return element;
  };

  HierarchicalTree.displayName = 'HierarchicalTree';
  HierarchicalTree.propTypes = Object.assign({}, commonPropTypes.createCommon({
    content: false
  }), {
    activeIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),
    defaultActiveIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),
    exclusive: PropTypes.bool,
    items: customPropTypes.collectionShorthand,
    renderItemTitle: PropTypes.func,
    onActiveIndexChange: PropTypes.func
  });
  HierarchicalTree.defaultProps = {
    as: 'ul',
    accessibility: hierarchicalTreeBehavior
  };
  HierarchicalTree.handledProps = Object.keys(HierarchicalTree.propTypes);
  HierarchicalTree.create = createShorthandFactory({
    Component: HierarchicalTree,
    mappedArrayProp: 'items'
  });
  return HierarchicalTree;
}();
//# sourceMappingURL=HierarchicalTree.js.map
