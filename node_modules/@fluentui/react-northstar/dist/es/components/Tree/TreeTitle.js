import _isEmpty from "lodash/isEmpty";
import _invoke from "lodash/invoke";
import { treeTitleBehavior } from '@fluentui/accessibility';
import { getElementType, useUnhandledProps, useAccessibility, useStyles, useFluentContext, useTelemetry } from '@fluentui/react-bindings';
import { Box } from '../Box/Box';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';
export var treeTitleClassName = 'ui-tree__title';
export var treeTitleSlotClassNames = {
  indicator: treeTitleClassName + "__selection-indicator"
};
/**
 * A TreeTitle renders a title of TreeItem.
 */

export var TreeTitle = /*#__PURE__*/function () {
  var TreeTitle = function TreeTitle(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(TreeTitle.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var accessibility = props.accessibility,
        children = props.children,
        className = props.className,
        content = props.content,
        design = props.design,
        hasSubtree = props.hasSubtree,
        level = props.level,
        index = props.index,
        styles = props.styles,
        treeSize = props.treeSize,
        variables = props.variables,
        selectionIndicator = props.selectionIndicator,
        disabled = props.disabled,
        selected = props.selected,
        selectable = props.selectable,
        selectableParent = props.selectableParent,
        expanded = props.expanded,
        indeterminate = props.indeterminate;
    var getA11Props = useAccessibility(accessibility, {
      debugName: TreeTitle.displayName,
      actionHandlers: {
        performClick: function performClick(e) {
          e.preventDefault();
          e.stopPropagation();
          handleClick(e);
        },
        performSelection: function performSelection(e) {
          e.preventDefault();
          e.stopPropagation();
          handleClick(e);
        }
      },
      mapPropsToBehavior: function mapPropsToBehavior() {
        return {
          hasSubtree: hasSubtree,
          level: level,
          index: index,
          treeSize: treeSize,
          selected: selected,
          selectable: selectable,
          selectableParent: selectableParent
        };
      },
      rtl: context.rtl
    });

    var _useStyles = useStyles(TreeTitle.displayName, {
      className: treeTitleClassName,
      mapPropsToStyles: function mapPropsToStyles() {
        return {
          selected: selected,
          selectableParent: selectableParent,
          disabled: disabled,
          selectable: selectable,
          indeterminate: indeterminate
        };
      },
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes,
        resolvedStyles = _useStyles.styles;

    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(TreeTitle.handledProps, props);

    var handleClick = function handleClick(e) {
      _invoke(props, 'onClick', e, props);
    };

    var selectionIndicatorOverrideProps = function selectionIndicatorOverrideProps(predefinedProps) {
      return {
        onClick: function onClick(e) {
          e.stopPropagation(); // otherwise onClick on title will also be executed

          handleClick(e);

          _invoke(predefinedProps, 'onClick', e);
        }
      };
    };

    var selectIndicator = Box.create(selectionIndicator, {
      defaultProps: function defaultProps() {
        return Object.assign({
          as: 'span',
          selected: selected
        }, selectableParent && !_isEmpty(selectionIndicator) && {
          expanded: expanded
        }, getA11Props('indicator', Object.assign({
          className: treeTitleSlotClassNames.indicator
        }, (selectable && !hasSubtree || selectableParent && expanded) && _isEmpty(selectionIndicator) && {
          styles: resolvedStyles.selectionIndicator
        })));
      },
      overrideProps: selectionIndicatorOverrideProps
    });
    var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
      className: classes.root,
      onClick: handleClick,
      selected: selected
    }, rtlTextContainer.getAttributes({
      forElements: [children, content]
    }), unhandledProps)), childrenExist(children) ? children : content, selectable && selectIndicator);
    setEnd();
    return element;
  };

  TreeTitle.displayName = 'TreeTitle';
  TreeTitle.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
    hasSubtree: PropTypes.bool,
    index: PropTypes.number,
    level: PropTypes.number,
    onClick: PropTypes.func,
    expanded: PropTypes.bool,
    selected: PropTypes.bool,
    selectable: PropTypes.bool,
    selectableParent: PropTypes.bool,
    treeSize: PropTypes.number,
    selectionIndicator: customPropTypes.shorthandAllowingChildren,
    indeterminate: PropTypes.bool
  });
  TreeTitle.defaultProps = {
    as: 'a',
    selectionIndicator: {},
    accessibility: treeTitleBehavior
  };
  TreeTitle.handledProps = Object.keys(TreeTitle.propTypes);
  TreeTitle.create = createShorthandFactory({
    Component: TreeTitle,
    mappedProp: 'content'
  });
  return TreeTitle;
}();
//# sourceMappingURL=TreeTitle.js.map
