import _invoke from "lodash/invoke";
import { treeItemBehavior } from '@fluentui/accessibility';
import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry, useFluentContext } from '@fluentui/react-bindings';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { Ref } from '@fluentui/react-component-ref';
import { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';
import { TreeTitle, treeTitleSlotClassNames } from './TreeTitle';
import { hasSubtree, TreeContext } from './utils';
export var treeItemClassName = 'ui-tree__item';
/**
 * A TreeItem renders an item of a Tree.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 */

export var TreeItem = /*#__PURE__*/function () {
  var TreeItem = function TreeItem(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(TreeItem.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var accessibility = props.accessibility,
        children = props.children,
        className = props.className,
        contentRef = props.contentRef,
        design = props.design,
        title = props.title,
        renderItemTitle = props.renderItemTitle,
        expanded = props.expanded,
        level = props.level,
        index = props.index,
        styles = props.styles,
        variables = props.variables,
        treeSize = props.treeSize,
        selectionIndicator = props.selectionIndicator,
        selectableParent = props.selectableParent,
        selected = props.selected,
        selectable = props.selectable,
        indeterminate = props.indeterminate,
        id = props.id;
    var hasSubtreeItem = hasSubtree(props);

    var _React$useContext = React.useContext(TreeContext),
        onFocusParent = _React$useContext.onFocusParent,
        onSiblingsExpand = _React$useContext.onSiblingsExpand,
        onFocusFirstChild = _React$useContext.onFocusFirstChild,
        onTitleClick = _React$useContext.onTitleClick;

    var getA11Props = useAccessibility(accessibility, {
      actionHandlers: {
        performClick: function performClick(e) {
          e.preventDefault();
          e.stopPropagation();
          handleTitleClick(e);
        },
        focusParent: function focusParent(e) {
          e.preventDefault();
          e.stopPropagation();
          handleFocusParent(e);
        },
        collapse: function collapse(e) {
          e.preventDefault();
          e.stopPropagation();
          handleTitleClick(e);
        },
        expand: function expand(e) {
          e.preventDefault();
          e.stopPropagation();
          handleTitleClick(e);
        },
        focusFirstChild: function focusFirstChild(e) {
          e.preventDefault();
          e.stopPropagation();
          handleFocusFirstChild(e);
        },
        expandSiblings: function expandSiblings(e) {
          e.preventDefault();
          e.stopPropagation();
          handleSiblingsExpand(e);
        },
        performSelection: function performSelection(e) {
          e.preventDefault();
          e.stopPropagation();
          handleSelection(e);
        }
      },
      debugName: TreeItem.displayName,
      mapPropsToBehavior: function mapPropsToBehavior() {
        return {
          expanded: expanded,
          level: level,
          index: index,
          hasSubtree: hasSubtreeItem,
          treeSize: treeSize,
          selected: selected,
          selectable: selectable,
          selectableParent: selectableParent
        };
      },
      rtl: context.rtl
    });

    var _useStyles = useStyles(TreeItem.displayName, {
      className: treeItemClassName,
      mapPropsToStyles: function mapPropsToStyles() {
        return {
          level: level
        };
      },
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes;

    var handleSelection = function handleSelection(e) {
      onTitleClick(e, props, true);

      _invoke(props, 'onTitleClick', e, props);
    };

    var handleTitleClick = function handleTitleClick(e) {
      onTitleClick(e, props);

      _invoke(props, 'onTitleClick', e, props);
    };

    var handleFocusFirstChild = function handleFocusFirstChild(e) {
      _invoke(props, 'onFocusFirstChild', e, props);

      onFocusFirstChild(props.id);
    };

    var handleFocusParent = function handleFocusParent(e) {
      _invoke(props, 'onFocusParent', e, props);

      onFocusParent(props.parent);
    };

    var handleSiblingsExpand = function handleSiblingsExpand(e) {
      _invoke(props, 'onSiblingsExpand', e, props);

      onSiblingsExpand(e, props);
    };

    var handleTitleOverrides = function handleTitleOverrides(predefinedProps) {
      return {
        onClick: function onClick(e, titleProps) {
          var _ref, _ref$className;

          if (selectable && ((_ref = e == null ? void 0 : e.target) == null ? void 0 : (_ref$className = _ref.className) == null ? void 0 : _ref$className.includes(treeTitleSlotClassNames.indicator))) {
            handleSelection(e);
          } else {
            handleTitleClick(e);
          }

          _invoke(predefinedProps, 'onClick', e, titleProps);
        }
      };
    };

    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(TreeItem.handledProps, props);
    var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
      className: classes.root,
      id: id,
      selected: selected
    }, rtlTextContainer.getAttributes({
      forElements: [children]
    }), unhandledProps)), childrenExist(children) ? children : TreeTitle.create(title, {
      defaultProps: function defaultProps() {
        return getA11Props('title', Object.assign({
          hasSubtree: hasSubtreeItem,
          as: hasSubtreeItem ? 'span' : 'a',
          level: level,
          treeSize: treeSize,
          expanded: expanded,
          index: index,
          selected: selected,
          selectable: selectable
        }, hasSubtreeItem && !selectableParent && {
          selectable: false
        }, selectableParent && {
          indeterminate: indeterminate
        }, {
          selectableParent: selectableParent,
          selectionIndicator: selectionIndicator
        }));
      },
      render: renderItemTitle,
      overrideProps: handleTitleOverrides
    }));
    var elementWithRef = contentRef ? /*#__PURE__*/React.createElement(Ref, {
      innerRef: contentRef
    }, element) : element;
    setEnd();
    return elementWithRef;
  };

  TreeItem.displayName = 'TreeItem';
  TreeItem.propTypes = Object.assign({}, commonPropTypes.createCommon({
    content: false
  }), {
    contentRef: customPropTypes.ref,
    id: PropTypes.string.isRequired,
    index: PropTypes.number,
    items: customPropTypes.collectionShorthand,
    level: PropTypes.number,
    onFocusFirstChild: PropTypes.func,
    onFocusParent: PropTypes.func,
    onTitleClick: PropTypes.func,
    onSiblingsExpand: PropTypes.func,
    expanded: PropTypes.bool,
    parent: PropTypes.string,
    renderItemTitle: PropTypes.func,
    treeSize: PropTypes.number,
    title: customPropTypes.itemShorthand,
    selectionIndicator: customPropTypes.shorthandAllowingChildren,
    selected: PropTypes.bool,
    selectable: PropTypes.bool,
    selectableParent: PropTypes.bool,
    indeterminate: PropTypes.bool
  });
  TreeItem.defaultProps = {
    accessibility: treeItemBehavior
  };
  TreeItem.handledProps = Object.keys(TreeItem.propTypes);
  TreeItem.create = createShorthandFactory({
    Component: TreeItem,
    mappedProp: 'title'
  });
  return TreeItem;
}();
//# sourceMappingURL=TreeItem.js.map
