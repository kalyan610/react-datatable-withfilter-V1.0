{"version":3,"sources":["components/Debug/FiberNavigator.ts"],"names":["ForwardRef","WorkTag","isDOMNode","e","tagName","nodeType","Node","ELEMENT_NODE","FiberNavigator","__fiber","findDebugHookState","node","memoizedState","current","fluentUIDebug","next","isEqual","fiberNav","instance","find","condition","move","fiber","fromFiber","findOwner","owner","findParent","parent","key","isClassComponent","isFunctionComponent","type","displayName","name","isForwardRef","return","isHostComponent","stateNode","constructor","_debugOwner","child","memoizedProps","elementType","prototype","isReactComponent","$$typeof","isDOMComponent","render","setState","domNodeToReactFiber","elm","k","startsWith","fiberNavigator","Object","defineProperty","value","enumerable","writable","configurable","fromDOMNode","domNode"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ForwardRef } from 'react-is';\n\n// ========================================================\n// react/packages/shared/ReactTypes.js\n// ========================================================\n\ntype ReactEventResponder<E, C> = {\n  $$typeof: Symbol | number;\n  displayName: string;\n  targetEventTypes: null | string[];\n  rootEventTypes: null | string[];\n  getInitialState: null | ((props: Object) => Object);\n  onEvent: null | ((event: E, context: C, props: Object, state: Object) => void);\n  onRootEvent: null | ((event: E, context: C, props: Object, state: Object) => void);\n  onMount: null | ((context: C, props: Object, state: Object) => void);\n  onUnmount: null | ((context: C, props: Object, state: Object) => void);\n};\n\ntype ReactEventResponderInstance<E, C> = {\n  fiber: Object;\n  props: Object;\n  responder: ReactEventResponder<E, C>;\n  rootEventTypes: null | Set<string>;\n  state: Object;\n};\n\n// ========================================================\n// react/packages/react-reconciler/src/ReactFiberHooks.js\n// ========================================================\n\nexport type HookType =\n  | 'useState'\n  | 'useReducer'\n  | 'useContext'\n  | 'useRef'\n  | 'useEffect'\n  | 'useLayoutEffect'\n  | 'useCallback'\n  | 'useMemo'\n  | 'useImperativeHandle'\n  | 'useDebugValue'\n  | 'useResponder';\n\ntype ReactProviderType<T> = {\n  $$typeof: Symbol | number;\n  _context: ReactContext<T>;\n};\n\ntype ReactContext<T> = {\n  $$typeof: Symbol | number;\n  Consumer: ReactContext<T>;\n  Provider: ReactProviderType<T>;\n\n  _calculateChangedBits: ((a: T, b: T) => number) | null;\n\n  _currentValue: T;\n  _currentValue2: T;\n  _threadCount: number;\n\n  // DEV only\n  _currentRenderer?: Object | null;\n  _currentRenderer2?: Object | null;\n};\n\ntype ContextDependency<T> = {\n  context: ReactContext<T>;\n  observedBits: number;\n  next: ContextDependency<any> | null;\n};\n\nenum WorkTag {\n  FunctionComponent = 0,\n  ClassComponent = 1,\n  IndeterminateComponent = 2, // Before we know whether it is function or class\n  HostRoot = 3, // Root of a host tree. Could be nested inside another node.\n  HostPortal = 4, // A subtree. Could be an entry point to a different renderer.\n  HostComponent = 5,\n  HostText = 6,\n  Fragment = 7,\n  Mode = 8,\n  ContextConsumer = 9,\n  ContextProvider = 10,\n  ForwardRef = 11,\n  Profiler = 12,\n  SuspenseComponent = 13,\n  MemoComponent = 14,\n  SimpleMemoComponent = 15,\n  LazyComponent = 16,\n  IncompleteClassComponent = 17,\n  DehydratedFragment = 18,\n  SuspenseListComponent = 19,\n  FundamentalComponent = 20,\n  ScopeComponent = 21,\n}\n\ntype Source = {\n  fileName: string;\n  lineNumber: number;\n};\n\ntype ExpirationTime = number;\n\ntype Dependencies = {\n  expirationTime: ExpirationTime;\n  firstContext: ContextDependency<any> | null;\n  responders: Map<ReactEventResponder<any, any>, ReactEventResponderInstance<any, any>> | null;\n};\n\n// ========================================================\n// react/packages/react-reconciler/src/ReactFiber.js\n// ========================================================\n\n// A Fiber is work on a Component that needs to be done or was done. There can\n// be more than one per component.\ntype Fiber = {\n  // These first fields are conceptually members of an Instance. This used to\n  // be split into a separate type and intersected with the other Fiber fields,\n  // but until Flow fixes its intersection bugs, we've merged them into a\n  // single type.\n\n  // An Instance is shared between all versions of a component. We can easily\n  // break this out into a separate object to avoid copying so much to the\n  // alternate versions of the tree. We put this on a single object for now to\n  // minimize the number of objects created during the initial render.\n\n  // Tag identifying the type of fiber.\n  tag: WorkTag;\n\n  // Unique identifier of this child.\n  key: null | string;\n\n  // The value of element.type which is used to preserve the identity during\n  // reconciliation of this child.\n  elementType: any;\n\n  // The resolved function/class/ associated with this fiber.\n  type: any;\n\n  // The local state associated with this fiber.\n  stateNode: any;\n\n  // Conceptual aliases\n  // parent : Instance -> return The parent happens to be the same as the\n  // return fiber since we've merged the fiber and instance.\n\n  // Remaining fields belong to Fiber\n\n  // The Fiber to return to after finishing processing this one.\n  // This is effectively the parent, but there can be multiple parents (two)\n  // so this is only the parent of the thing we're currently processing.\n  // It is conceptually the same as the return address of a stack frame.\n  return: Fiber | null;\n\n  // Singly Linked List Tree Structure.\n  child: Fiber | null;\n  sibling: Fiber | null;\n  index: number;\n\n  // The ref last used to attach this node.\n  // I'll avoid adding an owner field for prod and model that as functions.\n  ref: React.Ref<any>;\n\n  // Input is the data coming into process this fiber. Arguments. Props.\n  pendingProps: any; // This type will be more specific once we overload the tag.\n  memoizedProps: any; // The props used to create the output.\n\n  // A queue of state updates and callbacks.\n  // updateQueue: UpdateQueue<any> | null,\n\n  // The state used to create the output\n  memoizedState: any;\n\n  // Dependencies (contexts, events) for this fiber, if it has any\n  dependencies: Dependencies | null;\n\n  // // Bitfield that describes properties about the fiber and its subtree. E.g.\n  // // the ConcurrentMode flag indicates whether the subtree should be async-by-\n  // // default. When a fiber is created, it inherits the mode of its\n  // // parent. Additional flags can be set at creation time, but after that the\n  // // value should remain unchanged throughout the fiber's lifetime, particularly\n  // // before its child fibers are created.\n  // mode: TypeOfMode\n  //\n  // // Effect\n  // effectTag: SideEffectTag\n\n  // Singly linked list fast path to the next fiber with side-effects.\n  nextEffect: Fiber | null;\n\n  // The first and last fiber with side-effect within this subtree. This allows\n  // us to reuse a slice of the linked list when we reuse the work done within\n  // this fiber.\n  firstEffect: Fiber | null;\n  lastEffect: Fiber | null;\n\n  // Represents a time in the future by which this work should be completed.\n  // Does not include work found in its subtree.\n  expirationTime: ExpirationTime;\n\n  // This is used to quickly determine if a subtree has no pending changes.\n  childExpirationTime: ExpirationTime;\n\n  // This is a pooled version of a Fiber. Every fiber that gets updated will\n  // eventually have a pair. There are cases when we can clean up pairs to save\n  // memory if we need to.\n  alternate: Fiber | null;\n\n  // Time spent rendering this Fiber and its descendants for the current update.\n  // This tells us how well the tree makes use of sCU for memoization.\n  // It is reset to 0 each time we render and only updated when we don't bailout.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  actualDuration?: number;\n\n  // If the Fiber is currently active in the \"render\" phase,\n  // This marks the time at which the work began.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  actualStartTime?: number;\n\n  // Duration of the most recent render time for this Fiber.\n  // This value is not updated when we bailout for memoization purposes.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  selfBaseDuration?: number;\n\n  // Sum of base times for all descendants of this Fiber.\n  // This value bubbles up during the \"complete\" phase.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  treeBaseDuration?: number;\n\n  // Conceptual aliases\n  // workInProgress : Fiber ->  alternate The alternate used for reuse happens\n  // to be the same as work in progress.\n  // __DEV__ only\n  _debugID?: number;\n  _debugSource?: Source | null;\n  _debugOwner?: Fiber | null;\n  _debugIsCurrentlyTiming?: boolean;\n  _debugNeedsRemount?: boolean;\n\n  // Used to verify that the order of hooks does not change between renders.\n  _debugHookTypes?: HookType[] | null;\n};\n\nconst isDOMNode = e => e && typeof e.tagName === 'string' && e.nodeType === Node.ELEMENT_NODE;\n\nexport class FiberNavigator {\n  __fiber: Fiber;\n\n  static domNodeToReactFiber = (elm: HTMLElement): Fiber => {\n    if (!elm) return null;\n\n    for (const k in elm) {\n      if (k.startsWith('__reactInternalInstance$')) {\n        return elm[k];\n      }\n    }\n\n    return null;\n  };\n\n  // TODO: Fibers can become stale.\n  //      The only current fiber is the one found on the DOM node.\n  //      There is no way to start at a React Component fiber, go the DOM node,\n  //      get the current fiber, and find your way back to the React Component fiber.\n  //      Probably need to remove fromFiber and re-implement using only DOM node weak map.\n  static fromFiber = fiber => {\n    if (!fiber) return null;\n\n    const fiberNavigator = new FiberNavigator();\n\n    Object.defineProperty(fiberNavigator, '__fiber', {\n      value: fiber,\n      enumerable: false,\n      writable: false,\n      configurable: false,\n    });\n\n    return fiberNavigator;\n  };\n\n  static fromDOMNode = domNode => {\n    const fiber = FiberNavigator.domNodeToReactFiber(domNode);\n\n    if (!fiber) return null;\n\n    const fiberNavigator = new FiberNavigator();\n\n    Object.defineProperty(fiberNavigator, '__fiber', {\n      value: fiber,\n      enumerable: false,\n      writable: false,\n      configurable: false,\n    });\n\n    return fiberNavigator;\n  };\n\n  get key() {\n    return this.__fiber.key;\n  }\n\n  get name() {\n    if (this.isClassComponent || this.isFunctionComponent) {\n      return this.__fiber.type.displayName || this.__fiber.type.name;\n    }\n    if (this.isForwardRef) {\n      return (\n        this.__fiber.type.displayName ||\n        this.__fiber.type.name ||\n        this.__fiber.type.return?.displayName ||\n        this.__fiber.type.return?.name\n      );\n    }\n    if (this.isHostComponent) {\n      return this.__fiber.stateNode.constructor.name;\n    }\n    return null;\n  }\n\n  get parent(): FiberNavigator {\n    return FiberNavigator.fromFiber(this.__fiber.return);\n  }\n\n  get owner() {\n    return FiberNavigator.fromFiber(this.__fiber._debugOwner);\n  }\n\n  get domNode() {\n    let fiber = this.__fiber;\n\n    do {\n      if (isDOMNode(fiber.stateNode)) {\n        return fiber.stateNode;\n      }\n      fiber = fiber.child;\n    } while (fiber);\n\n    return null;\n  }\n\n  get instance() {\n    if (this.isClassComponent) {\n      return this.__fiber.stateNode;\n    }\n\n    if (this.isFunctionComponent || this.isForwardRef) {\n      // assumes functional component w/useRef\n      return this.findDebugHookState(this.__fiber.memoizedState);\n    }\n\n    return null;\n  }\n\n  get props() {\n    return this.__fiber.memoizedProps;\n  }\n\n  get state() {\n    return this.__fiber.memoizedState;\n  }\n\n  /**\n   * Hooks state is represented by a recursive structure where:\n   * - `memoizedState` is a current value if applicable\n   * - `next` is next hook in order\n   * @param node - fiber\n   */\n  findDebugHookState(node) {\n    if (node && node.memoizedState && node.memoizedState.current && node.memoizedState.current.fluentUIDebug) {\n      return node.memoizedState.current;\n    }\n\n    if (node === null || node.next === null) {\n      return null;\n    }\n\n    return this.findDebugHookState(node.next);\n  }\n\n  get reactComponent() {\n    return this.isHostComponent ? this.owner.elementType : this.elementType;\n  }\n\n  get elementType() {\n    return this.__fiber.elementType;\n  }\n\n  get fluentUIDebug() {\n    return this.instance && this.instance.fluentUIDebug ? this.instance.fluentUIDebug : null;\n  }\n\n  get jsxString() {\n    return `<${this.name} />`;\n  }\n\n  //\n  // Methods\n  //\n\n  isEqual(fiberNav: FiberNavigator) {\n    // TODO: do equality check on __fiber instead, however, see fromFiber TODO :/\n    return !!fiberNav && fiberNav.instance === this.instance;\n  }\n\n  find(condition, move) {\n    let fiber: FiberNavigator = FiberNavigator.fromFiber(this.__fiber);\n\n    while (fiber) {\n      if (condition(fiber)) {\n        return fiber;\n      }\n      fiber = move(fiber);\n    }\n\n    return null;\n  }\n\n  findOwner(condition) {\n    return this.find(condition, fiber => fiber.owner);\n  }\n\n  findParent(condition) {\n    return this.find(condition, fiber => fiber.parent);\n  }\n\n  //\n  // Component Types\n  //\n\n  get isClassComponent() {\n    // React.Component subclasses have this flag\n    // https://reactjs.org/docs/implementation-notes.html\n    return typeof this.__fiber.type === 'function' && !!this.__fiber.type.prototype.isReactComponent;\n  }\n\n  get isFunctionComponent() {\n    // React.Component subclasses have this flag\n    // https://reactjs.org/docs/implementation-notes.html\n    return typeof this.__fiber.type === 'function' && !this.__fiber.type.prototype.isReactComponent;\n  }\n\n  get isForwardRef() {\n    return this.__fiber.type?.$$typeof === ForwardRef;\n  }\n\n  get isHostComponent() {\n    // Host components are platform components (i.e. 'div' on web)\n    // https://github.com/acdlite/react-fiber-architecture#type-and-key\n    return typeof this.__fiber.type === 'string';\n  }\n\n  //\n  // What this fiber component renders\n  //\n\n  get isDOMComponent() {\n    return !!this.__fiber.child && FiberNavigator.fromFiber(this.__fiber.child).isHostComponent;\n  }\n\n  // https://github.com/facebook/react/blob/16.8.6/packages/react-dom/src/test-utils/ReactTestUtils.js#L193\n  get isCompositeComponent() {\n    return this.isDOMComponent ? false : !!this.instance && !!this.instance.render && !!this.instance.setState;\n  }\n}\n"],"file":"FiberNavigator.js"}