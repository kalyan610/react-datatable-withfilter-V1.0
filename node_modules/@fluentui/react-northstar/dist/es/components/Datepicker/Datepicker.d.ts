import { Accessibility, DatepickerBehaviorProps } from '@fluentui/accessibility';
import { ICalendarStrings, IDatepickerOptions } from '../../utils/date-time-utilities';
import { ComponentWithAs } from '@fluentui/react-bindings';
import { ComponentEventHandler, FluentComponentStaticProps, ShorthandValue } from '../../types';
import { UIComponentProps } from '../../utils';
import { Input, InputProps } from '../Input/Input';
import { PopupProps } from '../Popup/Popup';
import { DatepickerCalendar, DatepickerCalendarProps } from './DatepickerCalendar';
import { DatepickerCalendarCell } from './DatepickerCalendarCell';
import { DatepickerCalendarCellButton } from './DatepickerCalendarCellButton';
import { DatepickerCalendarHeader } from './DatepickerCalendarHeader';
import { DatepickerCalendarHeaderAction } from './DatepickerCalendarHeaderAction';
import { DatepickerCalendarHeaderCell } from './DatepickerCalendarHeaderCell';
import { DatepickerCalendarGrid } from './DatepickerCalendarGrid';
import { DatepickerCalendarGridRow } from './DatepickerCalendarGridRow';
export interface DatepickerProps extends UIComponentProps, Partial<ICalendarStrings>, Partial<IDatepickerOptions> {
    /** Accessibility behavior if overridden by the user. */
    accessibility?: Accessibility<DatepickerBehaviorProps>;
    /** Shorthand for the datepicker calendar. */
    calendar?: ShorthandValue<DatepickerCalendarProps>;
    /** Shorthand for the datepicker popup. */
    popup?: ShorthandValue<PopupProps>;
    /** Shorthand for the date text input. */
    input?: ShorthandValue<InputProps>;
    /** Datepicker shows it is currently unable to be interacted with. */
    disabled?: boolean;
    /** Date needs to be entered, otherwise datepicker produces an error state. */
    required?: boolean;
    /**
     * Called on change of the date.
     *
     * @param event - React's original SyntheticEvent.
     * @param data - All props and proposed value.
     */
    onDateChange?: ComponentEventHandler<DatepickerProps & {
        value: Date;
    }>;
    /**
     * Called on error when changing the date.
     *
     * @param event - React's original SyntheticEvent.
     * @param data - All props and proposed value.
     */
    onDateChangeError?: ComponentEventHandler<DatepickerProps & {
        error: string;
    }>;
    /** Target dates can be also entered through the input field. */
    allowManualInput?: boolean;
    /** The component automatically overrides faulty manual input upon blur. */
    fallbackToLastCorrectDateOnBlur?: boolean;
    /** Initial 'calendarOpenState' value. */
    defaultCalendarOpenState?: boolean;
    /** Controls the calendar's open state. */
    calendarOpenState?: boolean;
    /** Initial 'selectedDate' value. */
    defaultSelectedDate?: Date;
    /** Controls the calendar's 'selectedDate'. */
    selectedDate?: Date;
    /** Marks that the datepicker should only render the input field and not the trigger button with an icon. */
    inputOnly?: boolean;
    /** Marks that the datepicker should only render the trigger button with an icon and not the input field. */
    buttonOnly?: boolean;
}
export declare type DatepickerStylesProps = Pick<DatepickerProps, 'allowManualInput'>;
export declare const datepickerClassName = "ui-datepicker";
/**
 * A Datepicker is a control which is used to display dates grid and allow user to select them.
 */
export declare const Datepicker: ComponentWithAs<'div', DatepickerProps> & FluentComponentStaticProps<DatepickerProps> & {
    Calendar: typeof DatepickerCalendar;
    CalendarHeader: typeof DatepickerCalendarHeader;
    CalendarHeaderAction: typeof DatepickerCalendarHeaderAction;
    CalendarHeaderCell: typeof DatepickerCalendarHeaderCell;
    CalendarCell: typeof DatepickerCalendarCell;
    CalendarCellButton: typeof DatepickerCalendarCellButton;
    CalendarGrid: typeof DatepickerCalendarGrid;
    CalendarGridRow: typeof DatepickerCalendarGridRow;
    Input: typeof Input;
};
