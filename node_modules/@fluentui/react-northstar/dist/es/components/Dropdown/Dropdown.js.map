{"version":3,"sources":["components/Dropdown/Dropdown.tsx"],"names":["getElementType","useAutoControlled","useStyles","useUnhandledProps","useFluentContext","useTelemetry","handleRef","Ref","customPropTypes","indicatorBehavior","React","PropTypes","cx","getCode","keyboardKey","computeScrollIntoView","Downshift","commonPropTypes","isFromKeyboard","detectIsFromKeyboard","createShorthand","List","DropdownItem","DropdownSelectedItem","DropdownSearchInput","Button","screenReaderContainerStyles","Box","Portal","ALIGNMENTS","POSITIONS","Popper","partitionPopperPropsFromShorthand","dropdownClassName","dropdownSlotClassNames","clearIndicator","container","toggleIndicator","item","itemsList","searchInput","selectedItem","selectedItems","triggerButton","a11yStatusCleanupTime","charKeyPressedCleanupTime","normalizeValue","multiple","rawValue","normalizedValue","Array","isArray","slice","getFilteredValues","options","items","itemToString","itemToValue","search","searchQuery","value","filteredItemsByValue","filteredItemStrings","filteredItem","toLowerCase","filteredItems","filter","indexOf","isEmpty","prop","props","Dropdown","context","displayName","telemetry","setStart","setEnd","align","ariaLabelledby","clearable","checkable","checkableIndicator","className","design","disabled","error","fluid","getA11ySelectionMessage","getA11yStatusMessage","inline","inverted","highlightFirstItemOnOpen","headerMessage","moveFocusOnTab","noResultsMessage","loading","loadingMessage","placeholder","position","offset","renderItem","renderSelectedItem","styles","unstable_disableTether","unstable_pinned","variables","list","positioningProps","buttonRef","useRef","inputRef","listRef","selectedItemsRef","containerRef","defaultTriggerButtonId","useMemo","ElementType","unhandledProps","handledProps","defaultValue","defaultActiveSelectedIndex","initialValue","undefined","activeSelectedIndex","setActiveSelectedIndex","defaultHighlightedIndex","highlightedIndex","setHighlightedIndex","defaultOpen","open","setOpen","defaultSearchQuery","setSearchQuery","setValue","useState","a11ySelectionStatus","setA11ySelectionStatus","focused","setFocused","setIsFromKeyboard","itemIsFromKeyboard","setItemIsFromKeyboard","startingString","setStartingString","mapPropsToStyles","isEmptyClearIndicator","hasToggleIndicator","mapPropsToInlineStyles","rtl","classes","resolvedStyles","clearA11ySelectionMessage","clearStartingString","handleChange","e","handleOnBlur","target","current","renderTriggerButton","getToggleButtonProps","content","getSelectedItemAsString","triggerButtonId","triggerButtonProps","onFocus","handleTriggerButtonOrListFocus","onBlur","handleTriggerButtonBlur","onKeyDown","handleTriggerButtonKeyDown","l","join","onClick","restTriggerButtonProps","defaultProps","id","overrideProps","predefinedProps","renderSearchInput","accessibilityComboboxProps","getInputProps","selectItemAtIndex","toggleMenu","noPlaceholder","length","create","handleSearchInputOverrides","renderItemsList","getMenuProps","getItemProps","renderItems","refKey","suppressRefError","innerRef","accessibilityMenuProps","accessibilityInputProps","handleListKeyDown","listElement","tabIndex","listProps","handleListBlur","footerItem","renderItemsListFooter","headerItem","renderItemsListHeader","index","children","selected","active","hasOwnProperty","key","header","handleItemOverrides","render","push","renderSelectedItems","map","isSelectedItemActive","handleSelectedItemOverrides","downshiftStateReducer","state","changes","activeElement","type","stateChangeTypes","blurButton","isOpen","handleStateChange","newState","changeInput","shouldValueChange","inputValue","shouldMenuClose","keyDownEnter","clickItem","shouldAddHighlightedIndex","isSameItemSelected","newValue","onAdd","setA11ySelectionMessage","setTimeout","scrollTop","scrollHeight","tryFocusTriggerButton","keyDownEscape","keyDownArrowDown","keyDownArrowUp","highlightedIndexOnArrowKeyOpen","getHighlightedIndexOnArrowKeyOpen","focus","mouseUp","clickButton","keyDownSpaceButton","itemMouseEnter","unknown","handlers","Boolean","setStateAndInvokeHandler","accessibilityItemProps","stopPropagation","nativeEvent","stopImmediatePropagation","onRemove","dropdownSelectedItemProps","handleSelectedItemRemove","handleSelectedItemKeyDown","handleInputBlur","searchInputProps","handleInputKeyDown","Home","End","Tab","handleTabSelection","ArrowLeft","trySetLastSelectedItemAsActive","ArrowRight","Backspace","tryRemoveItemFromValue","Escape","onChange","node","onInputBlur","onInputKeyDown","preventDefault","selectionStart","selectionEnd","removeItemFromValue","handleClear","tryFocusSearchInput","handleContainerClick","accessibilityInputPropsKeyDown","keyCode","keyString","String","fromCharCode","test","setHighlightedIndexOnCharKeyDown","previousKey","nextKey","Delete","relatedTarget","newStartingString","newHighlightedIndex","startsWith","poppedItem","currentElement","pop","handlerNames","event","proposedValue","forEach","handlerName","isArrowUp","isArrowDown","itemsLength","useEffect","cancel","element","root","process","env","NODE_ENV","menu","nodeToScroll","actions","scrollMode","block","el","top","left","scrollLeft","defaultView","getRootProps","accessibilityRootPropsRest","showClearIndicator","accessibility","role","propTypes","createCommon","number","oneOf","bool","shorthandAllowingChildren","string","oneOfType","itemShorthand","collectionShorthand","object","func","arrayOf","onOpenChange","onSearchQueryChange","onActiveSelectedIndexChange","onHighlightedIndexChange","Object","keys","isValidElement","Item","SearchInput","SelectedItem"],"mappings":"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","sourcesContent":["import {\n  getElementType,\n  useAutoControlled,\n  useStyles,\n  useUnhandledProps,\n  ComponentWithAs,\n  useFluentContext,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { indicatorBehavior } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport cx from 'classnames';\nimport { getCode, keyboardKey } from '@fluentui/keyboard-key';\nimport computeScrollIntoView from 'compute-scroll-into-view';\n\nimport { ShorthandRenderFunction, ShorthandValue, ShorthandCollection, FluentComponentStaticProps } from '../../types';\nimport Downshift, {\n  DownshiftState,\n  StateChangeOptions,\n  A11yStatusMessageOptions,\n  GetMenuPropsOptions,\n  GetPropsCommonOptions,\n  GetInputPropsOptions,\n  GetToggleButtonPropsOptions,\n  GetItemPropsOptions,\n} from 'downshift';\nimport {\n  commonPropTypes,\n  UIComponentProps,\n  isFromKeyboard as detectIsFromKeyboard,\n  createShorthand,\n} from '../../utils';\nimport { List, ListProps } from '../List/List';\nimport { DropdownItem, DropdownItemProps } from './DropdownItem';\nimport { DropdownSelectedItem, DropdownSelectedItemProps } from './DropdownSelectedItem';\nimport { DropdownSearchInput, DropdownSearchInputProps } from './DropdownSearchInput';\nimport { Button, ButtonProps } from '../Button/Button';\nimport { screenReaderContainerStyles } from '../../utils/accessibility/Styles/accessibilityStyles';\nimport { Box, BoxProps } from '../Box/Box';\nimport { Portal } from '../Portal/Portal';\nimport {\n  ALIGNMENTS,\n  POSITIONS,\n  Popper,\n  PositioningProps,\n  PopperShorthandProps,\n  partitionPopperPropsFromShorthand,\n} from '../../utils/positioner';\n\nexport interface DownshiftA11yStatusMessageOptions<Item> extends Required<A11yStatusMessageOptions<Item>> {}\n\nexport interface DropdownSlotClassNames {\n  clearIndicator: string;\n  container: string;\n  toggleIndicator: string;\n  item: string;\n  itemsList: string;\n  searchInput: string;\n  selectedItem: string;\n  selectedItems: string;\n  triggerButton: string;\n}\n\nexport interface DropdownProps extends UIComponentProps<DropdownProps>, PositioningProps {\n  /** The index of the currently selected item, if the dropdown supports multiple selection. */\n  activeSelectedIndex?: number;\n\n  /** A dropdown item can show a check indicator if it is selected. */\n  checkable?: boolean;\n\n  /** A slot for a selected indicator in the dropdown list. */\n  checkableIndicator?: ShorthandValue<BoxProps>;\n\n  /** A dropdown can be clearable to let users remove their selection. */\n  clearable?: boolean;\n\n  /** A slot for the clearing indicator. */\n  clearIndicator?: ShorthandValue<BoxProps>;\n\n  /** The initial value for the index of the currently selected item in a multiple selection. */\n  defaultActiveSelectedIndex?: number;\n\n  /** The initial value for 'open' in uncontrolled mode. */\n  defaultOpen?: boolean;\n\n  /** The initial list item index to highlight. */\n  defaultHighlightedIndex?: number;\n\n  /** The initial value for the search query if the dropdown has `search` enabled. */\n  defaultSearchQuery?: string;\n\n  /** The initial value (or value array if the array has multiple selection). */\n  defaultValue?: ShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps>;\n\n  /** A dropdown can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** A dropdown can fill the width of its container. */\n  fluid?: boolean;\n\n  /** Object with callbacks for generating announcements for item selection and removal. */\n  getA11ySelectionMessage?: {\n    /**\n     * Callback that creates custom accessibility message a screen reader narrates on item added to selection.\n     * @param item - Dropdown added element.\n     */\n    onAdd?: (item: ShorthandValue<DropdownItemProps>) => string;\n    /**\n     * Callback that creates custom accessibility message a screen reader narrates on item removed from selection.\n     * @param item - Dropdown removed element.\n     */\n    onRemove?: (item: ShorthandValue<DropdownItemProps>) => string;\n  };\n\n  /**\n   * Callback that provides status announcement message with number of items in the list, using Arrow Up/Down keys to navigate through them and, if multiple, using Arrow Left/Right to navigate through selected items.\n   * @param messageGenerationProps - Object with properties to generate message from. See getA11yStatusMessage from Downshift repo.\n   */\n  getA11yStatusMessage?: (options: DownshiftA11yStatusMessageOptions<ShorthandValue<DropdownItemProps>>) => string;\n\n  /** A dropdown can highlight the first option when it opens. */\n  highlightFirstItemOnOpen?: boolean;\n\n  /** The index of the list item to highlight. */\n  highlightedIndex?: number;\n\n  /** A dropdown can be formatted to appear inline next to other elements. */\n  inline?: boolean;\n\n  /** A dropdown can have inverted colors. */\n  inverted?: boolean;\n\n  /** Array of props for generating list options (Dropdown.Item[]) and selected item labels (Dropdown.SelectedItem[]), if it's a multiple selection. */\n  items?: ShorthandCollection<DropdownItemProps>;\n\n  /**\n   * A function that converts an item to string. Used when dropdown has `search` enabled.\n   * By default, it:\n   * - returns the `header` property if it exists on an item\n   * - stringifies the item if it is a primitive type\n   */\n  itemToString?: (item: ShorthandValue<DropdownItemProps>) => string;\n\n  /** Used when comparing two items in multiple selection. Default comparison is by the header prop. */\n  itemToValue?: (item: ShorthandValue<DropdownItemProps>) => any;\n\n  /** A message to be displayed in the list header. */\n  headerMessage?: ShorthandValue<DropdownItemProps>;\n\n  /** A slot for dropdown list. */\n  list?: ShorthandValue<ListProps & { popper?: PopperShorthandProps }>;\n\n  /** A dropdown can show that it is currently loading data. */\n  loading?: boolean;\n\n  /** A message to be displayed in the list when the dropdown is loading. */\n  loadingMessage?: ShorthandValue<DropdownItemProps>;\n\n  /** When selecting an element with Tab, focus stays on the dropdown by default. If true, the focus will jump to next/previous element in DOM. Only available to multiple selection dropdowns. */\n  moveFocusOnTab?: boolean;\n\n  /** A dropdown can allow a user to select multiple items. */\n  multiple?: boolean;\n\n  /** A message to be displayed in the list when the dropdown has no items. */\n  noResultsMessage?: ShorthandValue<DropdownItemProps>;\n\n  /**\n   * Called when the dropdown's selected items index change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onActiveSelectedIndexChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's highlighted index change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onHighlightedIndexChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown opens or closes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `open` reflecting the new open state.\n   */\n  onOpenChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's search query changes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `searchQuery` reflecting its new value.\n   */\n  onSearchQueryChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's selected item(s) change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the focus moves out from dropdown.\n   * @param event - React's original SyntheticEvent.\n   */\n  onBlur?: (event: React.FocusEvent | null) => void;\n\n  /** A dropdown's open state can be controlled. */\n  open?: boolean;\n\n  /** A placeholder message for the input field. */\n  placeholder?: string;\n\n  /**\n   * A render function to customize how items are rendered in the dropdown.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItem?: ShorthandRenderFunction<DropdownItemProps>;\n\n  /**\n   * A custom render function for the selected item. Only applicable with the `multiple` prop.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderSelectedItem?: ShorthandRenderFunction<DropdownSelectedItemProps>;\n\n  /** A dropdown can have a search field instead of trigger button. Can receive a custom search function that will replace the default equivalent. */\n  search?:\n    | boolean\n    | ((items: ShorthandCollection<DropdownItemProps>, searchQuery: string) => ShorthandCollection<DropdownItemProps>);\n\n  /** A search dropdown's input can be customized. */\n  searchInput?: ShorthandValue<DropdownSearchInputProps>;\n\n  /** Sets search query value (controlled mode). */\n  searchQuery?: string;\n\n  /** Controls the appearance of the indicator that shows/hides the list of items. */\n  toggleIndicator?: ShorthandValue<BoxProps>;\n\n  /** Controls the appearance of the trigger button if it's a selection dropdown (not a search). */\n  triggerButton?: ShorthandValue<ButtonProps>;\n\n  /** Sets the dropdown's currently selected value(s) in controlled mode. */\n  value?: ShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps>;\n\n  /** Dropdown can have errors status  */\n  error?: boolean;\n}\n\nexport type DropdownStylesProps = Required<\n  Pick<DropdownProps, 'disabled' | 'error' | 'fluid' | 'inline' | 'inverted' | 'multiple' | 'position' | 'open'>\n> & {\n  focused: boolean;\n  isEmptyClearIndicator: boolean;\n  hasToggleIndicator: boolean;\n  isFromKeyboard: boolean;\n  search: boolean;\n};\n\ntype DropdownStateForInvoke = {\n  activeSelectedIndex?: number | null;\n  highlightedIndex?: number | null;\n  itemIsFromKeyboard?: boolean;\n  open?: boolean;\n  searchQuery?: string;\n  value?: ShorthandCollection<DropdownItemProps>;\n};\n\nexport const dropdownClassName = 'ui-dropdown';\nexport const dropdownSlotClassNames: DropdownSlotClassNames = {\n  clearIndicator: `${dropdownClassName}__clear-indicator`,\n  container: `${dropdownClassName}__container`,\n  toggleIndicator: `${dropdownClassName}__toggle-indicator`,\n  item: `${dropdownClassName}__item`,\n  itemsList: `${dropdownClassName}__items-list`,\n  searchInput: `${dropdownClassName}__searchinput`,\n  selectedItem: `${dropdownClassName}__selecteditem`,\n  selectedItems: `${dropdownClassName}__selected-items`,\n  triggerButton: `${dropdownClassName}__trigger-button`,\n};\n\nconst a11yStatusCleanupTime = 500;\nconst charKeyPressedCleanupTime = 500;\n\n/** `normalizedValue` should be normalized always as it can be received from props */\nfunction normalizeValue(multiple: boolean, rawValue: DropdownProps['value']): ShorthandCollection<DropdownItemProps> {\n  const normalizedValue = Array.isArray(rawValue) ? rawValue : [rawValue];\n\n  return multiple ? normalizedValue : normalizedValue.slice(0, 1);\n}\n\n/**\n * Used to compute the filtered items (by value and search query) and, if needed,\n * their string equivalents, in order to be used throughout the component.\n */\nfunction getFilteredValues(\n  options: Required<\n    Pick<DropdownProps, 'multiple' | 'items' | 'itemToValue' | 'itemToString' | 'search' | 'searchQuery'>\n  > & {\n    value: ShorthandCollection<DropdownItemProps>;\n  },\n) {\n  const { items, itemToString, itemToValue, multiple, search, searchQuery, value } = options;\n\n  const filteredItemsByValue = multiple ? _.differenceBy(items, value, itemToValue) : items;\n  const filteredItemStrings = _.map(filteredItemsByValue, filteredItem => itemToString(filteredItem).toLowerCase());\n\n  if (search) {\n    if (_.isFunction(search)) {\n      return {\n        filteredItems: search(filteredItemsByValue, searchQuery),\n        filteredItemStrings,\n      };\n    }\n\n    return {\n      filteredItems: filteredItemsByValue.filter(\n        item =>\n          itemToString(item)\n            .toLowerCase()\n            .indexOf(searchQuery.toLowerCase()) !== -1,\n      ),\n      filteredItemStrings,\n    };\n  }\n\n  return {\n    filteredItems: filteredItemsByValue,\n    filteredItemStrings,\n  };\n}\n\nconst isEmpty = prop => {\n  return typeof prop === 'object' && !prop.props && !_.get(prop, 'children') && !_.get(prop, 'content');\n};\n\n/**\n * A Dropdown allows user to select one or more values from a list of options.\n * Can be created with search and multi-selection capabilities.\n *\n * @accessibility\n * Implements [ARIA Combo Box](https://www.w3.org/TR/wai-aria-practices-1.1/#combobox) design pattern, uses aria-live to announce state changes.\n * @accessibilityIssues\n * [Issue 991203: VoiceOver doesn't narrate properly elements in the input/combobox](https://bugs.chromium.org/p/chromium/issues/detail?id=991203)\n */\nexport const Dropdown: ComponentWithAs<'div', DropdownProps> &\n  FluentComponentStaticProps<DropdownProps> & {\n    Item: typeof DropdownItem;\n    SearchInput: typeof DropdownSearchInput;\n    SelectedItem: typeof DropdownSelectedItem;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Dropdown.displayName, context.telemetry);\n\n  setStart();\n\n  const {\n    align,\n    'aria-labelledby': ariaLabelledby,\n    clearable,\n    clearIndicator,\n    checkable,\n    checkableIndicator,\n    className,\n    design,\n    disabled,\n    error,\n    fluid,\n    getA11ySelectionMessage,\n    getA11yStatusMessage,\n    inline,\n    inverted,\n    itemToString,\n    itemToValue,\n    items,\n    highlightFirstItemOnOpen,\n    multiple,\n    headerMessage,\n    moveFocusOnTab,\n    noResultsMessage,\n    loading,\n    loadingMessage,\n    placeholder,\n    position,\n    offset,\n    renderItem,\n    renderSelectedItem,\n    search,\n    searchInput,\n    styles,\n    toggleIndicator,\n    triggerButton,\n    unstable_disableTether,\n    unstable_pinned,\n    variables,\n  } = props;\n  const [list, positioningProps] = partitionPopperPropsFromShorthand(props.list);\n\n  const buttonRef = React.useRef<HTMLElement>();\n  const inputRef = React.useRef<HTMLInputElement | undefined>() as React.MutableRefObject<HTMLInputElement | undefined>;\n  const listRef = React.useRef<HTMLElement>();\n  const selectedItemsRef = React.useRef<HTMLDivElement>();\n  const containerRef = React.useRef<HTMLDivElement>();\n\n  const defaultTriggerButtonId = React.useMemo(() => _.uniqueId('dropdown-trigger-button-'), []);\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Dropdown.handledProps, props);\n\n  const [activeSelectedIndex, setActiveSelectedIndex] = useAutoControlled<number | null | undefined>({\n    defaultValue: props.defaultActiveSelectedIndex,\n    initialValue: multiple ? null : undefined,\n    value: props.activeSelectedIndex,\n  });\n  const [highlightedIndex, setHighlightedIndex] = useAutoControlled<number | null>({\n    defaultValue: props.defaultHighlightedIndex,\n    initialValue: highlightFirstItemOnOpen ? 0 : null,\n    value: props.highlightedIndex,\n  });\n  const [open, setOpen] = useAutoControlled({\n    defaultValue: props.defaultOpen,\n    initialValue: false,\n    value: props.open,\n  });\n  const [searchQuery, setSearchQuery] = useAutoControlled<string | undefined>({\n    defaultValue: props.defaultSearchQuery,\n    initialValue: search ? '' : undefined,\n    value: props.searchQuery,\n  });\n  const [rawValue, setValue] = useAutoControlled({\n    defaultValue: props.defaultValue,\n    initialValue: [],\n    value: props.value,\n  });\n  const value = normalizeValue(multiple, rawValue);\n\n  const [a11ySelectionStatus, setA11ySelectionStatus] = React.useState('');\n  const [focused, setFocused] = React.useState(false);\n  const [isFromKeyboard, setIsFromKeyboard] = React.useState(false);\n  const [itemIsFromKeyboard, setItemIsFromKeyboard] = React.useState(false);\n  const [startingString, setStartingString] = React.useState<string | undefined>(search ? undefined : '');\n\n  const { filteredItems, filteredItemStrings } = getFilteredValues({\n    itemToString,\n    itemToValue,\n    items,\n    multiple,\n    search,\n    searchQuery,\n    value,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<DropdownStylesProps>(Dropdown.displayName, {\n    className: dropdownClassName,\n    mapPropsToStyles: () => ({\n      disabled,\n      error,\n      fluid,\n      focused,\n      isEmptyClearIndicator: isEmpty(clearIndicator),\n      hasToggleIndicator: !!toggleIndicator,\n      inline,\n      inverted,\n      isFromKeyboard,\n      multiple,\n      open,\n      position,\n      search: !!search,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const clearA11ySelectionMessage = React.useMemo(\n    () =>\n      _.debounce(() => {\n        setA11ySelectionStatus('');\n      }, a11yStatusCleanupTime),\n    [],\n  );\n  const clearStartingString = React.useMemo(\n    () =>\n      _.debounce(() => {\n        setStartingString('');\n      }, charKeyPressedCleanupTime),\n    [],\n  );\n\n  const handleChange = (e: React.SyntheticEvent) => {\n    // Dropdown component doesn't present any `input` component in markup, however all of our\n    // components should handle events transparently.\n    _.invoke(props, 'onChange', e, { ...props, value });\n  };\n\n  const handleOnBlur = (e: React.SyntheticEvent) => {\n    // Dropdown component doesn't present any `input` component in markup, however all of our\n    // components should handle events transparently.\n    if (e.target !== buttonRef.current) {\n      _.invoke(props, 'onBlur', e, props);\n    }\n  };\n\n  const renderTriggerButton = (getToggleButtonProps: (options?: GetToggleButtonPropsOptions) => any): JSX.Element => {\n    const content = getSelectedItemAsString(value[0]);\n    const triggerButtonId = triggerButton['id'] || defaultTriggerButtonId;\n\n    const triggerButtonProps = getToggleButtonProps({\n      disabled,\n      onFocus: handleTriggerButtonOrListFocus,\n      onBlur: handleTriggerButtonBlur,\n      onKeyDown: e => {\n        handleTriggerButtonKeyDown(e);\n      },\n      'aria-label': undefined,\n      'aria-labelledby': [ariaLabelledby, triggerButtonId].filter(l => !!l).join(' '),\n    });\n\n    const { onClick, onFocus, onBlur, onKeyDown, ...restTriggerButtonProps } = triggerButtonProps;\n\n    return (\n      <Ref innerRef={buttonRef}>\n        {createShorthand(Button, triggerButton, {\n          defaultProps: () => ({\n            className: dropdownSlotClassNames.triggerButton,\n            content,\n            disabled,\n            id: triggerButtonId,\n            fluid: true,\n            styles: resolvedStyles.triggerButton,\n            ...restTriggerButtonProps,\n          }),\n          overrideProps: (predefinedProps: ButtonProps) => ({\n            onClick: e => {\n              onClick(e);\n              _.invoke(predefinedProps, 'onClick', e, predefinedProps);\n            },\n            onFocus: e => {\n              onFocus(e);\n              _.invoke(predefinedProps, 'onFocus', e, predefinedProps);\n            },\n            onBlur: e => {\n              if (!disabled) {\n                onBlur(e);\n              }\n\n              _.invoke(predefinedProps, 'onBlur', e, predefinedProps);\n            },\n            onKeyDown: e => {\n              if (!disabled) {\n                onKeyDown(e);\n              }\n\n              _.invoke(predefinedProps, 'onKeyDown', e, predefinedProps);\n            },\n          }),\n        })}\n      </Ref>\n    );\n  };\n\n  const renderSearchInput = (\n    accessibilityComboboxProps: Object,\n    highlightedIndex: number,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n    selectItemAtIndex: (index: number, otherStateToSet?: Partial<StateChangeOptions<any>>, cb?: () => void) => void,\n    toggleMenu: () => void,\n    variables,\n  ): JSX.Element => {\n    const noPlaceholder = searchQuery.length > 0 || (multiple && value.length > 0);\n\n    return DropdownSearchInput.create(searchInput || {}, {\n      defaultProps: () => ({\n        className: dropdownSlotClassNames.searchInput,\n        placeholder: noPlaceholder ? '' : placeholder,\n        inline,\n        variables,\n        disabled,\n      }),\n      overrideProps: handleSearchInputOverrides(\n        highlightedIndex,\n        selectItemAtIndex,\n        toggleMenu,\n        accessibilityComboboxProps,\n        getInputProps,\n      ),\n    });\n  };\n\n  const renderItemsList = (\n    highlightedIndex: number,\n    toggleMenu: () => void,\n    selectItemAtIndex: (index: number) => void,\n    getMenuProps: (options?: GetMenuPropsOptions, otherOptions?: GetPropsCommonOptions) => any,\n    getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n  ) => {\n    const items = open ? renderItems(getItemProps) : [];\n    const { innerRef, ...accessibilityMenuProps } = getMenuProps({ refKey: 'innerRef' }, { suppressRefError: true });\n\n    // If it's just a selection, some attributes and listeners from Downshift input need to go on the menu list.\n    if (!search) {\n      const accessibilityInputProps = getInputProps();\n\n      accessibilityMenuProps['aria-activedescendant'] = accessibilityInputProps['aria-activedescendant'];\n      accessibilityMenuProps['onKeyDown'] = e => {\n        handleListKeyDown(e, highlightedIndex, accessibilityInputProps['onKeyDown'], toggleMenu, selectItemAtIndex);\n      };\n    }\n\n    return (\n      <Ref\n        innerRef={(listElement: HTMLElement) => {\n          handleRef(listRef, listElement);\n          handleRef(innerRef, listElement);\n        }}\n      >\n        <Popper\n          align={align}\n          position={position}\n          offset={offset}\n          rtl={context.rtl}\n          enabled={open}\n          targetRef={containerRef}\n          unstable_disableTether={unstable_disableTether}\n          unstable_pinned={unstable_pinned}\n          positioningDependencies={[items.length]}\n          {...positioningProps}\n        >\n          {List.create(list, {\n            defaultProps: () => ({\n              className: dropdownSlotClassNames.itemsList,\n              ...accessibilityMenuProps,\n              styles: resolvedStyles.list,\n              items,\n              tabIndex: search ? undefined : -1, // needs to be focused when trigger button is activated.\n              'aria-hidden': !open,\n            }),\n\n            overrideProps: (predefinedProps: ListProps) => ({\n              onFocus: (e: React.SyntheticEvent<HTMLElement>, listProps: ListProps) => {\n                handleTriggerButtonOrListFocus();\n                _.invoke(predefinedProps, 'onClick', e, listProps);\n              },\n              onBlur: (e: React.SyntheticEvent<HTMLElement>, listProps: ListProps) => {\n                handleListBlur(e);\n                _.invoke(predefinedProps, 'onBlur', e, listProps);\n              },\n            }),\n          })}\n        </Popper>\n      </Ref>\n    );\n  };\n\n  const renderItems = (getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any) => {\n    const footerItem = renderItemsListFooter();\n    const headerItem = renderItemsListHeader();\n\n    const items = _.map(filteredItems, (item, index) => ({\n      children: () => {\n        const selected = value.indexOf(item) !== -1;\n\n        return DropdownItem.create(item, {\n          defaultProps: () => ({\n            className: dropdownSlotClassNames.item,\n            active: highlightedIndex === index,\n            selected,\n            checkable,\n            checkableIndicator,\n            isFromKeyboard: itemIsFromKeyboard,\n            variables,\n            ...(typeof item === 'object' &&\n              !item.hasOwnProperty('key') && {\n                key: (item as any).header,\n              }),\n          }),\n          overrideProps: handleItemOverrides(item, index, getItemProps, selected),\n          render: renderItem,\n        });\n      },\n    }));\n\n    if (footerItem) {\n      items.push(footerItem);\n    }\n\n    return headerItem ? [headerItem, ...items] : items;\n  };\n\n  const renderItemsListHeader = () => {\n    if (headerMessage) {\n      return {\n        children: () =>\n          DropdownItem.create(headerMessage, {\n            defaultProps: () => ({\n              key: 'items-list-footer-message',\n              styles: resolvedStyles.headerMessage,\n            }),\n          }),\n      };\n    }\n\n    return null;\n  };\n\n  const renderItemsListFooter = () => {\n    if (loading) {\n      return {\n        children: () =>\n          DropdownItem.create(loadingMessage, {\n            defaultProps: () => ({\n              key: 'loading-message',\n              styles: resolvedStyles.loadingMessage,\n            }),\n          }),\n      };\n    }\n\n    if (filteredItems && filteredItems.length === 0) {\n      return {\n        children: () =>\n          DropdownItem.create(noResultsMessage, {\n            defaultProps: () => ({\n              key: 'no-results-message',\n              styles: resolvedStyles.noResultsMessage,\n            }),\n          }),\n      };\n    }\n\n    return null;\n  };\n\n  const renderSelectedItems = () => {\n    if (value.length === 0) {\n      return null;\n    }\n\n    return value.map((item: DropdownItemProps, index) =>\n      // (!) an item matches DropdownItemProps\n      DropdownSelectedItem.create(item, {\n        defaultProps: () => ({\n          className: dropdownSlotClassNames.selectedItem,\n          active: isSelectedItemActive(index),\n          variables,\n          ...(typeof item === 'object' &&\n            !item.hasOwnProperty('key') && {\n              key: (item as any).header,\n            }),\n        }),\n        overrideProps: handleSelectedItemOverrides(item),\n        render: renderSelectedItem,\n      }),\n    );\n  };\n\n  const downshiftStateReducer = (\n    state: DownshiftState<ShorthandValue<DropdownItemProps>>,\n    changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>,\n  ) => {\n    const activeElement: Element = context.target.activeElement;\n\n    switch (changes.type) {\n      case Downshift.stateChangeTypes.blurButton:\n        // Downshift closes the list by default on trigger blur. It does not support the case when dropdown is\n        // single selection and focuses list on trigger click/up/down/space/enter. Treating that here.\n        if (state.isOpen && activeElement === listRef.current) {\n          return {}; // won't change state in this case.\n        }\n        _.invoke(props, 'onBlur', null);\n      default:\n        return changes;\n    }\n  };\n\n  const handleStateChange = (changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>) => {\n    const { type } = changes;\n    const newState = {} as DropdownStateForInvoke;\n\n    switch (type) {\n      case Downshift.stateChangeTypes.changeInput: {\n        const shouldValueChange = changes.inputValue === '' && !multiple && value.length > 0;\n        newState.searchQuery = changes.inputValue;\n        newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n\n        if (shouldValueChange) {\n          newState.value = [];\n        }\n\n        if (open) {\n          // we clear value when in single selection user cleared the query.\n          const shouldMenuClose = changes.inputValue === '' || changes.selectedItem !== undefined;\n\n          if (shouldMenuClose) {\n            newState.open = false;\n          }\n        } else {\n          newState.open = true;\n        }\n\n        break;\n      }\n      case Downshift.stateChangeTypes.keyDownEnter:\n      case Downshift.stateChangeTypes.clickItem:\n        const shouldAddHighlightedIndex = !multiple && items && items.length > 0;\n        const isSameItemSelected = changes.selectedItem === undefined;\n        const newValue = isSameItemSelected ? value[0] : changes.selectedItem;\n\n        newState.searchQuery = getSelectedItemAsString(newValue);\n        newState.open = false;\n        newState.highlightedIndex = shouldAddHighlightedIndex ? items.indexOf(newValue) : null;\n\n        if (!isSameItemSelected) {\n          newState.value = multiple ? [...value, changes.selectedItem] : [changes.selectedItem];\n\n          if (getA11ySelectionMessage && getA11ySelectionMessage.onAdd) {\n            setA11ySelectionMessage(getA11ySelectionMessage.onAdd(newValue));\n          }\n        }\n\n        if (multiple) {\n          setTimeout(() => (selectedItemsRef.current.scrollTop = selectedItemsRef.current.scrollHeight), 0);\n        }\n\n        tryFocusTriggerButton();\n\n        break;\n      case Downshift.stateChangeTypes.keyDownEscape:\n        if (search) {\n          newState.searchQuery = '';\n\n          if (!multiple) {\n            newState.value = [];\n          }\n        }\n        newState.open = false;\n        newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n        break;\n      case Downshift.stateChangeTypes.keyDownArrowDown:\n      case Downshift.stateChangeTypes.keyDownArrowUp:\n        if (changes.isOpen !== undefined) {\n          newState.open = changes.isOpen;\n          newState.highlightedIndex = changes.highlightedIndex;\n\n          if (changes.isOpen) {\n            const highlightedIndexOnArrowKeyOpen = getHighlightedIndexOnArrowKeyOpen(changes);\n\n            if (_.isNumber(highlightedIndexOnArrowKeyOpen)) {\n              newState.highlightedIndex = highlightedIndexOnArrowKeyOpen;\n            }\n\n            if (!search) {\n              listRef.current.focus();\n            }\n          } else {\n            newState.highlightedIndex = null;\n          }\n        }\n      case Downshift.stateChangeTypes['keyDownHome']:\n      case Downshift.stateChangeTypes['keyDownEnd']:\n        if (open && _.isNumber(changes.highlightedIndex)) {\n          newState.highlightedIndex = changes.highlightedIndex;\n          newState.itemIsFromKeyboard = true;\n        }\n\n        break;\n      case Downshift.stateChangeTypes.mouseUp:\n        if (open) {\n          newState.open = false;\n          newState.highlightedIndex = null;\n        }\n\n        break;\n      case Downshift.stateChangeTypes.clickButton:\n      case Downshift.stateChangeTypes.keyDownSpaceButton:\n        newState.open = changes.isOpen;\n\n        if (changes.isOpen) {\n          const highlightedIndexOnArrowKeyOpen = getHighlightedIndexOnArrowKeyOpen(changes);\n\n          if (_.isNumber(highlightedIndexOnArrowKeyOpen)) {\n            newState.highlightedIndex = highlightedIndexOnArrowKeyOpen;\n          }\n\n          if (!search) {\n            listRef.current.focus();\n          }\n        } else {\n          newState.highlightedIndex = null;\n        }\n        break;\n      case Downshift.stateChangeTypes.itemMouseEnter:\n        newState.highlightedIndex = changes.highlightedIndex;\n        newState.itemIsFromKeyboard = false;\n        break;\n      case Downshift.stateChangeTypes.unknown:\n        if (changes.selectedItem) {\n          newState.value = multiple ? [...value, changes.selectedItem] : [changes.selectedItem];\n          newState.searchQuery = multiple ? '' : changes.inputValue;\n          newState.open = false;\n          newState.highlightedIndex = changes.highlightedIndex;\n\n          tryFocusTriggerButton();\n        } else {\n          newState.open = changes.isOpen;\n        }\n      default:\n        break;\n    }\n\n    if (_.isEmpty(newState)) {\n      return;\n    }\n\n    const handlers: (keyof DropdownProps)[] = [\n      newState.highlightedIndex !== undefined && 'onHighlightedIndexChange',\n      newState.open !== undefined && 'onOpenChange',\n      newState.searchQuery !== undefined && 'onSearchQueryChange',\n      newState.value !== undefined && 'onChange',\n    ].filter(Boolean) as (keyof DropdownProps)[];\n\n    setStateAndInvokeHandler(handlers, null, newState);\n  };\n\n  const isSelectedItemActive = (index: number): boolean => {\n    return index === activeSelectedIndex;\n  };\n\n  const handleItemOverrides = (\n    item: ShorthandValue<DropdownItemProps>,\n    index: number,\n    getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any,\n    selected: boolean,\n  ) => (predefinedProps: DropdownItemProps) => ({\n    accessibilityItemProps: {\n      ...getItemProps({\n        item,\n        index,\n        disabled: item['disabled'],\n        onClick: e => {\n          e.stopPropagation();\n          e.nativeEvent.stopImmediatePropagation();\n          _.invoke(predefinedProps, 'onClick', e, predefinedProps);\n        },\n      }),\n      // for single selection the selected item should have aria-selected, instead of the highlighted\n      ...(!multiple && {\n        'aria-selected': selected,\n      }),\n    },\n  });\n\n  const handleSelectedItemOverrides = (item: ShorthandValue<DropdownItemProps>) => (\n    predefinedProps: DropdownSelectedItemProps,\n  ) => ({\n    onRemove: (e: React.SyntheticEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n    },\n    onClick: (e: React.SyntheticEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n        activeSelectedIndex: value.indexOf(item),\n      });\n      e.stopPropagation();\n      _.invoke(predefinedProps, 'onClick', e, dropdownSelectedItemProps);\n    },\n    onKeyDown: (e: React.KeyboardEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      handleSelectedItemKeyDown(e, item, predefinedProps, dropdownSelectedItemProps);\n    },\n  });\n\n  const handleSearchInputOverrides = (\n    highlightedIndex: number,\n    selectItemAtIndex: (index: number, otherStateToSet?: Partial<StateChangeOptions<any>>, cb?: () => void) => void,\n    toggleMenu: () => void,\n    accessibilityComboboxProps: Object,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n  ) => (predefinedProps: DropdownSearchInputProps) => {\n    const handleInputBlur = (e: React.SyntheticEvent, searchInputProps: DropdownSearchInputProps) => {\n      if (!disabled) {\n        setFocused(false);\n        setIsFromKeyboard(detectIsFromKeyboard());\n\n        e.nativeEvent['preventDownshiftDefault'] = true;\n      }\n\n      _.invoke(predefinedProps, 'onInputBlur', e, searchInputProps);\n    };\n\n    const handleInputKeyDown = (\n      e: React.KeyboardEvent<HTMLInputElement>,\n      searchInputProps: DropdownSearchInputProps,\n    ) => {\n      if (!disabled) {\n        switch (getCode(e)) {\n          // https://github.com/downshift-js/downshift/issues/1097\n          // Downshift skips Home/End if Deopdown is opened\n          case keyboardKey.Home:\n            e.nativeEvent['preventDownshiftDefault'] = filteredItems.length === 0;\n            break;\n          case keyboardKey.End:\n            e.nativeEvent['preventDownshiftDefault'] = filteredItems.length === 0;\n            break;\n          case keyboardKey.Tab:\n            e.stopPropagation();\n            handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n            break;\n          case keyboardKey.ArrowLeft:\n            e.stopPropagation();\n            if (!context.rtl) {\n              trySetLastSelectedItemAsActive();\n            }\n            break;\n          case keyboardKey.ArrowRight:\n            e.stopPropagation();\n            if (context.rtl) {\n              trySetLastSelectedItemAsActive();\n            }\n            break;\n          case keyboardKey.Backspace:\n            e.stopPropagation();\n            tryRemoveItemFromValue();\n            break;\n          case keyboardKey.Escape:\n            // If dropdown list is open ESC should close it and not propagate to the parent\n            // otherwise event should propagate\n            if (open) {\n              e.stopPropagation();\n            }\n          default:\n            break;\n        }\n      }\n\n      _.invoke(predefinedProps, 'onInputKeyDown', e, {\n        ...searchInputProps,\n        highlightedIndex,\n        selectItemAtIndex,\n      });\n    };\n\n    return {\n      // getInputProps adds Downshift handlers. We also add our own by passing them as params to that function.\n      // user handlers were also added to our handlers previously, at the beginning of this function.\n      accessibilityInputProps: {\n        ...getInputProps({\n          disabled,\n          onBlur: e => {\n            handleInputBlur(e, predefinedProps);\n          },\n          onKeyDown: e => {\n            handleInputKeyDown(e, predefinedProps);\n          },\n          onChange: (e: React.ChangeEvent<HTMLInputElement>) => {\n            // we prevent the onChange input event to bubble up to our Dropdown handler,\n            // since in Dropdown it gets handled as onSearchQueryChange.\n            e.stopPropagation();\n\n            // A state modification should be triggered there otherwise it will go to an another frame and will break\n            // cursor position:\n            // https://github.com/facebook/react/issues/955#issuecomment-469352730\n            setSearchQuery(e.target.value);\n          },\n        }),\n      },\n      // same story as above for getRootProps.\n      accessibilityComboboxProps,\n\n      inputRef: (node: HTMLInputElement) => {\n        handleRef(predefinedProps.inputRef, node);\n        inputRef.current = node;\n      },\n      onFocus: (e: React.FocusEvent, searchInputProps: DropdownSearchInputProps) => {\n        if (!disabled) {\n          setFocused(true);\n          setIsFromKeyboard(detectIsFromKeyboard());\n        }\n\n        _.invoke(predefinedProps, 'onFocus', e, searchInputProps);\n      },\n      onInputBlur: (e: React.FocusEvent, searchInputProps: DropdownSearchInputProps) => {\n        handleInputBlur(e, searchInputProps);\n      },\n      onInputKeyDown: (e: React.KeyboardEvent<HTMLInputElement>, searchInputProps: DropdownSearchInputProps) => {\n        handleInputKeyDown(e, searchInputProps);\n      },\n    };\n  };\n\n  /**\n   * Custom Tab selection logic, at least until Downshift will implement selection on blur.\n   * Also keeps focus on multiple selection dropdown when selecting by Tab.\n   */\n  const handleTabSelection = (\n    e: React.SyntheticEvent,\n    highlightedIndex: number,\n    selectItemAtIndex: (highlightedIndex: number) => void,\n    toggleMenu: () => void,\n  ): void => {\n    if (open) {\n      if (!_.isNil(highlightedIndex) && filteredItems.length && !items[highlightedIndex]['disabled']) {\n        selectItemAtIndex(highlightedIndex);\n\n        if (multiple && !moveFocusOnTab) {\n          e.preventDefault();\n        }\n      } else {\n        toggleMenu();\n      }\n    }\n  };\n\n  const trySetLastSelectedItemAsActive = () => {\n    if (!multiple || (inputRef.current && inputRef.current.selectionStart !== 0)) {\n      return;\n    }\n\n    if (value.length > 0) {\n      // If last element was already active, perform a 'reset' of activeSelectedIndex.\n      if (activeSelectedIndex === value.length - 1) {\n        setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n          activeSelectedIndex: value.length - 1,\n        });\n      } else {\n        setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n          activeSelectedIndex: value.length - 1,\n        });\n      }\n    }\n  };\n\n  const tryRemoveItemFromValue = () => {\n    if (\n      multiple &&\n      (searchQuery === '' || (inputRef.current.selectionStart === 0 && inputRef.current.selectionEnd === 0)) &&\n      value.length > 0\n    ) {\n      removeItemFromValue();\n    }\n  };\n\n  const handleClear = (e: React.SyntheticEvent<HTMLElement>) => {\n    setStateAndInvokeHandler(['onChange', 'onActiveSelectedIndexChange', 'onHighlightedIndexChange'], e, {\n      activeSelectedIndex: multiple ? null : undefined,\n      highlightedIndex: highlightFirstItemOnOpen ? 0 : null,\n      open: false,\n      searchQuery: search ? '' : undefined,\n      value: [],\n    });\n\n    tryFocusSearchInput();\n    tryFocusTriggerButton();\n  };\n\n  const handleContainerClick = () => {\n    tryFocusSearchInput();\n  };\n\n  const handleTriggerButtonKeyDown = (e: React.KeyboardEvent) => {\n    switch (getCode(e)) {\n      case keyboardKey.ArrowLeft:\n        if (!context.rtl) {\n          trySetLastSelectedItemAsActive();\n        }\n        return;\n      case keyboardKey.ArrowRight:\n        if (context.rtl) {\n          trySetLastSelectedItemAsActive();\n        }\n        return;\n      default:\n        return;\n    }\n  };\n\n  const handleListKeyDown = (\n    e: React.KeyboardEvent,\n    highlightedIndex: number,\n    accessibilityInputPropsKeyDown: (e) => any,\n    toggleMenu: () => void,\n    selectItemAtIndex: (index: number) => void,\n  ) => {\n    const keyCode = getCode(e);\n    switch (keyCode) {\n      case keyboardKey.Tab:\n        handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n        return;\n      case keyboardKey.Escape:\n        accessibilityInputPropsKeyDown(e);\n        tryFocusTriggerButton();\n        e.stopPropagation();\n        return;\n      default:\n        const keyString = String.fromCharCode(keyCode);\n        if (/[a-zA-Z0-9]/.test(keyString)) {\n          setHighlightedIndexOnCharKeyDown(keyString);\n        }\n        accessibilityInputPropsKeyDown(e);\n        return;\n    }\n  };\n\n  const handleSelectedItemKeyDown = (\n    e: React.KeyboardEvent,\n    item: ShorthandValue<DropdownItemProps>,\n    predefinedProps: DropdownSelectedItemProps,\n    dropdownSelectedItemProps: DropdownSelectedItemProps,\n  ) => {\n    const previousKey = context.rtl ? keyboardKey.ArrowRight : keyboardKey.ArrowLeft;\n    const nextKey = context.rtl ? keyboardKey.ArrowLeft : keyboardKey.ArrowRight;\n\n    switch (getCode(e)) {\n      case keyboardKey.Delete:\n      case keyboardKey.Backspace:\n        handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n        break;\n      case previousKey:\n        if (value.length > 0 && !_.isNil(activeSelectedIndex) && activeSelectedIndex > 0) {\n          setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n            activeSelectedIndex: activeSelectedIndex - 1,\n          });\n        }\n        break;\n      case nextKey:\n        if (value.length > 0 && !_.isNil(activeSelectedIndex)) {\n          if (activeSelectedIndex < value.length - 1) {\n            setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n              activeSelectedIndex: activeSelectedIndex + 1,\n            });\n          } else {\n            setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n              activeSelectedIndex: null,\n            });\n\n            if (search) {\n              e.preventDefault(); // prevents caret to forward one position in input.\n              inputRef.current.focus();\n            } else {\n              buttonRef.current.focus();\n            }\n          }\n        }\n        break;\n      default:\n        break;\n    }\n    _.invoke(predefinedProps, 'onKeyDown', e, dropdownSelectedItemProps);\n  };\n\n  const handleTriggerButtonOrListFocus = () => {\n    setFocused(true);\n    setIsFromKeyboard(detectIsFromKeyboard());\n  };\n\n  const handleTriggerButtonBlur = e => {\n    if (listRef.current !== e.relatedTarget) {\n      setFocused(false);\n      setIsFromKeyboard(detectIsFromKeyboard());\n    }\n  };\n\n  const handleListBlur = e => {\n    if (buttonRef.current !== e.relatedTarget) {\n      setFocused(false);\n      setIsFromKeyboard(detectIsFromKeyboard());\n    }\n  };\n\n  /**\n   * Sets highlightedIndex to be the item that starts with the character keys the\n   * user has typed. Only used in non-search dropdowns.\n   *\n   * @param keystring - The string the item needs to start with. It is composed by typing keys in fast succession.\n   */\n  const setHighlightedIndexOnCharKeyDown = (keyString: string): void => {\n    const newStartingString = `${startingString}${keyString.toLowerCase()}`;\n    let newHighlightedIndex = -1;\n\n    setStartingString(newStartingString);\n    clearStartingString();\n\n    if (_.isNumber(highlightedIndex)) {\n      newHighlightedIndex = _.findIndex(\n        filteredItemStrings,\n        item => item.startsWith(newStartingString),\n        highlightedIndex + (startingString.length > 0 ? 0 : 1),\n      );\n    }\n\n    if (newHighlightedIndex < 0) {\n      newHighlightedIndex = _.findIndex(filteredItemStrings, item => item.startsWith(newStartingString));\n    }\n\n    if (newHighlightedIndex >= 0) {\n      setStateAndInvokeHandler(['onHighlightedIndexChange'], null, {\n        highlightedIndex: newHighlightedIndex,\n      });\n    }\n  };\n\n  const handleSelectedItemRemove = (\n    e: React.SyntheticEvent,\n    item: ShorthandValue<DropdownItemProps>,\n    predefinedProps: DropdownSelectedItemProps,\n    dropdownSelectedItemProps: DropdownSelectedItemProps,\n  ) => {\n    setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n      activeSelectedIndex: null,\n    });\n    removeItemFromValue(item);\n    tryFocusSearchInput();\n    tryFocusTriggerButton();\n    _.invoke(predefinedProps, 'onRemove', e, dropdownSelectedItemProps);\n  };\n\n  const removeItemFromValue = (item?: ShorthandValue<DropdownItemProps>) => {\n    let poppedItem = item;\n    let newValue = [...value];\n\n    if (poppedItem) {\n      newValue = newValue.filter(currentElement => currentElement !== item);\n    } else {\n      poppedItem = newValue.pop();\n    }\n\n    if (getA11ySelectionMessage && getA11ySelectionMessage.onRemove) {\n      setA11ySelectionMessage(getA11ySelectionMessage.onRemove(poppedItem));\n    }\n\n    setStateAndInvokeHandler(['onChange'], null, { value: newValue });\n  };\n\n  /**\n   * Calls setState and invokes event handler exposed to user.\n   * We don't have the event object for most events coming from Downshift se we send an empty event\n   * because we want to keep the event handling interface\n   */\n  const setStateAndInvokeHandler = (\n    handlerNames: (keyof DropdownProps)[],\n    event: React.SyntheticEvent<HTMLElement>,\n    newState: DropdownStateForInvoke,\n  ) => {\n    const proposedValue = _.isNil(newState.value) ? value : newState.value;\n    // `proposedValue` should be normalized for single/multiple variations, `null` condition is\n    // required as first item can be undefined\n    const newValue = multiple ? proposedValue : proposedValue[0] || null;\n\n    if (newState.hasOwnProperty('activeSelectedIndex')) {\n      setActiveSelectedIndex(newState.activeSelectedIndex);\n    }\n    if (newState.hasOwnProperty('highlightedIndex')) {\n      setHighlightedIndex(newState.highlightedIndex);\n    }\n    if (newState.hasOwnProperty('itemIsFromKeyboard')) {\n      setItemIsFromKeyboard(newState.itemIsFromKeyboard);\n    }\n    if (newState.hasOwnProperty('open')) {\n      setOpen(newState.open);\n    }\n    if (newState.hasOwnProperty('searchQuery')) {\n      setSearchQuery(newState.searchQuery);\n    }\n    if (newState.hasOwnProperty('value')) {\n      setValue(newState.value);\n    }\n\n    handlerNames.forEach(handlerName => {\n      _.invoke(props, handlerName, event, { ...props, ...newState, value: newValue });\n    });\n  };\n\n  const tryFocusTriggerButton = () => {\n    if (!search && buttonRef.current) {\n      buttonRef.current.focus();\n    }\n  };\n\n  const tryFocusSearchInput = () => {\n    if (search && inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  /**\n   * If there is no value we use the placeholder value\n   * otherwise, for single selection we convert the value with itemToString\n   * and for multiple selection we return empty string, the values are rendered by renderSelectedItems\n   */\n  const getSelectedItemAsString = (value: ShorthandValue<DropdownItemProps>): string => {\n    if (!value) {\n      return search ? '' : placeholder;\n    }\n\n    if (multiple) {\n      return '';\n    }\n\n    return itemToString(value);\n  };\n\n  const getHighlightedIndexOnArrowKeyOpen = (\n    changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>,\n  ): number => {\n    const isArrowUp = changes.type === Downshift.stateChangeTypes.keyDownArrowUp;\n    const isArrowDown = changes.type === Downshift.stateChangeTypes.keyDownArrowDown;\n    const itemsLength = filteredItems.length;\n\n    if (highlightedIndex) {\n      return highlightedIndex;\n    }\n\n    if (highlightFirstItemOnOpen) {\n      // otherwise, if highlightFirstItemOnOpen prop is provied, highlight first item.\n      return 0;\n    }\n\n    if (!multiple && !search && value.length > 0) {\n      // in single selection, if there is a selected item, highlight it.\n      const offset = isArrowUp ? -1 : isArrowDown ? 1 : 0;\n      const newHighlightedIndex = items.indexOf(value[0]) + offset;\n      if (newHighlightedIndex >= itemsLength) {\n        return 0;\n      }\n      if (newHighlightedIndex < 0) {\n        return itemsLength - 1;\n      }\n      return newHighlightedIndex;\n    }\n\n    if (isArrowDown) {\n      return 0;\n    }\n    if (isArrowUp) {\n      return itemsLength - 1;\n    }\n\n    return null;\n  };\n\n  /**\n   * Function that sets and cleans the selection message after it has been set,\n   * so it is not read anymore via virtual cursor.\n   */\n  const setA11ySelectionMessage = (a11ySelectionStatus: string): void => {\n    setA11ySelectionStatus(a11ySelectionStatus);\n    clearA11ySelectionMessage();\n  };\n\n  React.useEffect(() => {\n    return () => {\n      clearStartingString.cancel();\n      clearA11ySelectionMessage.cancel();\n    };\n  }, [clearA11ySelectionMessage, clearStartingString]);\n\n  const element = (\n    <ElementType\n      className={classes.root}\n      onBlur={handleOnBlur}\n      onChange={handleChange}\n      {...unhandledProps}\n      {...(process.env.NODE_ENV === 'test' && { 'data-test-focused': focused })}\n    >\n      <Downshift\n        isOpen={open}\n        inputValue={search ? searchQuery : null}\n        stateReducer={downshiftStateReducer}\n        itemToString={itemToString}\n        // downshift does not work with arrays as selectedItem.\n        selectedItem={multiple || !value.length ? null : value[0]}\n        scrollIntoView={(node: HTMLElement, menu: HTMLElement) => {\n          if (node) {\n            const { children } = menu;\n            let nodeToScroll = node;\n            /**\n             * If it's loading downshift doesn't take the last node with loadingMessage\n             * in consideration to scrolld so we need to check if the current is the\n             * antepenultimate and is so scroll the loading into view, same for headerMessage\n             */\n            if (loading && children[children.length - 2] === node) {\n              nodeToScroll = children[children.length - 1] as HTMLElement;\n            } else if (headerMessage && children[1] === node) {\n              nodeToScroll = children[0] as HTMLElement;\n            }\n\n            // Replicating same config that Downshift uses\n            const actions = computeScrollIntoView(nodeToScroll, {\n              scrollMode: 'if-needed',\n              block: 'nearest',\n              inline: 'nearest',\n            });\n            actions.forEach(({ el, top, left }) => {\n              el.scrollTop = top;\n              el.scrollLeft = left;\n            });\n          }\n        }}\n        getA11yStatusMessage={getA11yStatusMessage}\n        highlightedIndex={highlightedIndex}\n        onStateChange={handleStateChange}\n        labelId={ariaLabelledby}\n        environment={context.target?.defaultView}\n        inputId={searchInput && searchInput['id'] ? searchInput['id'] : undefined}\n      >\n        {({\n          getInputProps,\n          getItemProps,\n          getMenuProps,\n          getRootProps,\n          getToggleButtonProps,\n          toggleMenu,\n          highlightedIndex,\n          selectItemAtIndex,\n        }) => {\n          const { innerRef, ...accessibilityRootPropsRest } = getRootProps(\n            { refKey: 'innerRef' },\n            { suppressRefError: true },\n          );\n          const showClearIndicator = clearable && value.length > 0;\n\n          return (\n            <Ref innerRef={innerRef}>\n              <div\n                ref={containerRef}\n                className={cx(dropdownSlotClassNames.container, classes.container)}\n                onClick={search && !open ? handleContainerClick : undefined}\n              >\n                <div ref={selectedItemsRef} className={cx(dropdownSlotClassNames.selectedItems, classes.selectedItems)}>\n                  {multiple && renderSelectedItems()}\n                  {search\n                    ? renderSearchInput(\n                        accessibilityRootPropsRest,\n                        highlightedIndex,\n                        getInputProps,\n                        selectItemAtIndex,\n                        toggleMenu,\n                        variables,\n                      )\n                    : renderTriggerButton(getToggleButtonProps)}\n                </div>\n                {showClearIndicator\n                  ? Box.create(clearIndicator, {\n                      defaultProps: () => ({\n                        className: dropdownSlotClassNames.clearIndicator,\n                        styles: resolvedStyles.clearIndicator,\n                        accessibility: indicatorBehavior,\n                        ...(!search && { tabIndex: 0, role: 'button' }),\n                      }),\n                      overrideProps: (predefinedProps: BoxProps) => ({\n                        onClick: (e: React.SyntheticEvent<HTMLElement>) => {\n                          _.invoke(predefinedProps, 'onClick', e);\n                          handleClear(e);\n                        },\n                      }),\n                    })\n                  : Box.create(toggleIndicator, {\n                      defaultProps: () => ({\n                        className: dropdownSlotClassNames.toggleIndicator,\n                        styles: resolvedStyles.toggleIndicator,\n                        accessibility: indicatorBehavior,\n                      }),\n                      overrideProps: (predefinedProps: BoxProps) => ({\n                        onClick: e => {\n                          if (!disabled) {\n                            getToggleButtonProps({ disabled }).onClick(e);\n                          }\n\n                          _.invoke(predefinedProps, 'onClick', e);\n                        },\n                      }),\n                    })}\n                {renderItemsList(\n                  highlightedIndex,\n                  toggleMenu,\n                  selectItemAtIndex,\n                  getMenuProps,\n                  getItemProps,\n                  getInputProps,\n                )}\n              </div>\n            </Ref>\n          );\n        }}\n      </Downshift>\n      <Portal open={!!getA11ySelectionMessage}>\n        <div role=\"status\" aria-live=\"polite\" aria-relevant=\"additions text\" style={screenReaderContainerStyles}>\n          {a11ySelectionStatus}\n        </div>\n      </Portal>\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nDropdown.displayName = 'Dropdown';\n\nDropdown.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false,\n  }),\n  activeSelectedIndex: PropTypes.number,\n  align: PropTypes.oneOf(ALIGNMENTS),\n  checkable: PropTypes.bool,\n  checkableIndicator: customPropTypes.shorthandAllowingChildren,\n  clearable: PropTypes.bool,\n  clearIndicator: customPropTypes.shorthandAllowingChildren,\n  defaultActiveSelectedIndex: PropTypes.number,\n  defaultOpen: PropTypes.bool,\n  defaultHighlightedIndex: PropTypes.number,\n  defaultSearchQuery: PropTypes.string,\n  defaultValue: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  disabled: PropTypes.bool,\n  error: PropTypes.bool,\n  fluid: PropTypes.bool,\n  getA11ySelectionMessage: PropTypes.object,\n  getA11yStatusMessage: PropTypes.func,\n  highlightFirstItemOnOpen: PropTypes.bool,\n  highlightedIndex: PropTypes.number,\n  inline: PropTypes.bool,\n  inverted: PropTypes.bool,\n  items: customPropTypes.collectionShorthand,\n  itemToString: PropTypes.func,\n  itemToValue: PropTypes.func,\n  headerMessage: customPropTypes.itemShorthand,\n  list: customPropTypes.itemShorthand,\n  loading: PropTypes.bool,\n  loadingMessage: customPropTypes.itemShorthand,\n  moveFocusOnTab: PropTypes.bool,\n  multiple: PropTypes.bool,\n  noResultsMessage: customPropTypes.itemShorthand,\n  offset: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.arrayOf(PropTypes.number) as PropTypes.Requireable<[number, number]>,\n  ]),\n  onOpenChange: PropTypes.func,\n  onSearchQueryChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onActiveSelectedIndexChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  open: PropTypes.bool,\n  placeholder: PropTypes.string,\n  position: PropTypes.oneOf(POSITIONS),\n  renderItem: PropTypes.func,\n  renderSelectedItem: PropTypes.func,\n  search: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n  searchQuery: PropTypes.string,\n  searchInput: customPropTypes.itemShorthand,\n  toggleIndicator: customPropTypes.shorthandAllowingChildren,\n  triggerButton: customPropTypes.itemShorthand,\n  unstable_disableTether: PropTypes.oneOf([true, false, 'all']),\n  unstable_pinned: PropTypes.bool,\n  value: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n};\nDropdown.handledProps = Object.keys(Dropdown.propTypes) as any;\n\nDropdown.defaultProps = {\n  align: 'start',\n  clearIndicator: {},\n  itemToString: item => {\n    if (!item || React.isValidElement(item)) {\n      return '';\n    }\n\n    // targets DropdownItem shorthand objects\n    return (item as any).header || String(item);\n  },\n  itemToValue: item => {\n    if (!item || React.isValidElement(item)) {\n      return '';\n    }\n\n    // targets DropdownItem shorthand objects\n    return (item as any).header || String(item);\n  },\n  list: {},\n  position: 'below',\n  toggleIndicator: {},\n  triggerButton: {},\n};\n\nDropdown.Item = DropdownItem;\nDropdown.SearchInput = DropdownSearchInput;\nDropdown.SelectedItem = DropdownSelectedItem;\n"],"file":"Dropdown.js"}