import { ColorSchemeMapping, ColorScheme, ColorSchemeMappingOverrides, ComponentAreaName } from './types';
export declare const extendColorScheme: (colorScheme: ColorSchemeMapping<import("@fluentui/styles").Extendable<Record<ComponentAreaName, string>, string>, "blue" | "green" | "grey" | "orange" | "pink" | "purple" | "red" | "teal" | "yellow" | "primary" | "secondary">, overrides: ColorSchemeMappingOverrides<import("@fluentui/styles").Extendable<Record<ComponentAreaName, string>, string>, "blue" | "green" | "grey" | "orange" | "pink" | "purple" | "red" | "teal" | "yellow" | "primary" | "secondary">) => ColorSchemeMapping<import("@fluentui/styles").Extendable<Record<ComponentAreaName, string>, string>, "blue" | "green" | "grey" | "orange" | "pink" | "purple" | "red" | "teal" | "yellow" | "primary" | "secondary">;
export declare function pickValuesFromColorScheme<T extends ComponentAreaName | string = ComponentAreaName>(colorScheme: ColorSchemeMapping, componentAreas: T[]): ColorSchemeMapping<ColorScheme<T>>;
