import { pxToRem } from '../../../../utils';
import { screenReaderContainerStyles } from '../../../../utils/accessibility/Styles/accessibilityStyles';
import { listItemSlotClassNames } from '../../../../components/List/ListItem';
import { getBorderFocusStyles } from '../../getBorderFocusStyles';
var truncateStyle = {
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
};

var selectableHoverStyle = function selectableHoverStyle(p, v) {
  var _ref;

  return _ref = {
    background: v.selectableFocusHoverBackgroundColor,
    color: v.selectableFocusHoverColor,
    cursor: 'pointer'
  }, _ref["& ." + listItemSlotClassNames.header] = {
    color: 'inherit'
  }, _ref["& ." + listItemSlotClassNames.content] = {
    color: 'inherit'
  }, _ref["& ." + listItemSlotClassNames.headerMedia] = Object.assign({}, screenReaderContainerStyles, {
    color: 'inherit'
  }), _ref["& ." + listItemSlotClassNames.contentMedia] = {
    display: 'none',
    color: 'inherit'
  }, _ref["& ." + listItemSlotClassNames.endMedia] = {
    display: 'block',
    color: 'inherit'
  }, _ref;
};

var selectedStyle = function selectedStyle(variables) {
  return {
    background: variables.selectedBackgroundColor,
    color: variables.selectedColor
  };
};

export var listItemStyles = {
  root: function root(_ref2) {
    var _Object$assign;

    var p = _ref2.props,
        v = _ref2.variables,
        siteVariables = _ref2.theme.siteVariables;
    var borderFocusStyles = getBorderFocusStyles({
      variables: siteVariables
    });
    return Object.assign({
      display: 'flex',
      alignItems: 'center',
      minHeight: v.minHeight,
      padding: v.rootPadding
    }, (p.selectable || p.navigable) && Object.assign((_Object$assign = {
      position: 'relative'
    }, _Object$assign["& ." + listItemSlotClassNames.endMedia] = {
      display: 'none'
    }, _Object$assign['&:hover'] = selectableHoverStyle(p, v), _Object$assign[':focus'] = borderFocusStyles[':focus'], _Object$assign[':focus-visible'] = Object.assign({}, borderFocusStyles[':focus-visible'], {
      zIndex: v.zIndex
    }), _Object$assign), p.selected && selectedStyle(v)), p.important && {
      fontWeight: v.importantFontWeight
    });
  },
  media: function media(_ref3) {
    var p = _ref3.props;
    return Object.assign({}, p.important && {
      '::before': {
        content: '""',
        position: 'absolute',
        left: pxToRem(8),
        width: pxToRem(2),
        height: pxToRem(2),
        background: '#000'
      }
    }, (p.hasHeader || p.hasContent) && {
      marginRight: pxToRem(8)
    });
  },
  header: function header(_ref4) {
    var p = _ref4.props,
        v = _ref4.variables;
    return Object.assign({
      flexGrow: 1,
      fontSize: v.headerFontSize,
      lineHeight: v.headerLineHeight
    }, p.truncateHeader && truncateStyle, (!p.hasContent || p.hasHeaderMedia) && {
      marginRight: pxToRem(8)
    });
  },
  headerMedia: function headerMedia(_ref5) {
    var v = _ref5.variables;
    return {
      alignSelf: 'flex-end',
      fontSize: v.headerMediaFontSize,
      lineHeight: v.headerMediaLineHeight
    };
  },
  content: function content(_ref6) {
    var p = _ref6.props,
        v = _ref6.variables;
    return Object.assign({
      flexGrow: 1,
      fontSize: v.contentFontSize,
      lineHeight: v.contentLineHeight
    }, p.truncateContent && truncateStyle, (!p.hasHeader || p.hasContentMedia) && {
      marginRight: pxToRem(8)
    });
  },
  contentMedia: function contentMedia(_ref7) {
    var v = _ref7.variables;
    return {
      fontSize: v.contentMediaFontSize,
      lineHeight: v.contentMediaLineHeight
    };
  },
  endMedia: function endMedia(_ref8) {
    var p = _ref8.props;
    return Object.assign({
      flexShrink: 0
    }, (p.selectable || p.navigable) && {
      display: 'none'
    });
  },
  headerWrapper: function headerWrapper() {
    return {
      display: 'flex'
    };
  },
  contentWrapper: function contentWrapper() {
    return {
      display: 'flex'
    };
  },
  main: function main() {
    return {
      display: 'flex',
      flexDirection: 'column',
      flexGrow: 1,
      minWidth: 0 // needed for the truncate styles to work

    };
  }
};
//# sourceMappingURL=listItemStyles.js.map
