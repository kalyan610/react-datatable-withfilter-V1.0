{"version":3,"sources":["useContextSelectors.ts"],"names":["useContextSelectors","context","selectors","React","useContext","subscribe","value","useReducer","c","forceUpdate","ref","useRef","selected","Object","keys","forEach","key","current","callback","nextState","reference","every","is","e"],"mappings":";;;;;;;AAAA;;AAGA;;AAaA;;;;;AAKO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAMjCC,OANiC,EAOjCC,SAPiC,EAQK;AAAA,0BACTC,KAAK,CAACC,UAAN,CAAkBH,OAAlB,CADS;AAAA,MAC9BI,SAD8B,qBAC9BA,SAD8B;AAAA,MACnBC,KADmB,qBACnBA,KADmB;;AAAA,aAEdH,KAAK,CAACI,UAAN,CAAiB,UAACC,CAAD;AAAA,WAAeA,CAAC,GAAG,CAAnB;AAAA,GAAjB,EAAuC,CAAvC,CAFc;AAAA,MAE7BC,WAF6B;;AAItC,MAAMC,GAAG,GAAGP,KAAK,CAACQ,MAAN,EAAZ;AACA,MAAMC,QAAQ,GAAG,EAAjB;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYZ,SAAZ,EAAuBa,OAAvB,CAA+B,UAACC,GAAD,EAAqB;AAClDJ,IAAAA,QAAQ,CAACI,GAAD,CAAR,GAAgBd,SAAS,CAACc,GAAD,CAAT,CAAeV,KAAf,CAAhB;AACD,GAFD;AAIA,wCAA0B,YAAM;AAC9BI,IAAAA,GAAG,CAACO,OAAJ,GAAc;AACZf,MAAAA,SAAS,EAATA,SADY;AAEZI,MAAAA,KAAK,EAALA,KAFY;AAGZM,MAAAA,QAAQ,EAARA;AAHY,KAAd;AAKD,GAND;AAOA,wCAA0B,YAAM;AAC9B,QAAMM,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAsB;AACrC,UAAI;AACF,YAAMC,SAAuE,GAAGV,GAAG,CAACO,OAApF;;AAIA,YACEG,SAAS,CAACd,KAAV,KAAoBa,SAApB,IACAN,MAAM,CAACC,IAAP,CAAYM,SAAS,CAACR,QAAtB,EAAgCS,KAAhC,CAAsC,UAACL,GAAD;AAAA,iBACpCH,MAAM,CAACS,EAAP,CAAUF,SAAS,CAACR,QAAV,CAAmBI,GAAnB,CAAV,EAAmCI,SAAS,CAAClB,SAAV,CAAoBc,GAApB,EAAyBG,SAAzB,CAAnC,CADoC;AAAA,SAAtC,CAFF,EAKE;AACA;AACA;AACD;AACF,OAdD,CAcE,OAAOI,CAAP,EAAU,CACV;AACD;;AAEDd,MAAAA,WAAW;AACZ,KApBD;;AAsBA,WAAOJ,SAAS,CAACa,QAAD,CAAhB;AACD,GAxBD,EAwBG,CAACb,SAAD,CAxBH;AA0BA,SAAOO,QAAP;AACD,CArDM","sourcesContent":["import * as React from 'react';\n\nimport { Context, ContextSelector, ContextValue } from './types';\nimport { useIsomorphicLayoutEffect } from './utils';\n\ntype UseSelectorsRef<\n  Value,\n  Properties extends string,\n  Selectors extends Record<Properties, ContextSelector<Value, SelectedValue>>,\n  SelectedValue extends any\n> = {\n  selectors: Selectors;\n  value: Value;\n  selected: Record<Properties, SelectedValue>;\n};\n\n/**\n * This hook returns context selected value by selectors.\n * It will only accept context created by `createContext`.\n * It will trigger re-render if only the selected value is referencially changed.\n */\nexport const useContextSelectors = <\n  Value,\n  Properties extends string,\n  Selectors extends Record<Properties, ContextSelector<Value, SelectedValue>>,\n  SelectedValue extends any\n>(\n  context: Context<Value>,\n  selectors: Selectors,\n): Record<Properties, SelectedValue> => {\n  const { subscribe, value } = React.useContext((context as unknown) as Context<ContextValue<Value>>);\n  const [, forceUpdate] = React.useReducer((c: number) => c + 1, 0) as [never, () => void];\n\n  const ref = React.useRef<UseSelectorsRef<Value, Properties, Selectors, SelectedValue>>();\n  const selected = {} as Record<Properties, SelectedValue>;\n\n  Object.keys(selectors).forEach((key: Properties) => {\n    selected[key] = selectors[key](value);\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    ref.current = {\n      selectors,\n      value,\n      selected,\n    };\n  });\n  useIsomorphicLayoutEffect(() => {\n    const callback = (nextState: Value) => {\n      try {\n        const reference: UseSelectorsRef<Value, Properties, Selectors, SelectedValue> = ref.current as NonNullable<\n          UseSelectorsRef<Value, Properties, Selectors, SelectedValue>\n        >;\n\n        if (\n          reference.value === nextState ||\n          Object.keys(reference.selected).every((key: Properties) =>\n            Object.is(reference.selected[key], reference.selectors[key](nextState)),\n          )\n        ) {\n          // not changed\n          return;\n        }\n      } catch (e) {\n        // ignored (stale props or some other reason)\n      }\n\n      forceUpdate();\n    };\n\n    return subscribe(callback);\n  }, [subscribe]);\n\n  return selected;\n};\n"],"file":"useContextSelectors.js"}