"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_context_selector_1 = require("@fluentui/react-context-selector");
var enzyme_1 = require("enzyme");
var React = require("react");
var ReactIs = require("react-is");
var TestBoundary = /** @class */ (function (_super) {
    tslib_1.__extends(TestBoundary, _super);
    function TestBoundary() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { hasError: false };
        return _this;
    }
    TestBoundary.prototype.componentDidCatch = function (error) {
        this.props.onError(error);
        this.setState({ hasError: true });
    };
    TestBoundary.prototype.render = function () {
        if (this.state.hasError) {
            return null;
        }
        return this.props.children;
    };
    return TestBoundary;
}(React.Component));
describe('createContext', function () {
    it('creates a Provider component', function () {
        var Context = react_context_selector_1.createContext(null);
        expect(ReactIs.isValidElementType(Context.Provider)).toBeTruthy();
    });
    describe('options', function () {
        it('throws on usage outside Provider by default', function () {
            jest.spyOn(console, 'error').mockImplementation(function () { });
            var TestContext = react_context_selector_1.createContext('');
            var TestComponent = function () {
                var value = react_context_selector_1.useContextSelector(TestContext, function (v) { return v; });
                return React.createElement("div", { "data-value": value });
            };
            var onError = jest.fn();
            enzyme_1.mount(React.createElement(TestBoundary, { onError: onError },
                React.createElement(TestComponent, null)));
            expect(onError).toBeCalledWith(expect.objectContaining({
                message: 'Please use <Provider /> component from "@fluentui/react-context-selector"',
            }));
            // We need to clean up mocks to avoid errors reported by React
            // eslint-disable-next-line no-console
            console.error.mockClear();
        });
        it('do not throw usage outside Provider when `strict` is `false`', function () {
            var TestContext = react_context_selector_1.createContext('', { strict: false });
            var TestComponent = function () {
                var value = react_context_selector_1.useContextSelector(TestContext, function (v) { return v; });
                return React.createElement("div", { "data-value": value });
            };
            var onError = jest.fn();
            enzyme_1.mount(React.createElement(TestBoundary, { onError: onError },
                React.createElement(TestComponent, null)));
            expect(onError).not.toBeCalled();
        });
    });
});
