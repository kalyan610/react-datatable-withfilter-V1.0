"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_context_selector_1 = require("@fluentui/react-context-selector");
var enzyme_1 = require("enzyme");
var React = require("react");
var TestContext = react_context_selector_1.createContext({ index: -1 });
var TestComponent = function (props) {
    var active = react_context_selector_1.useContextSelector(TestContext, function (v) { return v.index === props.index; });
    React.useEffect(function () {
        props.onUpdate && props.onUpdate();
    });
    return React.createElement("div", { "data-active": active });
};
describe('useContextSelector', function () {
    it('propogates values via Context', function () {
        var wrapper = enzyme_1.mount(React.createElement(TestContext.Provider, { value: { index: 1 } },
            React.createElement(TestComponent, { index: 1 })));
        expect(wrapper.find('div').prop('data-active')).toBe(true);
    });
    it('updates only on selector match', function () {
        var onUpdate = jest.fn();
        var wrapper = enzyme_1.mount(React.createElement(TestContext.Provider, { value: { index: 0 } },
            React.createElement(TestComponent, { index: 1, onUpdate: onUpdate })));
        expect(wrapper.find('div').prop('data-active')).toBe(false);
        expect(onUpdate).toBeCalledTimes(1);
        // No match, (v.index: 2, p.index: 1)
        wrapper.setProps({ value: { index: 2 } });
        expect(wrapper.find('div').prop('data-active')).toBe(false);
        expect(onUpdate).toBeCalledTimes(1);
        // Match => update, (v.index: 1, p.index: 1)
        wrapper.setProps({ value: { index: 1 } });
        expect(wrapper.find('div').prop('data-active')).toBe(true);
        expect(onUpdate).toBeCalledTimes(2);
        // Match previous => no update, (v.index: 1, p.index: 1)
        wrapper.setProps({ value: { index: 1 } });
        expect(wrapper.find('div').prop('data-active')).toBe(true);
        expect(onUpdate).toBeCalledTimes(2);
    });
    it('updates are propogated inside React.memo()', function () {
        // https://reactjs.org/docs/react-api.html#reactmemo
        // Will never pass updates
        var MemoComponent = React.memo(TestComponent, function () { return true; });
        var onUpdate = jest.fn();
        var wrapper = enzyme_1.mount(React.createElement(TestContext.Provider, { value: { index: 0 } },
            React.createElement(MemoComponent, { index: 1, onUpdate: onUpdate })));
        wrapper.setProps({ value: { index: 1 } });
        expect(wrapper.find('div').prop('data-active')).toBe(true);
        expect(onUpdate).toBeCalledTimes(2);
    });
    it('handles unsubscribe', function () {
        var MemoComponent = React.memo(TestComponent);
        var onUpdate = jest.fn();
        var wrapper = enzyme_1.mount(React.createElement(TestContext.Provider, { value: { index: 0 } },
            React.createElement(MemoComponent, { index: 1 }),
            React.createElement(MemoComponent, { index: 2, key: "2", onUpdate: onUpdate })));
        wrapper.setProps({
            children: [null, React.createElement(MemoComponent, { index: 2, key: 2, onUpdate: onUpdate })],
        });
        expect(onUpdate).toBeCalledTimes(1);
    });
});
