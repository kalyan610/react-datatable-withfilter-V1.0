"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_context_selector_1 = require("@fluentui/react-context-selector");
var enzyme_1 = require("enzyme");
var React = require("react");
var TestContext = react_context_selector_1.createContext({
    index: -1,
    value: '',
});
var TestComponent = function (props) {
    var context = react_context_selector_1.useContextSelectors(TestContext, {
        active: function (v) { return v.index === props.index; },
        value: function (v) { return v.value; },
    });
    React.useEffect(function () {
        props.onUpdate && props.onUpdate();
    });
    return React.createElement("div", { "data-active": context.active, "data-value": context.value });
};
describe('useContextSelectors', function () {
    it('propogates values via Context', function () {
        var wrapper = enzyme_1.mount(React.createElement(TestContext.Provider, { value: { index: 1, value: 'foo' } },
            React.createElement(TestComponent, { index: 1 })));
        expect(wrapper.find('div').prop('data-active')).toBe(true);
        expect(wrapper.find('div').prop('data-value')).toBe('foo');
    });
    it('updates only on selector match', function () {
        var onUpdate = jest.fn();
        var wrapper = enzyme_1.mount(React.createElement(TestContext.Provider, { value: { index: -1, value: 'foo' } },
            React.createElement(TestComponent, { index: 1, onUpdate: onUpdate })));
        expect(wrapper.find('div').prop('data-active')).toBe(false);
        expect(wrapper.find('div').prop('data-value')).toBe('foo');
        expect(onUpdate).toBeCalledTimes(1);
        // No match, (v.index: 2, p.index: 1)
        wrapper.setProps({ value: { index: 2, value: 'foo' } });
        expect(wrapper.find('div').prop('data-active')).toBe(false);
        expect(wrapper.find('div').prop('data-value')).toBe('foo');
        expect(onUpdate).toBeCalledTimes(1);
        // Match => update, (v.index: 1, p.index: 1)
        wrapper.setProps({ value: { index: 1, value: 'foo' } });
        expect(wrapper.find('div').prop('data-active')).toBe(true);
        expect(wrapper.find('div').prop('data-value')).toBe('foo');
        expect(onUpdate).toBeCalledTimes(2);
        // Match previous => no update, (v.index: 1, p.index: 1)
        wrapper.setProps({ value: { index: 1, value: 'foo' } });
        expect(wrapper.find('div').prop('data-active')).toBe(true);
        expect(wrapper.find('div').prop('data-value')).toBe('foo');
        expect(onUpdate).toBeCalledTimes(2);
        // Match => update, (v.value: 'bar')
        wrapper.setProps({ value: { index: 1, value: 'bar' } });
        expect(wrapper.find('div').prop('data-value')).toBe('bar');
        expect(onUpdate).toBeCalledTimes(3);
    });
    it('updates are propogated inside React.memo()', function () {
        // https://reactjs.org/docs/react-api.html#reactmemo
        // Will never pass updates
        var MemoComponent = React.memo(TestComponent, function () { return true; });
        var onUpdate = jest.fn();
        var wrapper = enzyme_1.mount(React.createElement(TestContext.Provider, { value: { index: 0, value: 'foo' } },
            React.createElement(MemoComponent, { index: 1, onUpdate: onUpdate })));
        wrapper.setProps({ value: { index: 1, value: 'foo' } });
        expect(wrapper.find('div').prop('data-active')).toBe(true);
        expect(onUpdate).toBeCalledTimes(2);
    });
});
