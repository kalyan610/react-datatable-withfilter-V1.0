"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
// Stops React Context propagation
// https://github.com/facebook/react/blob/95bd7aad7daa80c381faa3215c80b0906ab5ead5/packages/react-reconciler/src/ReactFiberBeginWork.js#L2656
var calculateChangedBits = function () { return 0; };
var createProvider = function (Original) {
    var Provider = function (props) {
        var listeners = React.useRef([]);
        // We call listeners in render intentionally. Listeners are not technically pure, but
        // otherwise we can't get benefits from concurrent mode.
        //
        // We make sure to work with double or more invocation of listeners.
        listeners.current.forEach(function (listener) { return listener(props.value); });
        // Disables updates propogation for React Context as `value` is always shallow equal
        var subscribe = React.useCallback(function (listener) {
            listeners.current.push(listener);
            var unsubscribe = function () {
                var index = listeners.current.indexOf(listener);
                listeners.current.splice(index, 1);
            };
            return unsubscribe;
        }, []);
        return React.createElement(Original, { value: { subscribe: subscribe, value: props.value } }, props.children);
    };
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
        Provider.displayName = 'ContextSelector.Provider';
    }
    return Provider;
};
exports.createContext = function (defaultValue, options) {
    if (options === void 0) { options = {}; }
    var _a = options.strict, strict = _a === void 0 ? true : _a;
    var context = React.createContext({
        get subscribe() {
            if (strict) {
                /* istanbul ignore next */
                throw new Error(process.env.NODE_ENV === 'production'
                    ? ''
                    : "Please use <Provider /> component from \"@fluentui/react-context-selector\"");
            }
            /* istanbul ignore next */
            return function () { return function () { }; };
        },
        value: defaultValue,
    }, calculateChangedBits);
    context.Provider = createProvider(context.Provider);
    // We don't support Consumer API
    delete context.Consumer;
    return context;
};
