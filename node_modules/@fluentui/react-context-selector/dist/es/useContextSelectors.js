import * as React from 'react';
import { useIsomorphicLayoutEffect } from './utils';

/**
 * This hook returns context selected value by selectors.
 * It will only accept context created by `createContext`.
 * It will trigger re-render if only the selected value is referencially changed.
 */
export var useContextSelectors = function useContextSelectors(context, selectors) {
  var _React$useContext = React.useContext(context),
      subscribe = _React$useContext.subscribe,
      value = _React$useContext.value;

  var _ref = React.useReducer(function (c) {
    return c + 1;
  }, 0),
      forceUpdate = _ref[1];

  var ref = React.useRef();
  var selected = {};
  Object.keys(selectors).forEach(function (key) {
    selected[key] = selectors[key](value);
  });
  useIsomorphicLayoutEffect(function () {
    ref.current = {
      selectors: selectors,
      value: value,
      selected: selected
    };
  });
  useIsomorphicLayoutEffect(function () {
    var callback = function callback(nextState) {
      try {
        var reference = ref.current;

        if (reference.value === nextState || Object.keys(reference.selected).every(function (key) {
          return Object.is(reference.selected[key], reference.selectors[key](nextState));
        })) {
          // not changed
          return;
        }
      } catch (e) {// ignored (stale props or some other reason)
      }

      forceUpdate();
    };

    return subscribe(callback);
  }, [subscribe]);
  return selected;
};
//# sourceMappingURL=useContextSelectors.js.map
