{"version":3,"sources":["useContextSelector.ts"],"names":["React","useIsomorphicLayoutEffect","useContextSelector","context","selector","useContext","subscribe","value","useReducer","c","forceUpdate","ref","useRef","selected","current","callback","nextState","reference","Object","is","e"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,SAASC,yBAAT,QAA0C,SAA1C;;AAQA;;;;;AAKA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAChCC,OADgC,EAEhCC,QAFgC,EAGd;AAAA,0BACWJ,KAAK,CAACK,UAAN,CAAkBF,OAAlB,CADX;AAAA,MACVG,SADU,qBACVA,SADU;AAAA,MACCC,KADD,qBACCA,KADD;;AAAA,aAEMP,KAAK,CAACQ,UAAN,CAAiB,UAACC,CAAD;AAAA,WAAeA,CAAC,GAAG,CAAnB;AAAA,GAAjB,EAAuC,CAAvC,CAFN;AAAA,MAETC,WAFS;;AAIlB,MAAMC,GAAG,GAAGX,KAAK,CAACY,MAAN,EAAZ;AACA,MAAMC,QAAQ,GAAGT,QAAQ,CAACG,KAAD,CAAzB;AAEAN,EAAAA,yBAAyB,CAAC,YAAM;AAC9BU,IAAAA,GAAG,CAACG,OAAJ,GAAc;AACZV,MAAAA,QAAQ,EAARA,QADY;AAEZG,MAAAA,KAAK,EAALA,KAFY;AAGZM,MAAAA,QAAQ,EAARA;AAHY,KAAd;AAKD,GANwB,CAAzB;AAOAZ,EAAAA,yBAAyB,CAAC,YAAM;AAC9B,QAAMc,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAsB;AACrC,UAAI;AACF,YAAMC,SAA+C,GAAGN,GAAG,CAACG,OAA5D;;AAIA,YAAIG,SAAS,CAACV,KAAV,KAAoBS,SAApB,IAAiCE,MAAM,CAACC,EAAP,CAAUF,SAAS,CAACJ,QAApB,EAA8BI,SAAS,CAACb,QAAV,CAAmBY,SAAnB,CAA9B,CAArC,EAAmG;AACjG;AACA;AACD;AACF,OATD,CASE,OAAOI,CAAP,EAAU,CACV;AACD;;AAEDV,MAAAA,WAAW;AACZ,KAfD;;AAiBA,WAAOJ,SAAS,CAACS,QAAD,CAAhB;AACD,GAnBwB,EAmBtB,CAACT,SAAD,CAnBsB,CAAzB;AAqBA,SAAOO,QAAP;AACD,CAvCM","sourcesContent":["import * as React from 'react';\n\nimport { Context, ContextSelector, ContextValue } from './types';\nimport { useIsomorphicLayoutEffect } from './utils';\n\ntype UseSelectorRef<Value, SelectedValue> = {\n  selector: ContextSelector<Value, SelectedValue>;\n  selected: SelectedValue;\n  value: Value;\n};\n\n/**\n * This hook returns context selected value by selector.\n * It will only accept context created by `createContext`.\n * It will trigger re-render if only the selected value is referencially changed.\n */\nexport const useContextSelector = <Value, SelectedValue>(\n  context: Context<Value>,\n  selector: ContextSelector<Value, SelectedValue>,\n): SelectedValue => {\n  const { subscribe, value } = React.useContext((context as unknown) as Context<ContextValue<Value>>);\n  const [, forceUpdate] = React.useReducer((c: number) => c + 1, 0) as [never, () => void];\n\n  const ref = React.useRef<UseSelectorRef<Value, SelectedValue>>();\n  const selected = selector(value);\n\n  useIsomorphicLayoutEffect(() => {\n    ref.current = {\n      selector,\n      value,\n      selected,\n    };\n  });\n  useIsomorphicLayoutEffect(() => {\n    const callback = (nextState: Value) => {\n      try {\n        const reference: UseSelectorRef<Value, SelectedValue> = ref.current as NonNullable<\n          UseSelectorRef<Value, SelectedValue>\n        >;\n\n        if (reference.value === nextState || Object.is(reference.selected, reference.selector(nextState))) {\n          // not changed\n          return;\n        }\n      } catch (e) {\n        // ignored (stale props or some other reason)\n      }\n\n      forceUpdate();\n    };\n\n    return subscribe(callback);\n  }, [subscribe]);\n\n  return selected;\n};\n"],"file":"useContextSelector.js"}