{"version":3,"file":"logging.es5.umd.min.js","sources":["../../../../packages/logging/src/logger.ts","../../../../packages/logging/src/loglevel.ts","../../../../packages/logging/src/listeners.ts"],"sourcesContent":["import { LogListener } from \"./listeners\";\nimport { LogEntry } from \"./logentry\";\nimport { LogLevel } from \"./loglevel\";\n\n/**\n * Class used to subscribe ILogListener and log messages throughout an application\n *\n */\nexport class Logger {\n\n    private static _instance: LoggerImpl;\n\n    /**\n     * Gets or sets the active log level to apply for log filtering\n     */\n    public static get activeLogLevel(): LogLevel {\n        return Logger.instance.activeLogLevel;\n    }\n\n    public static set activeLogLevel(value: LogLevel) {\n        Logger.instance.activeLogLevel = value;\n    }\n\n    private static get instance(): LoggerImpl {\n        if (Logger._instance === undefined || Logger._instance === null) {\n            Logger._instance = new LoggerImpl();\n        }\n        return Logger._instance;\n    }\n\n    /**\n     * Adds ILogListener instances to the set of subscribed listeners\n     *\n     * @param listeners One or more listeners to subscribe to this log\n     */\n    public static subscribe(...listeners: LogListener[]): void {\n        listeners.map(listener => Logger.instance.subscribe(listener));\n    }\n\n    /**\n     * Clears the subscribers collection, returning the collection before modifiction\n     */\n    public static clearSubscribers(): LogListener[] {\n        return Logger.instance.clearSubscribers();\n    }\n\n    /**\n     * Gets the current subscriber count\n     */\n    public static get count(): number {\n        return Logger.instance.count;\n    }\n\n    /**\n     * Writes the supplied string to the subscribed listeners\n     *\n     * @param message The message to write\n     * @param level [Optional] if supplied will be used as the level of the entry (Default: LogLevel.Info)\n     */\n    public static write(message: string, level: LogLevel = LogLevel.Info) {\n        Logger.instance.log({ level: level, message: message });\n    }\n\n    /**\n     * Writes the supplied string to the subscribed listeners\n     *\n     * @param json The json object to stringify and write\n     * @param level [Optional] if supplied will be used as the level of the entry (Default: LogLevel.Info)\n     */\n    public static writeJSON(json: any, level: LogLevel = LogLevel.Info) {\n        this.write(JSON.stringify(json), level);\n    }\n\n    /**\n     * Logs the supplied entry to the subscribed listeners\n     *\n     * @param entry The message to log\n     */\n    public static log(entry: LogEntry) {\n        Logger.instance.log(entry);\n    }\n\n    /**\n     * Logs an error object to the subscribed listeners\n     * \n     * @param err The error object\n     */\n    public static error(err: Error) {\n        Logger.instance.log({ data: err, level: LogLevel.Error, message: err.message });\n    }\n}\n\nclass LoggerImpl {\n\n    constructor(public activeLogLevel: LogLevel = LogLevel.Warning, private subscribers: LogListener[] = []) { }\n\n    public subscribe(listener: LogListener): void {\n        this.subscribers.push(listener);\n    }\n\n    public clearSubscribers(): LogListener[] {\n        const s = this.subscribers.slice(0);\n        this.subscribers.length = 0;\n        return s;\n    }\n\n    public get count(): number {\n        return this.subscribers.length;\n    }\n\n    public write(message: string, level: LogLevel = LogLevel.Info) {\n        this.log({ level: level, message: message });\n    }\n\n    public log(entry: LogEntry) {\n        if (entry !== undefined && this.activeLogLevel <= entry.level) {\n            this.subscribers.map(subscriber => subscriber.log(entry));\n        }\n    }\n}\n","/**\n * A set of logging levels\n */\nexport const enum LogLevel {\n    Verbose = 0,\n    Info = 1,\n    Warning = 2,\n    Error = 3,\n    Off = 99,\n}\n","import { LogEntry } from \"./logentry\";\nimport { LogLevel } from \"./loglevel\";\n\n/**\n * Interface that defines a log listner\n *\n */\nexport interface LogListener {\n    /**\n     * Any associated data that a given logging listener may choose to log or ignore\n     *\n     * @param entry The information to be logged\n     */\n    log(entry: LogEntry): void;\n}\n\n/**\n * Implementation of LogListener which logs to the console\n *\n */\nexport class ConsoleListener implements LogListener {\n\n    /**\n     * Any associated data that a given logging listener may choose to log or ignore\n     *\n     * @param entry The information to be logged\n     */\n    public log(entry: LogEntry): void {\n\n        const msg = this.format(entry);\n\n        switch (entry.level) {\n            case LogLevel.Verbose:\n            case LogLevel.Info:\n                console.log(msg);\n                break;\n            case LogLevel.Warning:\n                console.warn(msg);\n                break;\n            case LogLevel.Error:\n                console.error(msg);\n                break;\n        }\n    }\n\n    /**\n     * Formats the message\n     *\n     * @param entry The information to format into a string\n     */\n    private format(entry: LogEntry): string {\n        const msg = [];\n        msg.push(\"Message: \" + entry.message);\n        if (entry.data !== undefined) {\n            try {\n                msg.push(\" Data: \" + JSON.stringify(entry.data));\n            } catch (e) {\n                msg.push(` Data: Error in stringify of supplied data ${e}`);\n            }\n        }\n\n        return msg.join(\"\");\n    }\n}\n\n/**\n * Implementation of LogListener which logs to the supplied function\n *\n */\nexport class FunctionListener implements LogListener {\n\n    /**\n     * Creates a new instance of the FunctionListener class\n     *\n     * @constructor\n     * @param  method The method to which any logging data will be passed\n     */\n    constructor(private method: (entry: LogEntry) => void) { }\n\n    /**\n     * Any associated data that a given logging listener may choose to log or ignore\n     *\n     * @param entry The information to be logged\n     */\n    public log(entry: LogEntry): void {\n        this.method(entry);\n    }\n}\n"],"names":["Object","Logger","instance","activeLogLevel","value","_instance","LoggerImpl","_i","listeners","map","listener","subscribe","clearSubscribers","count","message","level","log","json","this","write","JSON","stringify","entry","err","data","LogLevel","subscribers","push","s","slice","length","undefined","subscriber","ConsoleListener","msg","format","console","warn","error","e","join","FunctionListener","method"],"mappings":";;;;;;;;;uNAeIA,sBAAkBC,wBAAlB,WACI,OAAOA,EAAOC,SAASC,oBAG3B,SAAiCC,GAC7BH,EAAOC,SAASC,eAAiBC,mCAGrCJ,sBAAmBC,kBAAnB,WAII,OAHIA,MAAAA,EAAOI,YACPJ,EAAOI,UAAY,IAAIC,GAEpBL,EAAOI,2CAQJJ,YAAd,eAAwB,aAAAM,mBAAAA,IAAAC,kBACpBA,EAAUC,IAAI,SAAAC,GAAY,OAAAT,EAAOC,SAASS,UAAUD,MAM1CT,mBAAd,WACI,OAAOA,EAAOC,SAASU,oBAM3BZ,sBAAkBC,eAAlB,WACI,OAAOA,EAAOC,SAASW,uCASbZ,QAAd,SAAoBa,EAAiBC,gBAAAA,KACjCd,EAAOC,SAASc,IAAI,CAAED,MAAOA,EAAOD,QAASA,KASnCb,YAAd,SAAwBgB,EAAWF,gBAAAA,KAC/BG,KAAKC,MAAMC,KAAKC,UAAUJ,GAAOF,IAQvBd,MAAd,SAAkBqB,GACdrB,EAAOC,SAASc,IAAIM,IAQVrB,QAAd,SAAoBsB,GAChBtB,EAAOC,SAASc,IAAI,CAAEQ,KAAMD,EAAKR,QAAuBD,QAASS,EAAIT,cAhF7E,cAoFA,ICzFkBW,KD6FPnB,sBAAP,SAAiBI,GACbQ,KAAKQ,YAAYC,KAAKjB,IAGnBJ,6BAAP,WACI,IAAMsB,EAAIV,KAAKQ,YAAYG,MAAM,GAEjC,OADAX,KAAKQ,YAAYI,OAAS,EACnBF,GAGX5B,sBAAWM,yBAAX,WACI,OAAOY,KAAKQ,YAAYI,wCAGrBxB,kBAAP,SAAaQ,EAAiBC,gBAAAA,KAC1BG,KAAKF,IAAI,CAAED,MAAOA,EAAOD,QAASA,KAG/BR,gBAAP,SAAWgB,QACOS,IAAVT,GAAuBJ,KAAKf,gBAAkBmB,EAAMP,OACpDG,KAAKQ,YAAYjB,IAAI,SAAAuB,GAAc,OAAAA,EAAWhB,IAAIM,SAtB1D,WAAmBnB,EAAqDuB,gBAArDvB,kBAAqDuB,MAArDR,oBAAAf,EAAqDe,iBAAAQ,GC3F1DD,EAAAA,aAAAA,uCAEdA,mBACAA,yBACAA,qBACAA,yBCmBOQ,gBAAP,SAAWX,GAEP,IAAMY,EAAMhB,KAAKiB,OAAOb,GAExB,OAAQA,EAAMP,OACV,OACA,OACIqB,QAAQpB,IAAIkB,GACZ,MACJ,OACIE,QAAQC,KAAKH,GACb,MACJ,OACIE,QAAQE,MAAMJ,KAUlBD,mBAAR,SAAeX,GACX,IAAMY,EAAM,GAEZ,GADAA,EAAIP,KAAK,YAAcL,EAAMR,cACViB,IAAfT,EAAME,KACN,IACIU,EAAIP,KAAK,UAAYP,KAAKC,UAAUC,EAAME,OAC5C,MAAOe,GACLL,EAAIP,KAAK,8CAA8CY,GAI/D,OAAOL,EAAIM,KAAK,QAzCxB,qBAgEWC,gBAAP,SAAWnB,GACPJ,KAAKwB,OAAOpB,OARhB,WAAoBoB,GAAAxB,YAAAwB"}