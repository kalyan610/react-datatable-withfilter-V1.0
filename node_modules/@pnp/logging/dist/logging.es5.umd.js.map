{"version":3,"file":"logging.es5.umd.js","sources":["../../../../packages/logging/src/logger.ts","../../../../packages/logging/src/loglevel.ts","../../../../packages/logging/src/listeners.ts"],"sourcesContent":["import { LogListener } from \"./listeners\";\nimport { LogEntry } from \"./logentry\";\nimport { LogLevel } from \"./loglevel\";\n\n/**\n * Class used to subscribe ILogListener and log messages throughout an application\n *\n */\nexport class Logger {\n\n    private static _instance: LoggerImpl;\n\n    /**\n     * Gets or sets the active log level to apply for log filtering\n     */\n    public static get activeLogLevel(): LogLevel {\n        return Logger.instance.activeLogLevel;\n    }\n\n    public static set activeLogLevel(value: LogLevel) {\n        Logger.instance.activeLogLevel = value;\n    }\n\n    private static get instance(): LoggerImpl {\n        if (Logger._instance === undefined || Logger._instance === null) {\n            Logger._instance = new LoggerImpl();\n        }\n        return Logger._instance;\n    }\n\n    /**\n     * Adds ILogListener instances to the set of subscribed listeners\n     *\n     * @param listeners One or more listeners to subscribe to this log\n     */\n    public static subscribe(...listeners: LogListener[]): void {\n        listeners.map(listener => Logger.instance.subscribe(listener));\n    }\n\n    /**\n     * Clears the subscribers collection, returning the collection before modifiction\n     */\n    public static clearSubscribers(): LogListener[] {\n        return Logger.instance.clearSubscribers();\n    }\n\n    /**\n     * Gets the current subscriber count\n     */\n    public static get count(): number {\n        return Logger.instance.count;\n    }\n\n    /**\n     * Writes the supplied string to the subscribed listeners\n     *\n     * @param message The message to write\n     * @param level [Optional] if supplied will be used as the level of the entry (Default: LogLevel.Info)\n     */\n    public static write(message: string, level: LogLevel = LogLevel.Info) {\n        Logger.instance.log({ level: level, message: message });\n    }\n\n    /**\n     * Writes the supplied string to the subscribed listeners\n     *\n     * @param json The json object to stringify and write\n     * @param level [Optional] if supplied will be used as the level of the entry (Default: LogLevel.Info)\n     */\n    public static writeJSON(json: any, level: LogLevel = LogLevel.Info) {\n        this.write(JSON.stringify(json), level);\n    }\n\n    /**\n     * Logs the supplied entry to the subscribed listeners\n     *\n     * @param entry The message to log\n     */\n    public static log(entry: LogEntry) {\n        Logger.instance.log(entry);\n    }\n\n    /**\n     * Logs an error object to the subscribed listeners\n     * \n     * @param err The error object\n     */\n    public static error(err: Error) {\n        Logger.instance.log({ data: err, level: LogLevel.Error, message: err.message });\n    }\n}\n\nclass LoggerImpl {\n\n    constructor(public activeLogLevel: LogLevel = LogLevel.Warning, private subscribers: LogListener[] = []) { }\n\n    public subscribe(listener: LogListener): void {\n        this.subscribers.push(listener);\n    }\n\n    public clearSubscribers(): LogListener[] {\n        const s = this.subscribers.slice(0);\n        this.subscribers.length = 0;\n        return s;\n    }\n\n    public get count(): number {\n        return this.subscribers.length;\n    }\n\n    public write(message: string, level: LogLevel = LogLevel.Info) {\n        this.log({ level: level, message: message });\n    }\n\n    public log(entry: LogEntry) {\n        if (entry !== undefined && this.activeLogLevel <= entry.level) {\n            this.subscribers.map(subscriber => subscriber.log(entry));\n        }\n    }\n}\n","/**\n * A set of logging levels\n */\nexport const enum LogLevel {\n    Verbose = 0,\n    Info = 1,\n    Warning = 2,\n    Error = 3,\n    Off = 99,\n}\n","import { LogEntry } from \"./logentry\";\nimport { LogLevel } from \"./loglevel\";\n\n/**\n * Interface that defines a log listner\n *\n */\nexport interface LogListener {\n    /**\n     * Any associated data that a given logging listener may choose to log or ignore\n     *\n     * @param entry The information to be logged\n     */\n    log(entry: LogEntry): void;\n}\n\n/**\n * Implementation of LogListener which logs to the console\n *\n */\nexport class ConsoleListener implements LogListener {\n\n    /**\n     * Any associated data that a given logging listener may choose to log or ignore\n     *\n     * @param entry The information to be logged\n     */\n    public log(entry: LogEntry): void {\n\n        const msg = this.format(entry);\n\n        switch (entry.level) {\n            case LogLevel.Verbose:\n            case LogLevel.Info:\n                console.log(msg);\n                break;\n            case LogLevel.Warning:\n                console.warn(msg);\n                break;\n            case LogLevel.Error:\n                console.error(msg);\n                break;\n        }\n    }\n\n    /**\n     * Formats the message\n     *\n     * @param entry The information to format into a string\n     */\n    private format(entry: LogEntry): string {\n        const msg = [];\n        msg.push(\"Message: \" + entry.message);\n        if (entry.data !== undefined) {\n            try {\n                msg.push(\" Data: \" + JSON.stringify(entry.data));\n            } catch (e) {\n                msg.push(` Data: Error in stringify of supplied data ${e}`);\n            }\n        }\n\n        return msg.join(\"\");\n    }\n}\n\n/**\n * Implementation of LogListener which logs to the supplied function\n *\n */\nexport class FunctionListener implements LogListener {\n\n    /**\n     * Creates a new instance of the FunctionListener class\n     *\n     * @constructor\n     * @param  method The method to which any logging data will be passed\n     */\n    constructor(private method: (entry: LogEntry) => void) { }\n\n    /**\n     * Any associated data that a given logging listener may choose to log or ignore\n     *\n     * @param entry The information to be logged\n     */\n    public log(entry: LogEntry): void {\n        this.method(entry);\n    }\n}\n"],"names":["LogLevel"],"mappings":"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"}