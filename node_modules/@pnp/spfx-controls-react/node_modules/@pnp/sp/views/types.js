import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { body } from "@pnp/odata";
import { _SharePointQueryableInstance, _SharePointQueryableCollection, spInvokableFactory, deleteable, } from "../sharepointqueryable";
import { metadata } from "../utils/metadata";
import { defaultPath } from "../decorators";
import { spPost } from "../operations";
import { tag } from "../telemetry";
var _Views = /** @class */ (function (_super) {
    __extends(_Views, _super);
    function _Views() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets a view by guid id
     *
     * @param id The GUID id of the view
     */
    _Views.prototype.getById = function (id) {
        return View(this).concat("('" + id + "')");
    };
    /**
     * Gets a view by title (case-sensitive)
     *
     * @param title The case-sensitive title of the view
     */
    _Views.prototype.getByTitle = function (title) {
        return View(this, "getByTitle('" + title + "')");
    };
    /**
     * Adds a new view to the collection
     *
     * @param title The new views's title
     * @param personalView True if this is a personal view, otherwise false, default = false
     * @param additionalSettings Will be passed as part of the view creation body
     */
    _Views.prototype.add = function (title, personalView, additionalSettings) {
        if (personalView === void 0) { personalView = false; }
        if (additionalSettings === void 0) { additionalSettings = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = body(Object.assign(metadata("SP.View"), {
                            "PersonalView": personalView,
                            "Title": title,
                        }, additionalSettings));
                        return [4 /*yield*/, spPost(this.clone(Views, null), postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                data: data,
                                view: this.getById(data.Id),
                            }];
                }
            });
        });
    };
    __decorate([
        tag("vs.add")
    ], _Views.prototype, "add", null);
    _Views = __decorate([
        defaultPath("views")
    ], _Views);
    return _Views;
}(_SharePointQueryableCollection));
export { _Views };
export var Views = spInvokableFactory(_Views);
var _View = /** @class */ (function (_super) {
    __extends(_View, _super);
    function _View() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.delete = deleteable("vw");
        /**
         * Updates this view intance with the supplied properties
         *
         * @param properties A plain object hash of values to update for the view
         */
        _this.update = _this._update("SP.View", function (data) { return ({ data: data, view: _this }); });
        return _this;
    }
    Object.defineProperty(_View.prototype, "fields", {
        get: function () {
            return ViewFields(this);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns the list view as HTML.
     *
     */
    _View.prototype.renderAsHtml = function () {
        return this.clone(View, "renderashtml")();
    };
    /**
     * Sets the view schema
     *
     * @param viewXml The view XML to set
     */
    _View.prototype.setViewXml = function (viewXml) {
        return spPost(this.clone(View, "SetViewXml"), body({ viewXml: viewXml }));
    };
    __decorate([
        tag("v.renderAsHtml")
    ], _View.prototype, "renderAsHtml", null);
    __decorate([
        tag("v.setViewXml")
    ], _View.prototype, "setViewXml", null);
    return _View;
}(_SharePointQueryableInstance));
export { _View };
export var View = spInvokableFactory(_View);
var _ViewFields = /** @class */ (function (_super) {
    __extends(_ViewFields, _super);
    function _ViewFields() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets a value that specifies the XML schema that represents the collection.
     */
    _ViewFields.prototype.getSchemaXml = function () {
        return this.clone(ViewFields, "schemaxml")();
    };
    /**
     * Adds the field with the specified field internal name or display name to the collection.
     *
     * @param fieldTitleOrInternalName The case-sensitive internal name or display name of the field to add.
     */
    _ViewFields.prototype.add = function (fieldTitleOrInternalName) {
        return spPost(this.clone(ViewFields, "addviewfield('" + fieldTitleOrInternalName + "')"));
    };
    /**
     * Moves the field with the specified field internal name to the specified position in the collection.
     *
     * @param field The case-sensitive internal name of the field to move.
     * @param index The zero-based index of the new position for the field.
     */
    _ViewFields.prototype.move = function (field, index) {
        return spPost(this.clone(ViewFields, "moveviewfieldto"), body({ field: field, index: index }));
    };
    /**
     * Removes all the fields from the collection.
     */
    _ViewFields.prototype.removeAll = function () {
        return spPost(this.clone(ViewFields, "removeallviewfields"));
    };
    /**
     * Removes the field with the specified field internal name from the collection.
     *
     * @param fieldInternalName The case-sensitive internal name of the field to remove from the view.
     */
    _ViewFields.prototype.remove = function (fieldInternalName) {
        return spPost(this.clone(ViewFields, "removeviewfield('" + fieldInternalName + "')"));
    };
    __decorate([
        tag("vfs.getSchemaXml")
    ], _ViewFields.prototype, "getSchemaXml", null);
    __decorate([
        tag("vfs.add")
    ], _ViewFields.prototype, "add", null);
    __decorate([
        tag("vfs.move")
    ], _ViewFields.prototype, "move", null);
    __decorate([
        tag("vfs.removeAll")
    ], _ViewFields.prototype, "removeAll", null);
    __decorate([
        tag("vfs.remove")
    ], _ViewFields.prototype, "remove", null);
    _ViewFields = __decorate([
        defaultPath("viewfields")
    ], _ViewFields);
    return _ViewFields;
}(_SharePointQueryableCollection));
export { _ViewFields };
export var ViewFields = spInvokableFactory(_ViewFields);
export var ViewScope;
(function (ViewScope) {
    ViewScope[ViewScope["DefaultValue"] = 0] = "DefaultValue";
    ViewScope[ViewScope["Recursive"] = 1] = "Recursive";
    ViewScope[ViewScope["RecursiveAll"] = 2] = "RecursiveAll";
    ViewScope[ViewScope["FilesOnly"] = 3] = "FilesOnly";
})(ViewScope || (ViewScope = {}));
//# sourceMappingURL=types.js.map