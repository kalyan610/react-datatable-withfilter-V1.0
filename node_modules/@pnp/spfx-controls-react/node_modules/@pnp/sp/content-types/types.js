import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { body } from "@pnp/odata";
import { SharePointQueryableCollection, _SharePointQueryableInstance, _SharePointQueryableCollection, spInvokableFactory, deleteable, } from "../sharepointqueryable";
import { defaultPath } from "../decorators";
import { metadata } from "../utils/metadata";
import { spPost } from "../operations";
import { tag } from "../telemetry";
var _ContentTypes = /** @class */ (function (_super) {
    __extends(_ContentTypes, _super);
    function _ContentTypes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds an existing contenttype to a content type collection
     *
     * @param contentTypeId in the following format, for example: 0x010102
     */
    _ContentTypes.prototype.addAvailableContentType = function (contentTypeId) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, spPost(this.clone(ContentTypes, "addAvailableContentType"), body({ "contentTypeId": contentTypeId }))];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                contentType: this.getById(data.id),
                                data: data,
                            }];
                }
            });
        });
    };
    /**
     * Gets a ContentType by content type id
     * @param id The id of the content type to get, in the following format, for example: 0x010102
     */
    _ContentTypes.prototype.getById = function (id) {
        return tag.configure(ContentType(this).concat("('" + id + "')"), "cts.getById");
    };
    /**
     * Adds a new content type to the collection
     *
     * @param id The desired content type id for the new content type (also determines the parent content type)
     * @param name The name of the content type
     * @param description The description of the content type
     * @param group The group in which to add the content type
     * @param additionalSettings Any additional settings to provide when creating the content type
     *
     */
    _ContentTypes.prototype.add = function (id, name, description, group, additionalSettings) {
        if (description === void 0) { description = ""; }
        if (group === void 0) { group = "Custom Content Types"; }
        if (additionalSettings === void 0) { additionalSettings = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = body(Object.assign(metadata("SP.ContentType"), {
                            "Description": description,
                            "Group": group,
                            "Id": { "StringValue": id },
                            "Name": name,
                        }, additionalSettings));
                        return [4 /*yield*/, spPost(this, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, { contentType: this.getById(data.id), data: data }];
                }
            });
        });
    };
    __decorate([
        tag("cts.addAvailableContentType")
    ], _ContentTypes.prototype, "addAvailableContentType", null);
    __decorate([
        tag("cts.add")
    ], _ContentTypes.prototype, "add", null);
    _ContentTypes = __decorate([
        defaultPath("contenttypes")
    ], _ContentTypes);
    return _ContentTypes;
}(_SharePointQueryableCollection));
export { _ContentTypes };
export var ContentTypes = spInvokableFactory(_ContentTypes);
var _ContentType = /** @class */ (function (_super) {
    __extends(_ContentType, _super);
    function _ContentType() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.delete = deleteable("ct");
        return _this;
    }
    Object.defineProperty(_ContentType.prototype, "fieldLinks", {
        /**
         * Gets the column (also known as field) references in the content type.
         */
        get: function () {
            return tag.configure(FieldLinks(this), "ct.fieldLinks");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_ContentType.prototype, "fields", {
        /**
         * Gets a value that specifies the collection of fields for the content type.
         */
        get: function () {
            return tag.configure(SharePointQueryableCollection(this, "fields"), "ct.fields");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_ContentType.prototype, "parent", {
        /**
         * Gets the parent content type of the content type.
         */
        get: function () {
            return tag.configure(ContentType(this, "parent"), "ct.parent");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_ContentType.prototype, "workflowAssociations", {
        /**
         * Gets a value that specifies the collection of workflow associations for the content type.
         */
        get: function () {
            return tag.configure(SharePointQueryableCollection(this, "workflowAssociations"), "ct.workflowAssociations");
        },
        enumerable: false,
        configurable: true
    });
    return _ContentType;
}(_SharePointQueryableInstance));
export { _ContentType };
export var ContentType = spInvokableFactory(_ContentType);
var _FieldLinks = /** @class */ (function (_super) {
    __extends(_FieldLinks, _super);
    function _FieldLinks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
    *  Gets a FieldLink by GUID id
    *
    * @param id The GUID id of the field link
    */
    _FieldLinks.prototype.getById = function (id) {
        return tag.configure(FieldLink(this).concat("(guid'" + id + "')"), "fls.getById");
    };
    _FieldLinks = __decorate([
        defaultPath("fieldlinks")
    ], _FieldLinks);
    return _FieldLinks;
}(_SharePointQueryableCollection));
export { _FieldLinks };
export var FieldLinks = spInvokableFactory(_FieldLinks);
var _FieldLink = /** @class */ (function (_super) {
    __extends(_FieldLink, _super);
    function _FieldLink() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return _FieldLink;
}(_SharePointQueryableInstance));
export { _FieldLink };
export var FieldLink = spInvokableFactory(_FieldLink);
//# sourceMappingURL=types.js.map