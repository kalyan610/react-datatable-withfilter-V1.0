import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { _SharePointQueryableInstance, _SharePointQueryableCollection, _SharePointQueryable, spInvokableFactory, deleteable, } from "../sharepointqueryable";
import { assign } from "@pnp/common";
import { metadata } from "../utils/metadata";
import { body, headers } from "@pnp/odata";
import { defaultPath } from "../decorators";
import { spPost } from "../operations";
import { tag } from "../telemetry";
/**
 * Represents a collection of navigation nodes
 *
 */
var _NavigationNodes = /** @class */ (function (_super) {
    __extends(_NavigationNodes, _super);
    function _NavigationNodes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets a navigation node by id
     *
     * @param id The id of the node
     */
    _NavigationNodes.prototype.getById = function (id) {
        return tag.configure(NavigationNode(this).concat("(" + id + ")"), "nns.getById");
    };
    /**
     * Adds a new node to the collection
     *
     * @param title Display name of the node
     * @param url The url of the node
     * @param visible If true the node is visible, otherwise it is hidden (default: true)
     */
    _NavigationNodes.prototype.add = function (title, url, visible) {
        if (visible === void 0) { visible = true; }
        return __awaiter(this, void 0, void 0, function () {
            var postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = body(assign(metadata("SP.NavigationNode"), {
                            IsVisible: visible,
                            Title: title,
                            Url: url,
                        }));
                        return [4 /*yield*/, spPost(this.clone(NavigationNodes, null), postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                data: data,
                                node: this.getById(data.Id),
                            }];
                }
            });
        });
    };
    /**
     * Moves a node to be after another node in the navigation
     *
     * @param nodeId Id of the node to move
     * @param previousNodeId Id of the node after which we move the node specified by nodeId
     */
    _NavigationNodes.prototype.moveAfter = function (nodeId, previousNodeId) {
        var postBody = body({
            nodeId: nodeId,
            previousNodeId: previousNodeId,
        });
        return spPost(this.clone(NavigationNodes, "MoveAfter"), postBody);
    };
    __decorate([
        tag("nns.add")
    ], _NavigationNodes.prototype, "add", null);
    __decorate([
        tag("nns.moveAfter")
    ], _NavigationNodes.prototype, "moveAfter", null);
    return _NavigationNodes;
}(_SharePointQueryableCollection));
export { _NavigationNodes };
export var NavigationNodes = spInvokableFactory(_NavigationNodes);
/**
 * Represents an instance of a navigation node
 *
 */
var _NavigationNode = /** @class */ (function (_super) {
    __extends(_NavigationNode, _super);
    function _NavigationNode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.delete = deleteable("nn");
        return _this;
    }
    Object.defineProperty(_NavigationNode.prototype, "children", {
        /**
         * Represents the child nodes of this node
         */
        get: function () {
            return tag.configure(NavigationNodes(this, "children"), "nn.children");
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Updates this node
     *
     * @param properties Properties used to update this node
     */
    _NavigationNode.prototype.update = function (properties) {
        return __awaiter(this, void 0, void 0, function () {
            var postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = body(assign(metadata("SP.NavigationNode"), properties), headers({ "X-HTTP-Method": "MERGE" }));
                        return [4 /*yield*/, spPost(this, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                data: data,
                                node: this,
                            }];
                }
            });
        });
    };
    __decorate([
        tag("nn.update")
    ], _NavigationNode.prototype, "update", null);
    return _NavigationNode;
}(_SharePointQueryableInstance));
export { _NavigationNode };
export var NavigationNode = spInvokableFactory(_NavigationNode);
/**
 * Exposes the navigation components
 *
 */
var _Navigation = /** @class */ (function (_super) {
    __extends(_Navigation, _super);
    function _Navigation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_Navigation.prototype, "quicklaunch", {
        /**
         * Gets the quicklaunch navigation nodes for the current context
         *
         */
        get: function () {
            return tag.configure(NavigationNodes(this, "quicklaunch"), "n.quicklaunch");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Navigation.prototype, "topNavigationBar", {
        /**
         * Gets the top bar navigation nodes for the current context
         *
         */
        get: function () {
            return tag.configure(NavigationNodes(this, "topnavigationbar"), "n.topnavigationbar");
        },
        enumerable: false,
        configurable: true
    });
    _Navigation = __decorate([
        defaultPath("navigation")
    ], _Navigation);
    return _Navigation;
}(_SharePointQueryable));
export { _Navigation };
export var Navigation = spInvokableFactory(_Navigation);
/**
 * Represents the top level navigation service
 */
var _NavigationService = /** @class */ (function (_super) {
    __extends(_NavigationService, _super);
    function _NavigationService(path) {
        if (path === void 0) { path = null; }
        return _super.call(this, "_api/navigation", path) || this;
    }
    /**
     * The MenuState service operation returns a Menu-State (dump) of a SiteMapProvider on a site.
     *
     * @param menuNodeKey MenuNode.Key of the start node within the SiteMapProvider If no key is provided the SiteMapProvider.RootNode will be the root of the menu state.
     * @param depth Depth of the dump. If no value is provided a dump with the depth of 10 is returned
     * @param mapProviderName The name identifying the SiteMapProvider to be used
     * @param customProperties comma seperated list of custom properties to be returned.
     */
    _NavigationService.prototype.getMenuState = function (menuNodeKey, depth, mapProviderName, customProperties) {
        if (menuNodeKey === void 0) { menuNodeKey = null; }
        if (depth === void 0) { depth = 10; }
        if (mapProviderName === void 0) { mapProviderName = null; }
        if (customProperties === void 0) { customProperties = null; }
        return spPost(NavigationService("MenuState"), body({
            customProperties: customProperties,
            depth: depth,
            mapProviderName: mapProviderName,
            menuNodeKey: menuNodeKey,
        }));
    };
    /**
     * Tries to get a SiteMapNode.Key for a given URL within a site collection.
     *
     * @param currentUrl A url representing the SiteMapNode
     * @param mapProviderName The name identifying the SiteMapProvider to be used
     */
    _NavigationService.prototype.getMenuNodeKey = function (currentUrl, mapProviderName) {
        if (mapProviderName === void 0) { mapProviderName = null; }
        return spPost(NavigationService("MenuNodeKey"), body({
            currentUrl: currentUrl,
            mapProviderName: mapProviderName,
        }));
    };
    __decorate([
        tag("ns.getMenuState")
    ], _NavigationService.prototype, "getMenuState", null);
    __decorate([
        tag("ns.getMenuNodeKey")
    ], _NavigationService.prototype, "getMenuNodeKey", null);
    return _NavigationService;
}(_SharePointQueryable));
export { _NavigationService };
export var NavigationService = function (path) { return new _NavigationService(path); };
//# sourceMappingURL=types.js.map