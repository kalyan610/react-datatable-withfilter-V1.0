import { __decorate, __extends } from "tslib";
import { defaultPath } from "../decorators";
import { _SharePointQueryableCollection, spInvokableFactory, _SharePointQueryableInstance } from "../sharepointqueryable";
// TODO::
// import { tag } from "../telemetry";
/**
 * Describes a collection of Form objects
 *
 */
var _TermStore = /** @class */ (function (_super) {
    __extends(_TermStore, _super);
    function _TermStore() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_TermStore.prototype, "termGroups", {
        /**
         * Gets the term groups associated with this tenant
         */
        get: function () {
            return TermGroups(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_TermStore.prototype, "groups", {
        /**
         * Gets the term groups associated with this tenant
         */
        get: function () {
            return TermGroups(this, "groups");
        },
        enumerable: false,
        configurable: true
    });
    _TermStore = __decorate([
        defaultPath("_api/v2.1/termstore")
    ], _TermStore);
    return _TermStore;
}(_SharePointQueryableInstance));
export { _TermStore };
export var TermStore = spInvokableFactory(_TermStore);
var _TermGroups = /** @class */ (function (_super) {
    __extends(_TermGroups, _super);
    function _TermGroups() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets a term group by id
     *
     * @param id Id of the term group to access
     */
    _TermGroups.prototype.getById = function (id) {
        return TermGroup(this, id);
    };
    _TermGroups = __decorate([
        defaultPath("termgroups")
    ], _TermGroups);
    return _TermGroups;
}(_SharePointQueryableCollection));
export { _TermGroups };
export var TermGroups = spInvokableFactory(_TermGroups);
var _TermGroup = /** @class */ (function (_super) {
    __extends(_TermGroup, _super);
    function _TermGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_TermGroup.prototype, "termSets", {
        /**
         * Gets the term sets associated with this tenant
         */
        get: function () {
            return TermSets(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_TermGroup.prototype, "sets", {
        /**
         * Gets the term groups associated with this tenant
         */
        get: function () {
            return TermSets(this, "sets");
        },
        enumerable: false,
        configurable: true
    });
    return _TermGroup;
}(_SharePointQueryableInstance));
export { _TermGroup };
export var TermGroup = spInvokableFactory(_TermGroup);
var _TermSets = /** @class */ (function (_super) {
    __extends(_TermSets, _super);
    function _TermSets() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets a term group by id
     *
     * @param id Id of the term group to access
     */
    _TermSets.prototype.getById = function (id) {
        return TermSet(this, id);
    };
    _TermSets = __decorate([
        defaultPath("termsets")
    ], _TermSets);
    return _TermSets;
}(_SharePointQueryableCollection));
export { _TermSets };
export var TermSets = spInvokableFactory(_TermSets);
var _TermSet = /** @class */ (function (_super) {
    __extends(_TermSet, _super);
    function _TermSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_TermSet.prototype, "terms", {
        get: function () {
            return Terms(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_TermSet.prototype, "parentGroup", {
        get: function () {
            return TermGroup(this, "parentGroup");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_TermSet.prototype, "children", {
        get: function () {
            return Terms(this, "children");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_TermSet.prototype, "relations", {
        get: function () {
            return Relations(this);
        },
        enumerable: false,
        configurable: true
    });
    return _TermSet;
}(_SharePointQueryableInstance));
export { _TermSet };
export var TermSet = spInvokableFactory(_TermSet);
var _Terms = /** @class */ (function (_super) {
    __extends(_Terms, _super);
    function _Terms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets a term group by id
     *
     * @param id Id of the term group to access
     */
    _Terms.prototype.getById = function (id) {
        return Term(this, id);
    };
    _Terms = __decorate([
        defaultPath("terms")
    ], _Terms);
    return _Terms;
}(_SharePointQueryableCollection));
export { _Terms };
export var Terms = spInvokableFactory(_Terms);
var _Term = /** @class */ (function (_super) {
    __extends(_Term, _super);
    function _Term() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_Term.prototype, "parent", {
        get: function () {
            return Term(this, "parent");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Term.prototype, "children", {
        get: function () {
            return Terms(this, "children");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Term.prototype, "relations", {
        get: function () {
            return Relations(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Term.prototype, "set", {
        get: function () {
            return TermSet(this, "set");
        },
        enumerable: false,
        configurable: true
    });
    return _Term;
}(_SharePointQueryableInstance));
export { _Term };
export var Term = spInvokableFactory(_Term);
var _Relations = /** @class */ (function (_super) {
    __extends(_Relations, _super);
    function _Relations() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets a term group by id
     *
     * @param id Id of the term group to access
     */
    _Relations.prototype.getById = function (id) {
        return Relation(this, id);
    };
    _Relations = __decorate([
        defaultPath("relations")
    ], _Relations);
    return _Relations;
}(_SharePointQueryableCollection));
export { _Relations };
export var Relations = spInvokableFactory(_Relations);
var _Relation = /** @class */ (function (_super) {
    __extends(_Relation, _super);
    function _Relation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_Relation.prototype, "fromTerm", {
        get: function () {
            return Term(this, "fromTerm");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Relation.prototype, "toTerm", {
        get: function () {
            return Term(this, "toTerm");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Relation.prototype, "set", {
        get: function () {
            return TermSet(this, "set");
        },
        enumerable: false,
        configurable: true
    });
    return _Relation;
}(_SharePointQueryableInstance));
export { _Relation };
export var Relation = spInvokableFactory(_Relation);
//# sourceMappingURL=types.js.map