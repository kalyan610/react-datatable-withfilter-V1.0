import { RuntimeConfig, FetchClient, objectDefinedNotNull, } from "@pnp/common";
export var emptyGuid = "00000000-0000-0000-0000-000000000000";
export function setup(config) {
    RuntimeConfig.assign(config);
}
var SPRuntimeConfigImpl = /** @class */ (function () {
    function SPRuntimeConfigImpl() {
    }
    Object.defineProperty(SPRuntimeConfigImpl.prototype, "headers", {
        get: function () {
            var spPart = RuntimeConfig.get("sp");
            if (spPart !== undefined && spPart.headers !== undefined) {
                return spPart.headers;
            }
            return {};
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SPRuntimeConfigImpl.prototype, "baseUrl", {
        get: function () {
            var spPart = RuntimeConfig.get("sp");
            if (spPart !== undefined && spPart.baseUrl !== undefined) {
                return spPart.baseUrl;
            }
            if (objectDefinedNotNull(RuntimeConfig.spfxContext)) {
                return RuntimeConfig.spfxContext.pageContext.web.absoluteUrl;
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SPRuntimeConfigImpl.prototype, "fetchClientFactory", {
        get: function () {
            var spPart = RuntimeConfig.get("sp");
            if (spPart !== undefined && spPart.fetchClientFactory !== undefined) {
                return spPart.fetchClientFactory;
            }
            else {
                return function () { return new FetchClient(); };
            }
        },
        enumerable: false,
        configurable: true
    });
    return SPRuntimeConfigImpl;
}());
export { SPRuntimeConfigImpl };
export var SPRuntimeConfig = new SPRuntimeConfigImpl();
//# sourceMappingURL=splibconfig.js.map