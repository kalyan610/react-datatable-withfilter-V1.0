import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { body } from "@pnp/odata";
import { _SharePointQueryableInstance, _SharePointQueryableCollection, spInvokableFactory, } from "../sharepointqueryable";
import { defaultPath } from "../decorators";
import { spPost } from "../operations";
import { tag } from "../telemetry";
var _Features = /** @class */ (function (_super) {
    __extends(_Features, _super);
    function _Features() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds (activates) the specified feature
     *
     * @param id The Id of the feature (GUID)
     * @param force If true the feature activation will be forced
     */
    _Features.prototype.add = function (id, force) {
        if (force === void 0) { force = false; }
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, spPost(this.clone(Features, "add"), body({
                            featdefScope: 0,
                            featureId: id,
                            force: force,
                        }))];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                data: data,
                                feature: this.getById(id),
                            }];
                }
            });
        });
    };
    /**
     * Gets a feature from the collection with the specified guid
     *
     * @param id The Id of the feature (GUID)
     */
    _Features.prototype.getById = function (id) {
        var feature = Feature(this);
        feature.concat("('" + id + "')");
        return tag.configure(feature, "fes.getById");
    };
    /**
     * Removes (deactivates) a feature from the collection
     *
     * @param id The Id of the feature (GUID)
     * @param force If true the feature deactivation will be forced
     */
    _Features.prototype.remove = function (id, force) {
        if (force === void 0) { force = false; }
        return spPost(this.clone(Features, "remove"), body({
            featureId: id,
            force: force,
        }));
    };
    __decorate([
        tag("fes.add")
    ], _Features.prototype, "add", null);
    __decorate([
        tag("fes.remove")
    ], _Features.prototype, "remove", null);
    _Features = __decorate([
        defaultPath("features")
    ], _Features);
    return _Features;
}(_SharePointQueryableCollection));
export { _Features };
export var Features = spInvokableFactory(_Features);
var _Feature = /** @class */ (function (_super) {
    __extends(_Feature, _super);
    function _Feature() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Removes (deactivates) the feature
     *
     * @param force If true the feature deactivation will be forced
     */
    _Feature.prototype.deactivate = function (force) {
        if (force === void 0) { force = false; }
        return __awaiter(this, void 0, void 0, function () {
            var removeDependency, feature, promise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        removeDependency = this.addBatchDependency();
                        return [4 /*yield*/, Feature(this).select("DefinitionId")()];
                    case 1:
                        feature = _a.sent();
                        promise = this.getParent(Features, this.parentUrl, "", this.batch).remove(feature.DefinitionId, force);
                        removeDependency();
                        return [2 /*return*/, promise];
                }
            });
        });
    };
    __decorate([
        tag("fe.deactivate")
    ], _Feature.prototype, "deactivate", null);
    return _Feature;
}(_SharePointQueryableInstance));
export { _Feature };
export var Feature = spInvokableFactory(_Feature);
//# sourceMappingURL=types.js.map