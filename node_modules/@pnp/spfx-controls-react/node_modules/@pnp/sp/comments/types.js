import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { defaultPath } from "../decorators";
import { _SharePointQueryableInstance, _SharePointQueryableCollection, spInvokableFactory, } from "../sharepointqueryable";
import { assign } from "@pnp/common";
import { odataUrlFrom } from "../odata";
import { metadata } from "../utils/metadata";
import { body } from "@pnp/odata";
import { spPost } from "../operations";
import { tag } from "../telemetry";
var _Comments = /** @class */ (function (_super) {
    __extends(_Comments, _super);
    function _Comments() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds a new comment to this collection
     *
     * @param info Comment information to add
     */
    _Comments.prototype.add = function (info) {
        return __awaiter(this, void 0, void 0, function () {
            var postBody, d;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof info === "string") {
                            info = { text: info };
                        }
                        postBody = body(assign(metadata("Microsoft.SharePoint.Comments.comment"), info));
                        return [4 /*yield*/, spPost(this.clone(Comments, null), postBody)];
                    case 1:
                        d = _a.sent();
                        return [2 /*return*/, assign(this.getById(d.id), d)];
                }
            });
        });
    };
    /**
     * Gets a comment by id
     *
     * @param id Id of the comment to load
     */
    _Comments.prototype.getById = function (id) {
        return tag.configure(Comment(this).concat("(" + id + ")"), "coms.getById");
    };
    /**
     * Deletes all the comments in this collection
     */
    _Comments.prototype.clear = function () {
        return spPost(tag.configure(this.clone(Comments, "DeleteAll"), "coms.clear"));
    };
    __decorate([
        tag("coms.add")
    ], _Comments.prototype, "add", null);
    _Comments = __decorate([
        defaultPath("comments")
    ], _Comments);
    return _Comments;
}(_SharePointQueryableCollection));
export { _Comments };
export var Comments = spInvokableFactory(_Comments);
var _Comment = /** @class */ (function (_super) {
    __extends(_Comment, _super);
    function _Comment() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_Comment.prototype, "replies", {
        /**
         * A comment's replies
         */
        get: function () {
            return tag.configure(Replies(this), "com.replies");
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Likes the comment as the current user
     */
    _Comment.prototype.like = function () {
        return spPost(this.clone(Comment, "Like"));
    };
    /**
     * Unlikes the comment as the current user
     */
    _Comment.prototype.unlike = function () {
        return spPost(this.clone(Comment, "Unlike"));
    };
    /**
     * Deletes this comment
     */
    _Comment.prototype.delete = function () {
        return spPost(this.clone(Comment, "DeleteComment"));
    };
    __decorate([
        tag("com.like")
    ], _Comment.prototype, "like", null);
    __decorate([
        tag("com.unlike")
    ], _Comment.prototype, "unlike", null);
    __decorate([
        tag("com.delete")
    ], _Comment.prototype, "delete", null);
    return _Comment;
}(_SharePointQueryableInstance));
export { _Comment };
export var Comment = spInvokableFactory(_Comment);
var _Replies = /** @class */ (function (_super) {
    __extends(_Replies, _super);
    function _Replies() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds a new reply to this collection
     *
     * @param info Comment information to add
     */
    _Replies.prototype.add = function (info) {
        return __awaiter(this, void 0, void 0, function () {
            var postBody, d;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof info === "string") {
                            info = { text: info };
                        }
                        postBody = body(assign(metadata("Microsoft.SharePoint.Comments.comment"), info));
                        return [4 /*yield*/, spPost(this.clone(Replies, null), postBody)];
                    case 1:
                        d = _a.sent();
                        return [2 /*return*/, assign(Comment(odataUrlFrom(d)), d)];
                }
            });
        });
    };
    __decorate([
        tag("reps.add")
    ], _Replies.prototype, "add", null);
    _Replies = __decorate([
        defaultPath("replies")
    ], _Replies);
    return _Replies;
}(_SharePointQueryableCollection));
export { _Replies };
export var Replies = spInvokableFactory(_Replies);
//# sourceMappingURL=types.js.map