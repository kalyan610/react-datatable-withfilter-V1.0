import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { dateAdd, hOP } from "@pnp/common";
import { _SharePointQueryableInstance, SharePointQueryableCollection, _SharePointQueryableCollection, spInvokableFactory, } from "../sharepointqueryable";
import { defaultPath } from "../decorators";
import { spODataEntity } from "../odata";
import { spPost } from "../operations";
import { tag } from "../telemetry";
var _RegionalSettings = /** @class */ (function (_super) {
    __extends(_RegionalSettings, _super);
    function _RegionalSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_RegionalSettings.prototype, "installedLanguages", {
        /**
         * Gets the collection of languages used in a server farm.
         * ** Please use getInstalledLanguages instead of this method **
         */
        get: function () {
            console.warn("Deprecated: RegionalSettings.installedLanguages is deprecated, please use RegionalSettings.getInstalledLanguages");
            return tag.configure(SharePointQueryableCollection(this, "installedlanguages"), "rs.installedLanguages");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_RegionalSettings.prototype, "timeZone", {
        /**
         * Gets time zone
         */
        get: function () {
            return tag.configure(TimeZone(this), "rs.tz");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_RegionalSettings.prototype, "timeZones", {
        /**
         * Gets time zones
         */
        get: function () {
            return tag.configure(TimeZones(this), "rs.tzs");
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets the collection of languages used in a server farm.
     */
    _RegionalSettings.prototype.getInstalledLanguages = function () {
        return __awaiter(this, void 0, void 0, function () {
            var results;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, tag.configure(SharePointQueryableCollection(this, "installedlanguages"), "rs.getInstalledLanguages")()];
                    case 1:
                        results = _a.sent();
                        return [2 /*return*/, results.Items];
                }
            });
        });
    };
    _RegionalSettings = __decorate([
        defaultPath("regionalsettings")
    ], _RegionalSettings);
    return _RegionalSettings;
}(_SharePointQueryableInstance));
export { _RegionalSettings };
export var RegionalSettings = spInvokableFactory(_RegionalSettings);
var _TimeZone = /** @class */ (function (_super) {
    __extends(_TimeZone, _super);
    function _TimeZone() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets an Local Time by UTC Time
     *
     * @param utcTime UTC Time as Date or ISO String
     */
    _TimeZone.prototype.utcToLocalTime = function (utcTime) {
        return __awaiter(this, void 0, void 0, function () {
            var dateIsoString, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof utcTime === "string") {
                            dateIsoString = utcTime;
                        }
                        else {
                            dateIsoString = utcTime.toISOString();
                        }
                        return [4 /*yield*/, spPost(this.clone(TimeZone, "utctolocaltime('" + dateIsoString + "')"))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, hOP(res, "UTCToLocalTime") ? res.UTCToLocalTime : res];
                }
            });
        });
    };
    /**
     * Gets an UTC Time by Local Time
     *
     * @param localTime Local Time as Date or ISO String
     */
    _TimeZone.prototype.localTimeToUTC = function (localTime) {
        return __awaiter(this, void 0, void 0, function () {
            var dateIsoString, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof localTime === "string") {
                            dateIsoString = localTime;
                        }
                        else {
                            dateIsoString = dateAdd(localTime, "minute", localTime.getTimezoneOffset() * -1).toISOString();
                        }
                        return [4 /*yield*/, spPost(this.clone(TimeZone, "localtimetoutc('" + dateIsoString + "')"))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, hOP(res, "LocalTimeToUTC") ? res.LocalTimeToUTC : res];
                }
            });
        });
    };
    __decorate([
        tag("tz.utcToLocalTime")
    ], _TimeZone.prototype, "utcToLocalTime", null);
    __decorate([
        tag("tz.localTimeToUTC")
    ], _TimeZone.prototype, "localTimeToUTC", null);
    _TimeZone = __decorate([
        defaultPath("timezone")
    ], _TimeZone);
    return _TimeZone;
}(_SharePointQueryableInstance));
export { _TimeZone };
export var TimeZone = spInvokableFactory(_TimeZone);
var _TimeZones = /** @class */ (function (_super) {
    __extends(_TimeZones, _super);
    function _TimeZones() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets an TimeZone by id (see: https://msdn.microsoft.com/en-us/library/office/jj247008.aspx)
     *
     * @param id The integer id of the timezone to retrieve
     */
    _TimeZones.prototype.getById = function (id) {
        // do the post and merge the result into a TimeZone instance so the data and methods are available
        return spPost(this.clone(TimeZones, "GetById(" + id + ")").usingParser(spODataEntity(TimeZone)));
    };
    __decorate([
        tag("tzs.getById")
    ], _TimeZones.prototype, "getById", null);
    _TimeZones = __decorate([
        defaultPath("timezones")
    ], _TimeZones);
    return _TimeZones;
}(_SharePointQueryableCollection));
export { _TimeZones };
export var TimeZones = spInvokableFactory(_TimeZones);
//# sourceMappingURL=types.js.map