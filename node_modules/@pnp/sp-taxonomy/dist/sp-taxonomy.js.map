{"version":3,"file":"sp-taxonomy.js","sources":["../../../../packages/sp-taxonomy/src/labels.ts","../../../../packages/sp-taxonomy/src/terms.ts","../../../../packages/sp-taxonomy/src/termsets.ts","../../../../packages/sp-taxonomy/src/termgroup.ts","../../../../packages/sp-taxonomy/src/termstores.ts","../../../../packages/sp-taxonomy/src/session.ts","../../../../packages/sp-taxonomy/src/types.ts","../../../../packages/sp-taxonomy/src/utilities.ts","../../../../packages/sp-taxonomy/src/taxonomy.ts"],"sourcesContent":["import {\n    ClientSvcQueryable,\n    IClientSvcQueryable,\n    MethodParams,\n    ObjectPathQueue,\n    property,\n} from \"@pnp/sp-clientsvc\";\nimport { stringIsNullOrEmpty } from \"@pnp/common\";\n\n/**\n * Represents a collection of labels\n */\nexport interface ILabels extends IClientSvcQueryable {\n    /**\n     * Gets a label from the collection by its value\n     * \n     * @param value The value to retrieve\n     */\n    getByValue(value: string): ILabel;\n    /**\n     * Loads the data and merges with with the ILabel instances\n     */\n    get(): Promise<(ILabel & ILabelData)[]>;\n}\n\n/**\n * Represents a collection of labels\n */\nexport class Labels extends ClientSvcQueryable implements ILabels {\n\n    constructor(parent: ClientSvcQueryable | string = \"\", _objectPaths: ObjectPathQueue | null = null) {\n        super(parent, _objectPaths);\n\n        this._objectPaths.add(property(\"Labels\"));\n    }\n\n    /**\n     * Gets a label from the collection by its value\n     * \n     * @param value The value to retrieve\n     */\n    public getByValue(value: string): ILabel {\n\n        const params = MethodParams.build().string(value);\n        return this.getChild(Label, \"GetByValue\", params);\n    }\n\n    /**\n     * Loads the data and merges with with the ILabel instances\n     */\n    public get(): Promise<(ILabel & ILabelData)[]> {\n        return this.sendGetCollection<ILabelData, ILabel>((d: ILabelData) => {\n\n            if (!stringIsNullOrEmpty(d.Value)) {\n                return this.getByValue(d.Value);\n            }\n            throw Error(\"Could not find Value in Labels.get(). You must include at least one of these in your select fields.\");\n        });\n    }\n}\n\n/**\n * Represents the data contained in a label\n */\nexport interface ILabelData {\n    /**\n     * Is this the default label for this language\n     */\n    IsDefaultForLanguage?: boolean;\n    /**\n     * LCID language id\n     */\n    Language?: number;\n    /**\n     * Label value\n     */\n    Value?: string;\n}\n\n/**\n * Represents a label instance\n */\nexport interface ILabel extends IClientSvcQueryable {\n    /**\n     * Gets the data for this Label\n     */\n    get(): Promise<ILabelData & ILabel>;\n    /**\n     * Sets this label as the default\n     */\n    setAsDefaultForLanguage(): Promise<void>;\n    /**\n     * Deletes this label\n     */\n    delete(): Promise<void>;\n}\n\n/**\n * Represents a label instance\n */\nexport class Label extends ClientSvcQueryable implements ILabel {\n    /**\n     * Gets the data for this Label\n     */\n    public get(): Promise<ILabelData & ILabel> {\n        return this.sendGet<ILabelData, ILabel>(Label);\n    }\n\n    /**\n     * Sets this label as the default\n     */\n    public setAsDefaultForLanguage(): Promise<void> {\n        return this.invokeNonQuery(\"SetAsDefaultForLanguage\");\n    }\n\n    /**\n     * Deletes this label\n     */\n    public delete(): Promise<void> {\n        return this.invokeNonQuery(\"DeleteObject\");\n    }\n}\n","import { extend, sanitizeGuid, stringIsNullOrEmpty, getGUID } from \"@pnp/common\";\nimport {\n    ClientSvcQueryable,\n    IClientSvcQueryable,\n    MethodParams,\n    setProperty,\n} from \"@pnp/sp-clientsvc\";\nimport { ILabelData, ILabel, ILabels, Labels } from \"./labels\";\nimport { ITermSet, TermSet, ITermSets, TermSets } from \"./termsets\";\n\nexport interface ITerms extends IClientSvcQueryable {\n    get(): Promise<(ITermData & ITerm)[]>;\n    getById(id: string): ITerm;\n    getByName(name: string): ITerm;\n}\n\nexport interface ITermData {\n    CustomProperties?: any;\n    CustomSortOrder?: any | null;\n    Description?: string;\n    Id?: string;\n    IsAvailableForTagging?: boolean;\n    IsDeprecated?: boolean;\n    IsKeyword?: boolean;\n    IsPinned?: boolean;\n    IsPinnedRoot?: boolean;\n    IsReused?: boolean;\n    IsRoot?: boolean;\n    IsSourceTerm?: boolean;\n    LastModifiedDate?: string;\n    LocalCustomProperties?: any;\n    MergedTermIds?: any[];\n    Name?: string;\n    Owner?: string;\n    PathOfTerm?: string;\n    TermsCount?: number;\n}\n\nexport interface ITerm extends IClientSvcQueryable {\n    readonly labels: ILabels;\n    readonly parent: ITerm;\n    readonly pinSourceTermSet: ITermSet;\n    readonly reusedTerms: ITerms;\n    readonly sourceTerm: ITerm;\n    readonly terms: ITerms;\n    readonly termSet: ITermSet;\n    readonly termSets: ITermSets;\n    createLabel(name: string, lcid: number, isDefault?: boolean): Promise<ILabelData & ILabel>;\n    deprecate(doDeprecate: boolean): Promise<void>;\n    get(): Promise<(ITermData & ITerm)>;\n    addTerm(name: string, lcid: number, isAvailableForTagging?: boolean, id?: string): Promise<ITerm & ITermData>;\n    getDescription(lcid: number): Promise<string>;\n    setDescription(description: string, lcid: number): Promise<void>;\n    setLocalCustomProperty(name: string, value: string): Promise<void>;\n    update(properties: { Name: string }): Promise<ITermData & ITerm>;\n}\n\nexport class Terms extends ClientSvcQueryable implements ITerms {\n\n    /**\n     * Gets the terms in this collection\n     */\n    public get(): Promise<(ITermData & ITerm)[]> {\n        return this.sendGetCollection<ITermData, ITerm>((d: ITermData) => {\n\n            if (!stringIsNullOrEmpty(d.Name)) {\n                return this.getByName(d.Name);\n            } else if (!stringIsNullOrEmpty(d.Id)) {\n                return this.getById(d.Id);\n            }\n            throw Error(\"Could not find Name or Id in Terms.get(). You must include at least one of these in your select fields.\");\n        });\n    }\n\n    /**\n     * Gets a term by id\n     * \n     * @param id The id of the term\n     */\n    public getById(id: string): ITerm {\n        const params = MethodParams.build()\n            .string(sanitizeGuid(id));\n\n        return this.getChild(Term, \"GetById\", params);\n    }\n\n    /**\n     * Gets a term by name\n     * \n     * @param name Term name\n     */\n    public getByName(name: string): ITerm {\n\n        const params = MethodParams.build()\n            .string(name);\n\n        return this.getChild(Term, \"GetByName\", params);\n    }\n}\n\n/**\n * Represents the operations available on a given term\n */\nexport class Term extends ClientSvcQueryable implements ITerm {\n\n    public addTerm(name: string, lcid: number, isAvailableForTagging = true, id = getGUID()): Promise<ITerm & ITermData> {\n\n        const params = MethodParams.build()\n            .string(name)\n            .number(lcid)\n            .string(sanitizeGuid(id));\n\n        this._useCaching = false;\n        return this.invokeMethod<ITermData>(\"CreateTerm\", params,\n            setProperty(\"IsAvailableForTagging\", \"Boolean\", `${isAvailableForTagging}`))\n            .then(r => extend(this.termSet.getTermById(r.Id), r));\n    }\n\n    public get terms(): ITerms {\n        return this.getChildProperty(Terms, \"Terms\");\n    }\n\n    public get labels(): ILabels {\n        return new Labels(this);\n    }\n\n    public get parent(): ITerm {\n        return this.getChildProperty(Term, \"Parent\");\n    }\n\n    public get pinSourceTermSet(): ITermSet {\n        return this.getChildProperty(TermSet, \"PinSourceTermSet\");\n    }\n\n    public get reusedTerms(): ITerms {\n        return this.getChildProperty(Terms, \"ReusedTerms\");\n    }\n\n    public get sourceTerm(): ITerm {\n        return this.getChildProperty(Term, \"SourceTerm\");\n    }\n\n    public get termSet(): ITermSet {\n        return this.getChildProperty(TermSet, \"TermSet\");\n    }\n\n    public get termSets(): ITermSets {\n        return this.getChildProperty(TermSets, \"TermSets\");\n    }\n\n    /**\n     * Creates a new label for this Term\n     * \n     * @param name label value\n     * @param lcid language code\n     * @param isDefault Is the default label\n     */\n    public createLabel(name: string, lcid: number, isDefault = false): Promise<ILabelData & ILabel> {\n\n        const params = MethodParams.build()\n            .string(name)\n            .number(lcid)\n            .boolean(isDefault);\n\n        this._useCaching = false;\n        return this.invokeMethod<ILabelData>(\"CreateLabel\", params)\n            .then(r => extend(this.labels.getByValue(name), r));\n    }\n\n    /**\n     * Sets the deprecation flag on a term\n     * \n     * @param doDeprecate New value for the deprecation flag\n     */\n    public deprecate(doDeprecate: boolean): Promise<void> {\n\n        const params = MethodParams.build().boolean(doDeprecate);\n        return this.invokeNonQuery(\"Deprecate\", params);\n    }\n\n    /**\n     * Loads the term data\n     */\n    public get(): Promise<(ITermData & ITerm)> {\n        return this.sendGet<ITermData, ITerm>(Term);\n    }\n\n    /**\n     * Gets the appropriate description for a term\n     * \n     * @param lcid Language code\n     */\n    public getDescription(lcid: number): Promise<string> {\n\n        const params = MethodParams.build().number(lcid);\n        return this.invokeMethodAction<string>(\"GetDescription\", params);\n    }\n\n    /**\n     * Sets the description\n     * \n     * @param description Term description\n     * @param lcid Language code\n     */\n    public setDescription(description: string, lcid: number): Promise<void> {\n\n        const params = MethodParams.build().string(description).number(lcid);\n        return this.invokeNonQuery(\"SetDescription\", params);\n    }\n\n    /**\n     * Sets a custom property on this term\n     * \n     * @param name Property name\n     * @param value Property value\n     */\n    public setLocalCustomProperty(name: string, value: string): Promise<void> {\n\n        const params = MethodParams.build().string(name).string(value);\n        return this.invokeNonQuery(\"SetLocalCustomProperty\", params);\n    }\n\n    /**\n     * Updates the specified properties of this term, not all properties can be updated\n     * \n     * @param properties Plain object representing the properties and new values to update\n     */\n    public update(properties: { Name: string }): Promise<ITermData & ITerm> {\n        return this.invokeUpdate<ITermData, ITerm>(properties, Term);\n    }\n\n    /**\n     * Deletes a this term\n     * \n     */\n    public delete(): Promise<void> {\n        return this.invokeNonQuery(\"DeleteObject\");\n    }\n}\n","import { extend, getGUID, sanitizeGuid, stringIsNullOrEmpty } from \"@pnp/common\";\nimport { ClientSvcQueryable, IClientSvcQueryable, MethodParams, setProperty } from \"@pnp/sp-clientsvc\";\nimport { ITermGroup, TermGroup } from \"./termgroup\";\nimport { ITerm, ITermData, ITerms, Term, Terms } from \"./terms\";\n\nexport interface ITermSets extends IClientSvcQueryable {\n    getById(id: string): ITermSet;\n    getByName(name: string): ITermSet;\n    get(): Promise<(ITermSetData & ITermSet)[]>;\n}\n\nexport interface ITermSetData {\n    Contact?: string;\n    CreatedDate?: string;\n    CustomProperties?: any;\n    CustomSortOrder?: any | null;\n    Description?: string;\n    Id?: string;\n    IsAvailableForTagging?: boolean;\n    IsOpenForTermCreation?: boolean;\n    LastModifiedDate?: string;\n    Name?: string;\n    Names?: { [key: number]: string };\n    Owner?: string;\n    Stakeholders?: string[];\n}\n\nexport class TermSets extends ClientSvcQueryable implements ITermSets {\n\n    /**\n     * Gets the termsets in this collection\n     */\n    public get(): Promise<(ITermSetData & ITermSet)[]> {\n        return this.sendGetCollection<ITermSetData, ITermSet>((d: ITermSetData) => {\n            if (!stringIsNullOrEmpty(d.Name)) {\n                return this.getByName(d.Name);\n            } else if (!stringIsNullOrEmpty(d.Id)) {\n                return this.getById(d.Id);\n            }\n            throw Error(\"Could not find Value in Labels.get(). You must include at least one of these in your select fields.\");\n        });\n    }\n\n    /**\n     * Gets a TermSet from this collection by id\n     * \n     * @param id TermSet id\n     */\n    public getById(id: string): ITermSet {\n\n        const params = MethodParams.build()\n            .string(sanitizeGuid(id));\n\n        return this.getChild(TermSet, \"GetById\", params);\n    }\n\n    /**\n     * Gets a TermSet from this collection by name\n     * \n     * @param name TermSet name\n     */\n    public getByName(name: string): ITermSet {\n\n        const params = MethodParams.build()\n            .string(name);\n\n        return this.getChild(TermSet, \"GetByName\", params);\n    }\n}\n\nexport interface ITermSet extends IClientSvcQueryable {\n    readonly terms: ITerms;\n    readonly group: ITermGroup;\n    copy(): Promise<ITermSetData>;\n    get(): Promise<(ITermSetData & ITermSet)>;\n    getTermById(id: string): ITerm;\n    addTerm(name: string, lcid: number, isAvailableForTagging?: boolean, id?: string): Promise<ITerm & ITermData>;\n    update(properties: TermSetUpdateProps): Promise<ITermSetData & ITermSet>;\n}\n\nexport type TermSetUpdateProps = {\n    Contact?: string,\n    Description?: string,\n    IsOpenForTermCreation?: boolean,\n};\n\nexport class TermSet extends ClientSvcQueryable implements ITermSet {\n\n    /**\n     * Gets the group containing this Term set\n     */\n    public get group(): ITermGroup {\n        return this.getChildProperty(TermGroup, \"Group\");\n    }\n\n    /**\n     * Access all the terms in this termset\n     */\n    public get terms(): ITerms {\n        return this.getChild(Terms, \"GetAllTerms\", null);\n    }\n\n    /**\n     * Adds a stakeholder to the TermSet\n     * \n     * @param stakeholderName The login name of the user to be added as a stakeholder\n     */\n    public addStakeholder(stakeholderName: string): Promise<void> {\n        const params = MethodParams.build()\n            .string(stakeholderName);\n\n        return this.invokeNonQuery(\"DeleteStakeholder\", params);\n    }\n\n    /**\n     * Deletes a stakeholder to the TermSet\n     * \n     * @param stakeholderName The login name of the user to be added as a stakeholder\n     */\n    public deleteStakeholder(stakeholderName: string): Promise<void> {\n        const params = MethodParams.build()\n            .string(stakeholderName);\n\n        return this.invokeNonQuery(\"AddStakeholder\", params);\n    }\n\n    /**\n     * Gets the data for this TermSet\n     */\n    public get(): Promise<ITermSetData & ITermSet> {\n        return this.sendGet<ITermSetData, ITermSet>(TermSet);\n    }\n\n    /**\n     * Get a term by id\n     * \n     * @param id Term id\n     */\n    public getTermById(id: string): ITerm {\n\n        const params = MethodParams.build()\n            .string(sanitizeGuid(id));\n\n        return this.getChild(Term, \"GetTerm\", params);\n    }\n\n    /**\n     * Adds a term to this term set\n     * \n     * @param name Name for the term\n     * @param lcid Language code\n     * @param isAvailableForTagging set tagging availability (default: true)\n     * @param id GUID id for the term (optional)\n     */\n    public addTerm(name: string, lcid: number, isAvailableForTagging = true, id = getGUID()): Promise<ITerm & ITermData> {\n\n        const params = MethodParams.build()\n            .string(name)\n            .number(lcid)\n            .string(sanitizeGuid(id));\n\n        this._useCaching = false;\n        return this.invokeMethod<ITermData>(\"CreateTerm\", params,\n            setProperty(\"IsAvailableForTagging\", \"Boolean\", `${isAvailableForTagging}`))\n            .then(r => extend(this.getTermById(r.Id), r));\n    }\n\n    /**\n     * Copies this term set immediately\n     */\n    public copy(): Promise<ITermSetData> {\n        return this.invokeMethod(\"Copy\", null);\n    }\n\n    /**\n     * Updates the specified properties of this term set, not all properties can be updated\n     * \n     * @param properties Plain object representing the properties and new values to update\n     */\n    public update(properties: TermSetUpdateProps): Promise<ITermSetData & ITermSet> {\n        return this.invokeUpdate<ITermSetData, ITermSet>(properties, TermSet);\n    }\n}\n","import { extend, getGUID, sanitizeGuid, stringIsNullOrEmpty } from \"@pnp/common\";\nimport { ClientSvcQueryable, IClientSvcQueryable, MethodParams, ObjectPathQueue } from \"@pnp/sp-clientsvc\";\nimport { ITermSet, ITermSetData, ITermSets, TermSets } from \"./termsets\";\nimport { ITermStore, TermStore } from \"./termstores\";\n\nexport interface ITermGroups extends IClientSvcQueryable {\n    get(): Promise<(ITermGroupData & ITermGroup)[]>;\n    getById(id: string): ITermGroup;\n    getByName(name: string): ITermGroup;\n}\n\nexport interface ITermGroupData {\n    CreatedDate?: string;\n    Description?: string;\n    Id?: string;\n    IsSiteCollectionGroup?: boolean;\n    IsSystemGroup?: boolean;\n    LastModifiedDate?: string;\n    Name?: string;\n}\n\nexport interface ITermGroup extends IClientSvcQueryable {\n\n    /**\n     * ITermStore containing this TermGroup\n     */\n    readonly store: ITermStore | null;\n\n    /**\n     * Gets the collection of term sets in this group\n     */\n    readonly termSets: ITermSets;\n\n    /**\n     * Adds a contributor to the Group\n     * \n     * @param principalName The login name of the user to be added as a contributor\n     */\n    addContributor(principalName: string): Promise<void>;\n    /**\n     * Adds a group manager to the Group\n     * \n     * @param principalName The login name of the user to be added as a group manager\n     */\n    addGroupManager(principalName: string): Promise<void>;\n    /**\n     * Creates a new TermSet in this Group using the provided language and unique identifier\n     * \n     * @param name The name of the new TermSet being created\n     * @param lcid The language that the new TermSet name is in\n     * @param id The unique identifier of the new TermSet being created (optional)\n     */\n    createTermSet(name: string, lcid: number, id?: string): Promise<ITermSet & ITermSetData>;\n    /**\n     * Gets this term store's data\n     */\n    get(): Promise<(ITermGroupData & ITermGroup)>;\n    /**\n     * Updates the specified properties of this term set, not all properties can be updated\n     * \n     * @param properties Plain object representing the properties and new values to update\n     */\n    update(properties: TermGroupUpdateProps): Promise<ITermGroupData & ITermGroup>;\n}\n\nexport type TermGroupUpdateProps = {\n    Description?: string,\n};\n\n/**\n * Term Groups collection in Term Store\n */\nexport class TermGroups extends ClientSvcQueryable implements ITermGroups {\n    /**\n     * Gets the groups in this collection\n     */\n    public get(): Promise<(ITermGroupData & ITermGroup)[]> {\n        return this.sendGetCollection<ITermGroupData, ITermGroup>((d: ITermGroupData) => {\n            if (!stringIsNullOrEmpty(d.Name)) {\n                return this.getByName(d.Name);\n            } else if (!stringIsNullOrEmpty(d.Id)) {\n                return this.getById(d.Id);\n            }\n            throw Error(\"Could not find Name or Id in TermGroups.get(). You must include at least one of these in your select fields.\");\n        });\n    }\n\n    /**\n     * Gets a TermGroup from this collection by id\n     * \n     * @param id TermGroup id\n     */\n    public getById(id: string): ITermGroup {\n\n        const params = MethodParams.build()\n            .string(sanitizeGuid(id));\n\n        return this.getChild(TermGroup, \"GetById\", params);\n    }\n\n    /**\n     * Gets a TermGroup from this collection by name\n     * \n     * @param name TErmGroup name\n     */\n    public getByName(name: string): ITermGroup {\n\n        const params = MethodParams.build()\n            .string(name);\n\n        return this.getChild(TermGroup, \"GetByName\", params);\n    }\n}\n\n/**\n * Represents a group in the taxonomy heirarchy\n */\nexport class TermGroup extends ClientSvcQueryable implements ITermGroup {\n\n    /**\n     * ITermStore containing this TermGroup\n     */\n    public readonly store: ITermStore | null;\n\n    constructor(parent: ClientSvcQueryable | string = \"\", _objectPaths?: ObjectPathQueue) {\n        super(parent, _objectPaths);\n\n        // this should mostly be true\n        this.store = parent instanceof TermStore ? parent : null;\n    }\n\n    /**\n     * Gets the collection of term sets in this group\n     */\n    public get termSets(): ITermSets {\n        return this.getChildProperty(TermSets, \"TermSets\");\n    }\n\n    /**\n     * Adds a contributor to the Group\n     * \n     * @param principalName The login name of the user to be added as a contributor\n     */\n    public addContributor(principalName: string): Promise<void> {\n\n        const params = MethodParams.build().string(principalName);\n        return this.invokeNonQuery(\"AddContributor\", params);\n    }\n\n    /**\n     * Adds a group manager to the Group\n     * \n     * @param principalName The login name of the user to be added as a group manager\n     */\n    public addGroupManager(principalName: string): Promise<void> {\n\n        const params = MethodParams.build().string(principalName);\n        return this.invokeNonQuery(\"AddGroupManager\", params);\n    }\n\n    /**\n     * Creates a new TermSet in this Group using the provided language and unique identifier\n     * \n     * @param name The name of the new TermSet being created\n     * @param lcid The language that the new TermSet name is in\n     * @param id The unique identifier of the new TermSet being created (optional)\n     */\n    public createTermSet(name: string, lcid: number, id = getGUID()): Promise<ITermSet & ITermSetData> {\n\n        const params = MethodParams.build()\n            .string(name)\n            .string(sanitizeGuid(id))\n            .number(lcid);\n\n        this._useCaching = false;\n        return this.invokeMethod<ITermSetData>(\"CreateTermSet\", params)\n            .then(r => extend(this.store.getTermSetById(r.Id), r));\n    }\n\n    /**\n     * Gets this term store's data\n     */\n    public get(): Promise<ITermGroupData & ITermGroup> {\n        return this.sendGet<ITermGroupData, ITermGroup>(TermGroup);\n    }\n\n    /**\n     * Updates the specified properties of this term set, not all properties can be updated\n     * \n     * @param properties Plain object representing the properties and new values to update\n     */\n    public update(properties: TermGroupUpdateProps): Promise<ITermGroupData & ITermGroup> {\n        return this.invokeUpdate<ITermGroupData, ITermGroup>(properties, TermGroup);\n    }\n}\n","import { extend, getGUID, sanitizeGuid, stringIsNullOrEmpty } from \"@pnp/common\";\nimport { ClientSvcQueryable, IClientSvcQueryable, MethodParams, ObjectPathQueue, method, objConstructor, objectPath, objectProperties, opQuery, property } from \"@pnp/sp-clientsvc\";\nimport { ITermGroup, ITermGroupData, TermGroup, ITermGroups, TermGroups } from \"./termgroup\";\nimport { ITerm, ITerms, Term, Terms } from \"./terms\";\nimport { ITermSet, ITermSets, TermSet, TermSets } from \"./termsets\";\nimport { ChangeInformation, ChangedItem, ILabelMatchInfo } from \"./types\";\n\n/**\n * Defines the visible members of the term store \n */\nexport interface ITermStores extends IClientSvcQueryable {\n    get(): Promise<(ITermStoreData & ITermStore)[]>;\n    getByName(name: string): ITermStore;\n    getById(id: string): ITermStore;\n}\n\n/**\n * Represents the set of available term stores and the collection methods\n */\nexport class TermStores extends ClientSvcQueryable implements ITermStores {\n\n    constructor(parent: ClientSvcQueryable | string = \"\") {\n        super(parent);\n\n        this._objectPaths.add(property(\"TermStores\",\n            // actions\n            objectPath()));\n    }\n\n    /**\n     * Gets the term stores\n     */\n    public get(): Promise<(ITermStoreData & ITermStore)[]> {\n        return this.sendGetCollection<ITermStoreData, ITermStore>((d: ITermStoreData): ITermStore => {\n\n            if (!stringIsNullOrEmpty(d.Name)) {\n                return this.getByName(d.Name);\n            } else if (!stringIsNullOrEmpty(d.Id)) {\n                return this.getById(d.Id);\n            }\n            throw Error(\"Could not find Name or Id in TermStores.get(). You must include at least one of these in your select fields.\");\n        });\n    }\n\n    /**\n     * Returns the TermStore specified by its index name\n     *\n     * @param name The index name of the TermStore to be returned\n     */\n    public getByName(name: string): ITermStore {\n        return this.getChild(TermStore, \"GetByName\", MethodParams.build().string(name));\n    }\n\n    /**\n     * Returns the TermStore specified by its GUID index\n     *\n     * @param id The GUID index of the TermStore to be returned\n     */\n    public getById(id: string): ITermStore {\n        return this.getChild(TermStore, \"GetById\", MethodParams.build().string(sanitizeGuid(id)));\n    }\n}\n\n/**\n * Defines the term store object\n */\nexport interface ITermStore extends IClientSvcQueryable {\n    readonly hashTagsTermSet: ITermSet;\n    readonly keywordsTermSet: ITermSet;\n    readonly orphanedTermsTermSet: ITermSet;\n    readonly systemGroup: ITermGroup;\n    readonly groups: ITermGroups;\n    addGroup(name: string, id?: string): Promise<ITermGroup & ITermGroupData>;\n    addLanguage(lcid: number): Promise<void>;\n    commitAll(): Promise<void>;\n    deleteLanguage(lcid: number): Promise<void>;\n    get(): Promise<(ITermStoreData & ITermStore)>;\n    getChanges(info: ChangeInformation): Promise<ChangedItem[]>;\n    getSiteCollectionGroup(createIfMissing?: boolean): ITermGroup;\n    getTermById(id: string): ITerm;\n    getTermInTermSet(termId: string, termSetId: string): ITerm;\n    getTermGroupById(id: string): ITermGroup;\n    getTerms(info: ILabelMatchInfo): ITerms;\n    getTermsById(...ids: string[]): any;\n    getTermSetById(id: string): ITermSet;\n    getTermSetsByName(name: string, lcid: number): ITermSets;\n    rollbackAll(): Promise<void>;\n    update(properties: TermStoreUpdateProps): Promise<ITermStoreData & ITermStore>;\n    updateCache(): Promise<void>;\n    updateUsedTermsOnSite(): Promise<void>;\n}\n\n/**\n * Defines the term store object\n */\nexport interface ITermStoreData {\n    DefaultLanguage?: number;\n    Id?: string;\n    IsOnline?: boolean;\n    Languages?: string[];\n    Name?: string;\n    WorkingLanguage?: number;\n}\n\nexport type TermStoreUpdateProps = {\n    DefaultLanguage?: number,\n    WorkingLanguage?: number,\n};\n\nexport class TermStore extends ClientSvcQueryable implements ITermStore {\n\n    constructor(parent: ClientSvcQueryable | string = \"\", _objectPaths: ObjectPathQueue | null = null) {\n        super(parent, _objectPaths);\n    }\n\n    public get hashTagsTermSet(): ITermSet {\n        return this.getChildProperty(TermSet, \"HashTagsTermSet\");\n    }\n\n    public get keywordsTermSet(): ITermSet {\n        return this.getChildProperty(TermSet, \"KeywordsTermSet\");\n    }\n\n    public get orphanedTermsTermSet(): ITermSet {\n        return this.getChildProperty(TermSet, \"OrphanedTermsTermSet\");\n    }\n\n    public get systemGroup(): ITermGroup {\n        return this.getChildProperty(TermGroup, \"SystemGroup\");\n    }\n\n    public get groups(): ITermGroups {\n        return this.getChildProperty(TermGroups, \"Groups\");\n    }\n\n    /**\n     * Gets the term store data\n     */\n    public get(): Promise<(ITermStoreData & ITermStore)> {\n        return this.sendGet<ITermStoreData, ITermStore>(TermStore);\n    }\n\n    /**\n     * Gets term sets\n     * \n     * @param name \n     * @param lcid \n     */\n    public getTermSetsByName(name: string, lcid: number): ITermSets {\n\n        const params = MethodParams.build()\n            .string(name)\n            .number(lcid);\n\n        return this.getChild(TermSets, \"GetTermSetsByName\", params);\n    }\n\n    /**\n     * Provides access to an ITermSet by id\n     * \n     * @param id \n     */\n    public getTermSetById(id: string): ITermSet {\n\n        const params = MethodParams.build().string(sanitizeGuid(id));\n        return this.getChild(TermSet, \"GetTermSet\", params);\n    }\n\n    /**\n     * Provides access to an ITermSet by id\n     * \n     * @param id \n     */\n    public getTermById(id: string): ITerm {\n\n        const params = MethodParams.build().string(sanitizeGuid(id));\n        return this.getChild(Term, \"GetTerm\", params);\n    }\n\n    /**\n     * Provides access to an ITermSet by id\n     * \n     * @param id \n     */\n    public getTermsById(...ids: string[]): ITerms {\n\n        const params = MethodParams.build().strArray(ids.map(id => sanitizeGuid(id)));\n        return this.getChild(Terms, \"GetTermsById\", params);\n    }\n\n    /**\n     * Gets a term from a term set based on the supplied ids\n     * \n     * @param termId Term Id\n     * @param termSetId Termset Id\n     */\n    public getTermInTermSet(termId: string, termSetId: string): ITerm {\n\n        const params = MethodParams.build().string(sanitizeGuid(termId)).string(sanitizeGuid(termSetId));\n        return this.getChild(Term, \"GetTermInTermSet\", params);\n    }\n\n    /**\n     * This method provides access to a ITermGroup by id\n     * \n     * @param id The group id\n     */\n    public getTermGroupById(id: string): ITermGroup {\n\n        const params = MethodParams.build()\n            .string(sanitizeGuid(id));\n\n        return this.getChild(TermGroup, \"GetGroup\", params);\n    }\n\n    /**\n     * Gets the terms by the supplied information (see: https://msdn.microsoft.com/en-us/library/hh626704%28v=office.12%29.aspx)\n     * \n     * @param info \n     */\n    public getTerms(info: ILabelMatchInfo): ITerms {\n\n        const objectPaths = this._objectPaths.copy();\n\n        // this will be the parent of the GetTerms call, but we need to create the input param first\n        const parentIndex = objectPaths.lastIndex;\n\n        // this is our input object\n        const input = objConstructor(\"{61a1d689-2744-4ea3-a88b-c95bee9803aa}\",\n            // actions\n            objectPath(),\n            ...objectProperties(info),\n        );\n\n        // add the input object path\n        const inputIndex = objectPaths.add(input);\n\n        // this sets up the GetTerms call\n        const params = MethodParams.build().objectPath(inputIndex);\n\n        // call the method\n        const methodIndex = objectPaths.add(method(\"GetTerms\", params,\n            // actions\n            objectPath()));\n\n        // setup the parent relationship even though they are seperated in the collection\n        objectPaths.addChildRelationship(parentIndex, methodIndex);\n\n        return new Terms(this, objectPaths);\n    }\n\n    /**\n     * Gets the site collection group associated with the current site\n     * \n     * @param createIfMissing If true the group will be created, otherwise null (default: false)\n     */\n    public getSiteCollectionGroup(createIfMissing = false): ITermGroup {\n\n        const objectPaths = this._objectPaths.copy();\n        const methodParent = objectPaths.lastIndex;\n        const siteIndex = objectPaths.siteIndex;\n\n        const params = MethodParams.build().objectPath(siteIndex).boolean(createIfMissing);\n\n        const methodIndex = objectPaths.add(method(\"GetSiteCollectionGroup\", params,\n            // actions\n            objectPath(),\n        ));\n\n        // the parent of this method call is this instance, not the current/site\n        objectPaths.addChildRelationship(methodParent, methodIndex);\n\n        return new TermGroup(this, objectPaths);\n    }\n\n    /**\n     * Adds a working language to the TermStore\n     * \n     * @param lcid The locale identifier of the working language to add\n     */\n    public addLanguage(lcid: number): Promise<void> {\n\n        const params = MethodParams.build().number(lcid);\n        return this.invokeNonQuery(\"AddLanguage\", params);\n    }\n\n    /**\n     * Creates a new Group in this TermStore\n     * \n     * @param name The name of the new Group being created\n     * @param id The ID (Guid) that the new group should have\n     */\n    public addGroup(name: string, id = getGUID()): Promise<ITermGroup & ITermGroupData> {\n\n        const params = MethodParams.build()\n            .string(name)\n            .string(sanitizeGuid(id));\n\n        this._useCaching = false;\n        return this.invokeMethod<ITermGroupData>(\"CreateGroup\", params)\n            .then(r => extend(this.getTermGroupById(r.Id), r));\n    }\n\n    /**\n     * Commits all updates to the database that have occurred since the last commit or rollback\n     */\n    public commitAll(): Promise<void> {\n        return this.invokeNonQuery(\"CommitAll\");\n    }\n\n    /**\n     * Delete a working language from the TermStore\n     * \n     * @param lcid locale ID for the language to be deleted\n     */\n    public deleteLanguage(lcid: number): Promise<void> {\n\n        const params = MethodParams.build().number(lcid);\n        return this.invokeNonQuery(\"DeleteLanguage\", params);\n    }\n\n    /**\n     * Discards all updates that have occurred since the last commit or rollback\n     */\n    public rollbackAll(): Promise<void> {\n        return this.invokeNonQuery(\"RollbackAll\");\n    }\n\n    /**\n     * Updates the cache\n     */\n    public updateCache(): Promise<void> {\n        return this.invokeNonQuery(\"UpdateCache\");\n    }\n\n    /**\n     * Updates the specified properties of this term set, not all properties can be updated\n     * \n     * @param properties Plain object representing the properties and new values to update\n     */\n    public update(properties: TermStoreUpdateProps): Promise<ITermStoreData & ITermStore> {\n        return this.invokeUpdate<ITermStoreData, ITermStore>(properties, TermStore);\n    }\n\n    /**\n     * This method makes sure that this instance is aware of all child terms that are used in the current site collection\n     */\n    public updateUsedTermsOnSite(): Promise<void> {\n\n        const objectPaths = this._objectPaths.copy();\n        const methodParent = objectPaths.lastIndex;\n        const siteIndex = objectPaths.siteIndex;\n\n        const params = MethodParams.build().objectPath(siteIndex);\n\n        const methodIndex = objectPaths.add(method(\"UpdateUsedTermsOnSite\", params));\n\n        // the parent of this method call is this instance, not the current context/site\n        objectPaths.addChildRelationship(methodParent, methodIndex);\n\n        return this.send<void>(objectPaths);\n    }\n\n    /**\n     * Gets a list of changes\n     * \n     * @param info Lookup information\n     */\n    public getChanges(info: ChangeInformation): Promise<ChangedItem[]> {\n\n        const objectPaths = this._objectPaths.copy();\n        const methodParent = objectPaths.lastIndex;\n\n        const inputIndex = objectPaths.add(objConstructor(\"{1f849fb0-4fcb-4a54-9b01-9152b9e482d3}\",\n            // actions\n            objectPath(),\n            ...objectProperties(info),\n        ));\n\n        const params = MethodParams.build().objectPath(inputIndex);\n\n        const methodIndex = objectPaths.add(method(\"GetChanges\", params,\n            // actions\n            objectPath(),\n            opQuery([], this.getSelects()),\n        ));\n\n        objectPaths.addChildRelationship(methodParent, methodIndex);\n\n        return this.send<ChangedItem[]>(objectPaths);\n    }\n}\n","import { SPConfiguration, sp } from \"@pnp/sp\";\nimport { ClientSvcQueryable, IObjectPathBatch, ObjectPathBatch, objectPath, staticMethod } from \"@pnp/sp-clientsvc\";\nimport { ITermStore, ITermStores, TermStore, TermStores } from \"./termstores\";\n\n/**\n * Defines the publicly visible members of Taxonomy\n */\nexport interface ITaxonomySession {\n\n    /**\n     * The collection of term stores\n     */\n    termStores: ITermStores;\n\n    /**\n     * Provides access to sp.setup from @pnp/sp\n     * \n     * @param config Configuration\n     */\n    setup(config: SPConfiguration): void;\n\n    /**\n     * Creates a new batch\n     */\n    createBatch(): IObjectPathBatch;\n\n    /**\n     * Gets the default keyword termstore for this session\n     */\n    getDefaultKeywordTermStore(): ITermStore;\n\n    /**\n     * Gets the default site collection termstore for this session\n     */\n    getDefaultSiteCollectionTermStore(): ITermStore;\n}\n\n/**\n * The root taxonomy object\n */\nexport class Session extends ClientSvcQueryable implements ITaxonomySession {\n\n    constructor(webUrl = \"\") {\n        super(webUrl);\n\n        // everything starts with the session\n        this._objectPaths.add(staticMethod(\"GetTaxonomySession\", \"{981cbc68-9edc-4f8d-872f-71146fcbb84f}\",\n            // actions\n            objectPath()));\n    }\n\n    /**\n     * The collection of term stores\n     */\n    public get termStores(): ITermStores {\n        return new TermStores(this);\n    }\n\n    /**\n     * Provides access to sp.setup from @pnp/sp\n     * \n     * @param config Configuration\n     */\n    public setup(config: SPConfiguration): void {\n        sp.setup(config);\n    }\n\n    /**\n     * Creates a new batch\n     */\n    public createBatch(): IObjectPathBatch {\n        return new ObjectPathBatch(this.toUrl());\n    }\n\n    /**\n     * Gets the default keyword termstore for this session\n     */\n    public getDefaultKeywordTermStore(): ITermStore {\n        return this.getChild(TermStore, \"GetDefaultKeywordsTermStore\", null);\n    }\n\n    /**\n     * Gets the default site collection termstore for this session\n     */\n    public getDefaultSiteCollectionTermStore(): ITermStore {\n        return this.getChild(TermStore, \"GetDefaultSiteCollectionTermStore\", null);\n    }\n}\n","export enum StringMatchOption {\n    StartsWith = 0,\n    ExactMatch = 1,\n}\n\nexport interface TimeSpan {\n    Days: number;\n    Hours: number;\n    Milliseconds: number;\n    Minutes: number;\n    Seconds: number;\n    Ticks: number;\n    TotalDays: number;\n    TotalHours: number;\n    TotalMilliseconds: number;\n    TotalMinutes: number;\n    TotalSeconds: number;\n}\n\nexport interface ILabelMatchInfo {\n    DefaultLabelOnly?: boolean;\n    ExcludeKeyword?: boolean;\n    Lcid?: number;\n    ResultCollectionSize?: number;\n    StringMatchOption?: StringMatchOption;\n    TermLabel: string;\n    TrimDeprecated?: boolean;\n    TrimUnavailable?: boolean;\n}\n\nexport enum ChangedItemType {\n    Unknown,\n    Term,\n    TermSet,\n    Group,\n    TermStore,\n    Site,\n}\n\nexport enum ChangedOperationType {\n    Unknown,\n    Add,\n    Edit,\n    DeleteObject,\n    Move,\n    Copy,\n    PathChange,\n    Merge,\n    ImportObject,\n    Restore,\n}\n\nexport interface ChangedItem {\n    ChangedBy: string;\n    ChangedTime: string;\n    Id: string;\n    ItemType: ChangedItemType;\n    Operation: ChangedOperationType;\n\n    // Changed Site\n    SiteId?: string;\n    TermId?: string;\n\n    // Changed Term\n    ChangedCustomProperties?: string[];\n    ChangedLocalCustomProperties?: string[];\n    LcidsForChangedDescriptions?: number[];\n    LcidsForChangedLabels?: number[];\n\n    // Changed Term & Site\n    TermSetId?: string;\n\n    // Changed Termset\n    FromGroupId?: string;\n\n    // Changed Termset and Term\n    GroupId?: string;\n\n    // Changed TermStore\n    ChangedLanguage?: number;\n    IsDefaultLanguageChanged?: boolean;\n    IsFullFarmRestore?: boolean;\n}\n\nexport interface ChangeInformation {\n    ItemType?: ChangedItemType;\n    OperationType?: ChangedOperationType;\n    StartTime?: string;\n    WithinTimeSpan?: TimeSpan;\n}\n","import { sanitizeGuid, TypedHash, objectDefinedNotNull } from \"@pnp/common\";\nimport { Item, ItemUpdateResult } from \"@pnp/sp\";\nimport { ITermData } from \"./terms\";\n\nexport function setItemMetaDataField(item: Item, fieldName: string, term: ITermData): Promise<ItemUpdateResult> {\n\n    if (!objectDefinedNotNull(term)) {\n        return Promise.resolve(null);\n    }\n\n    const postData: TypedHash<any> = {};\n    postData[fieldName] = {\n        \"Label\": term.Name,\n        \"TermGuid\": sanitizeGuid(term.Id),\n        \"WssId\": \"-1\",\n        \"__metadata\": { \"type\": \"SP.Taxonomy.TaxonomyFieldValue\" },\n    };\n\n    return item.update(postData);\n}\n\nexport function setItemMetaDataMultiField(item: Item, fieldName: string, ...terms: ITermData[]): Promise<ItemUpdateResult> {\n\n    if (terms.length < 1) {\n        return Promise.resolve(null);\n    }\n\n    return item.list.fields.getByTitle(`${fieldName}_0`).select(\"InternalName\").get<{ InternalName: string}>().then(i => {\n\n        const postData: TypedHash<string> = {};\n        postData[i.InternalName] = terms.map(term => `-1;#${term.Name}|${sanitizeGuid(term.Id)};#`).join(\"\");\n\n        return item.update(postData);\n    });\n}\n","import { Session, ITaxonomySession } from \"./session\";\n\n// export an existing session instance\nexport const taxonomy: ITaxonomySession = new Session();\n\nexport * from \"./labels\";\nexport * from \"./session\";\nexport * from \"./termgroup\";\nexport * from \"./terms\";\nexport * from \"./termsets\";\nexport * from \"./termstores\";\nexport * from \"./types\";\nexport * from \"./utilities\";\n"],"names":[],"mappings":"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"}