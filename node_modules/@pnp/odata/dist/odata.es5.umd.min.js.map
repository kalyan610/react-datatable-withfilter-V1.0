{"version":3,"file":"odata.es5.umd.min.js","sources":["../../../../packages/odata/src/caching.ts","../../../../node_modules/tslib/tslib.es6.js","../../../../packages/odata/src/parsers.ts","../../../../packages/odata/src/pipeline.ts","../../../../packages/odata/src/queryable.ts","../../../../packages/odata/src/odatabatch.ts"],"sourcesContent":["import { ODataParser } from \"./parsers\";\nimport { RuntimeConfig, dateAdd, PnPClientStore, PnPClientStorage } from \"@pnp/common\";\n\nexport interface ICachingOptions {\n    expiration?: Date;\n    storeName?: \"session\" | \"local\";\n    key: string;\n}\n\nexport class CachingOptions implements ICachingOptions {\n\n    protected static storage = new PnPClientStorage();\n\n    public expiration = dateAdd(new Date(), \"second\", RuntimeConfig.defaultCachingTimeoutSeconds);\n\n    public storeName: \"session\" | \"local\" = RuntimeConfig.defaultCachingStore;\n\n    constructor(public key: string) { }\n\n    public get store(): PnPClientStore {\n        if (this.storeName === \"local\") {\n            return CachingOptions.storage.local;\n        } else {\n            return CachingOptions.storage.session;\n        }\n    }\n}\n\nexport class CachingParserWrapper<T> implements ODataParser<T> {\n\n    constructor(\n        public parser: ODataParser<T>,\n        public cacheOptions: CachingOptions) { }\n\n    public parse(response: Response): Promise<T> {\n        return this.parser.parse(response).then(r => this.cacheData(r));\n    }\n\n    protected cacheData(data: any): any {\n        if (this.cacheOptions.store !== null) {\n            this.cacheOptions.store.put(this.cacheOptions.key, data, this.cacheOptions.expiration);\n        }\n        return data;\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { isFunc, hOP } from \"@pnp/common\";\n\nexport interface ODataParser<T> {\n    hydrate?: (d: any) => T;\n    parse(r: Response): Promise<T>;\n}\n\nexport class HttpRequestError extends Error {\n\n    public isHttpRequestError = true;\n\n    constructor(message: string, public response: Response, public status = response.status, public statusText = response.statusText) {\n        super(message);\n    }\n\n    public static init(r: Response): Promise<HttpRequestError> {\n\n        return r.clone().text().then(t => {\n            return new HttpRequestError(`Error making HttpClient request in queryable [${r.status}] ${r.statusText} ::> ${t}`, r.clone());\n        });\n    }\n}\n\nexport abstract class ODataParserBase<T> implements ODataParser<T> {\n\n    protected rawJson: any = {};\n\n    public parse(r: Response): Promise<T> {\n\n        return new Promise<T>((resolve, reject) => {\n            if (this.handleError(r, reject)) {\n                this.parseImpl(r, resolve, reject);\n            }\n        });\n    }\n\n    protected parseImpl(r: Response, resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: Error) => void): void {\n        if ((r.headers.has(\"Content-Length\") && parseFloat(r.headers.get(\"Content-Length\")!) === 0) || r.status === 204) {\n            resolve(<T>{});\n        } else {\n\n            // patch to handle cases of 200 response with no or whitespace only bodies (#487 & #545)\n            r.text()\n                .then(txt => txt.replace(/\\s/ig, \"\").length > 0 ? JSON.parse(txt) : {})\n                .then(json => resolve(this.parseODataJSON<T>(json)))\n                .catch(e => reject(e));\n        }\n    }\n\n    /**\n     * Handles a response with ok === false by parsing the body and creating a ProcessHttpClientResponseException\n     * which is passed to the reject delegate. This method returns true if there is no error, otherwise false\n     *\n     * @param r Current response object\n     * @param reject reject delegate for the surrounding promise\n     */\n    protected handleError(r: Response, reject: (err?: Error) => void): boolean {\n        if (!r.ok) {\n            HttpRequestError.init(r).then(reject);\n        }\n\n        return r.ok;\n    }\n\n    /**\n     * Normalizes the json response by removing the various nested levels\n     *\n     * @param json json object to parse\n     */\n    protected parseODataJSON<U>(json: any): U {\n        this.rawJson = json;\n        let result = json;\n        if (hOP(json, \"d\")) {\n            if (hOP(json.d, \"results\")) {\n                result = json.d.results;\n            } else {\n                result = json.d;\n            }\n        } else if (hOP(json, \"value\")) {\n            result = json.value;\n        }\n        return result;\n    }\n}\n\nexport class ODataDefaultParser<T = any> extends ODataParserBase<T> {\n}\n\nexport class TextParser extends ODataParserBase<string> {\n\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\n        r.text().then(resolve);\n    }\n}\n\nexport class BlobParser extends ODataParserBase<Blob> {\n\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\n        r.blob().then(resolve);\n    }\n}\n\nexport class JSONParser extends ODataParserBase<any> {\n\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\n        r.json().then(resolve);\n    }\n}\n\nexport class BufferParser extends ODataParserBase<ArrayBuffer> {\n\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\n\n        if (isFunc(r.arrayBuffer)) {\n            r.arrayBuffer().then(resolve);\n        } else {\n            (<any>r).buffer().then(resolve);\n        }\n    }\n}\n\nexport class LambdaParser<T = any> extends ODataParserBase<T> {\n\n    constructor(private parser: (r: Response) => Promise<T>) {\n        super();\n    }\n\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\n        this.parser(r).then(resolve);\n    }\n}\n","import { FetchOptions, RequestClient, extend, isFunc, hOP } from \"@pnp/common\";\nimport { LogLevel, Logger } from \"@pnp/logging\";\nimport { CachingOptions, CachingParserWrapper, ICachingOptions } from \"./caching\";\nimport { ODataBatch } from \"./odatabatch\";\nimport { ODataParser } from \"./parsers\";\n\nexport type PipelineMethod<T> = (c: RequestContext<T>) => Promise<RequestContext<T>>;\n\n/**\n * Defines the context for a given request to be processed in the pipeline\n */\nexport interface RequestContext<T> {\n    batch: ODataBatch;\n    batchDependency: () => void;\n    cachingOptions: ICachingOptions;\n    hasResult?: boolean;\n    isBatched: boolean;\n    isCached: boolean;\n    options: FetchOptions;\n    parser: ODataParser<T>;\n    pipeline: PipelineMethod<T>[];\n    requestAbsoluteUrl: string;\n    requestId: string;\n    result?: T;\n    verb: string;\n    clientFactory: () => RequestClient;\n}\n\n/**\n * Resolves the context's result value\n *\n * @param context The current context\n */\nfunction returnResult<T>(context: RequestContext<T>): Promise<T> {\n\n    Logger.log({\n        data: Logger.activeLogLevel === LogLevel.Verbose ? context.result : {},\n        level: LogLevel.Info,\n        message: `[${context.requestId}] (${(new Date()).getTime()}) Returning result from pipeline. Set logging to verbose to see data.`,\n    });\n\n    return Promise.resolve(context.result!);\n}\n\n/**\n * Sets the result on the context\n */\nexport function setResult<T>(context: RequestContext<T>, value: any): Promise<RequestContext<T>> {\n\n    return new Promise<RequestContext<T>>((resolve) => {\n\n        context.result = value;\n        context.hasResult = true;\n        resolve(context);\n    });\n}\n\n/**\n * Invokes the next method in the provided context's pipeline\n *\n * @param c The current request context\n */\nfunction next<T>(c: RequestContext<T>): Promise<RequestContext<T>> {\n\n    if (c.pipeline.length > 0) {\n        return c.pipeline.shift()!(c);\n    } else {\n        return Promise.resolve(c);\n    }\n}\n\n/**\n * Executes the current request context's pipeline\n *\n * @param context Current context\n */\nexport function pipe<T>(context: RequestContext<T>): Promise<T> {\n\n    if (context.pipeline.length < 1) {\n        Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Request pipeline contains no methods!`, LogLevel.Warning);\n    }\n\n    const promise = next(context).then(ctx => returnResult(ctx)).catch((e: Error) => {\n        Logger.error(e);\n        throw e;\n    });\n\n    if (context.isBatched) {\n        // this will block the batch's execute method from returning until the child requets have been resolved\n        context.batch.addResolveBatchDependency(promise);\n    }\n\n    return promise;\n}\n\n/**\n * decorator factory applied to methods in the pipeline to control behavior\n */\nexport function requestPipelineMethod(alwaysRun = false) {\n\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n\n        const method = descriptor.value;\n\n        descriptor.value = function (...args: any[]) {\n\n            // if we have a result already in the pipeline, pass it along and don't call the tagged method\n            if (!alwaysRun && args.length > 0 && hOP(args[0], \"hasResult\") && args[0].hasResult) {\n                Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Skipping request pipeline method ${propertyKey}, existing result in pipeline.`, LogLevel.Verbose);\n                return Promise.resolve(args[0]);\n            }\n\n            // apply the tagged method\n            Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Calling request pipeline method ${propertyKey}.`, LogLevel.Verbose);\n\n            // then chain the next method in the context's pipeline - allows for dynamic pipeline\n            return method.apply(target, args).then((ctx: RequestContext<any>) => next(ctx));\n        };\n    };\n}\n\n/**\n * Contains the methods used within the request pipeline\n */\nexport class PipelineMethods {\n\n    /**\n     * Logs the start of the request\n     */\n    @requestPipelineMethod(true)\n    public static logStart<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n        return new Promise<RequestContext<T>>(resolve => {\n\n            Logger.log({\n                data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                level: LogLevel.Info,\n                message: `[${context.requestId}] (${(new Date()).getTime()}) Beginning ${context.verb} request (${context.requestAbsoluteUrl})`,\n            });\n\n            resolve(context);\n        });\n    }\n\n    /**\n     * Handles caching of the request\n     */\n    @requestPipelineMethod()\n    public static caching<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            // handle caching, if applicable\n            if (context.isCached) {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Caching is enabled for request, checking cache...`, LogLevel.Info);\n\n                let cacheOptions = new CachingOptions(context.requestAbsoluteUrl.toLowerCase());\n                if (context.cachingOptions !== undefined) {\n                    cacheOptions = extend(cacheOptions, context.cachingOptions);\n                }\n\n                // we may not have a valid store\n                if (cacheOptions.store !== null) {\n                    // check if we have the data in cache and if so resolve the promise and return\n                    let data = cacheOptions.store.get(cacheOptions.key);\n                    if (data !== null) {\n                        // ensure we clear any held batch dependency we are resolving from the cache\n                        Logger.log({\n                            data: Logger.activeLogLevel === LogLevel.Info ? {} : data,\n                            level: LogLevel.Info,\n                            message: `[${context.requestId}] (${(new Date()).getTime()}) Value returned from cache.`,\n                        });\n                        if (isFunc(context.batchDependency)) {\n                            context.batchDependency();\n                        }\n                        // handle the case where a parser needs to take special actions with a cached result\n                        if (hOP(context.parser, \"hydrate\")) {\n                            data = context.parser.hydrate(data);\n                        }\n                        return setResult(context, data).then(ctx => resolve(ctx));\n                    }\n                }\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Value not found in cache.`, LogLevel.Info);\n\n                // if we don't then wrap the supplied parser in the caching parser wrapper\n                // and send things on their way\n                context.parser = new CachingParserWrapper(context.parser, cacheOptions);\n            }\n\n            return resolve(context);\n        });\n    }\n\n    /**\n     * Sends the request\n     */\n    @requestPipelineMethod()\n    public static send<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>((resolve, reject) => {\n            // send or batch the request\n            if (context.isBatched) {\n\n                // we are in a batch, so add to batch, remove dependency, and resolve with the batch's promise\n                const p = context.batch.add(context.requestAbsoluteUrl, context.verb, context.options, context.parser, context.requestId);\n\n                // we release the dependency here to ensure the batch does not execute until the request is added to the batch\n                if (isFunc(context.batchDependency)) {\n                    context.batchDependency();\n                }\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Batching request in batch ${context.batch.batchId}.`, LogLevel.Info);\n\n                // we set the result as the promise which will be resolved by the batch's execution\n                resolve(setResult(context, p));\n\n            } else {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Sending request.`, LogLevel.Info);\n\n                // we are not part of a batch, so proceed as normal\n                const client = context.clientFactory();\n                const opts = extend(context.options || {}, { method: context.verb });\n                client.fetch(context.requestAbsoluteUrl, opts)\n                    .then(response => context.parser.parse(response))\n                    .then(result => setResult(context, result))\n                    .then(ctx => resolve(ctx))\n                    .catch(e => reject(e));\n            }\n        });\n    }\n\n    /**\n     * Logs the end of the request\n     */\n    @requestPipelineMethod(true)\n    public static logEnd<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            if (context.isBatched) {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) ${context.verb} request will complete in batch ${context.batch.batchId}.`,\n                });\n\n            } else {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) Completing ${context.verb} request.`,\n                });\n            }\n\n            resolve(context);\n        });\n    }\n}\n\nexport function getDefaultPipeline() {\n    return [\n        PipelineMethods.logStart,\n        PipelineMethods.caching,\n        PipelineMethods.send,\n        PipelineMethods.logEnd,\n    ].slice(0);\n}\n","import {\n    combine,\n    RuntimeConfig,\n    FetchOptions,\n    ConfigOptions,\n    mergeOptions,\n    objectDefinedNotNull,\n    isArray,\n} from \"@pnp/common\";\nimport { ODataParser, ODataDefaultParser, JSONParser } from \"./parsers\";\nimport { ICachingOptions } from \"./caching\";\nimport { ODataBatch } from \"./odatabatch\";\nimport {\n    RequestContext,\n    getDefaultPipeline,\n    pipe,\n    PipelineMethod,\n} from \"./pipeline\";\n\nexport abstract class Queryable<GetType> {\n\n    /**\n     * Additional options to be set before sending actual http request\n     */\n    protected _options: ConfigOptions;\n\n    /**\n     * Tracks the query parts of the url\n     */\n    protected _query: Map<string, string>;\n\n    /**\n     * Tracks the url as it is built\n     */\n    protected _url: string;\n\n    /**\n     * Stores the parent url used to create this instance, for recursing back up the tree if needed\n     */\n    protected _parentUrl: string;\n\n    /**\n     * Explicitly tracks if we are using caching for this request\n     */\n    protected _useCaching: boolean;\n\n    /**\n     * Any options that were supplied when caching was enabled\n     */\n    protected _cachingOptions: ICachingOptions | null;\n\n    /**\n     * Flag used to indicate if the object from which this was cloned's _usingCaching flag was true\n     */\n    protected _cloneParentWasCaching: boolean;\n\n    /**\n     * The cache options from the clone parent if it was caching\n     */\n    protected _cloneParentCacheOptions: ICachingOptions | null;\n\n    /**\n     * If a specific request pipeline is set, it will be used\n     */\n    protected _requestPipeline: PipelineMethod<any>[] | null;\n\n    constructor() {\n        this._query = new Map<string, string>();\n        this._options = {};\n        this._url = \"\";\n        this._parentUrl = \"\";\n        this._useCaching = false;\n        this._cachingOptions = null;\n        this._cloneParentWasCaching = false;\n        this._cloneParentCacheOptions = null;\n        this._requestPipeline = null;\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public abstract toUrlAndQuery(): string;\n\n    /**\n    * Gets the currentl url\n    *\n    */\n    public toUrl(): string {\n        return this._url;\n    }\n\n    /**\n     * Directly concatonates the supplied string to the current url, not normalizing \"/\" chars\n     *\n     * @param pathPart The string to concatonate to the url\n     */\n    public concat(pathPart: string): this {\n        this._url += pathPart;\n        return this;\n    }\n\n    /**\n     * Provides access to the query builder for this url\n     *\n     */\n    public get query(): Map<string, string> {\n        return this._query;\n    }\n\n    /**\n     * Sets custom options for current object and all derived objects accessible via chaining\n     * \n     * @param options custom options\n     */\n    public configure(options: ConfigOptions): this {\n        mergeOptions(this._options, options);\n        return this;\n    }\n\n    /**\n     * Configures this instance from the configure options of the supplied instance\n     * \n     * @param o Instance from which options should be taken\n     */\n    public configureFrom(o: Queryable<any>): this {\n        mergeOptions(this._options, o._options);\n        return this;\n    }\n\n    /**\n     * Enables caching for this request\n     *\n     * @param options Defines the options used when caching this request\n     */\n    public usingCaching(options?: ICachingOptions): this {\n        if (!RuntimeConfig.globalCacheDisable) {\n            this._useCaching = true;\n            if (options !== undefined) {\n                this._cachingOptions = options;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Allows you to set a request specific processing pipeline\n     * \n     * @param pipeline The set of methods, in order, to execute a given request\n     */\n    public withPipeline(pipeline: PipelineMethod<any>[]): this {\n        this._requestPipeline = pipeline.slice(0);\n        return this;\n    }\n\n    protected getCore<T = GetType>(parser: ODataParser<T> = new JSONParser(), options: FetchOptions = {}): Promise<T> {\n        // Fix for #304 - when we clone objects we in some cases then execute a get request\n        // in these cases the caching settings were getting dropped from the request\n        // this tracks if the object from which this was cloned was caching and applies that to an immediate get request\n        // does not affect objects cloned from this as we are using different fields to track the settings so it won't\n        // be triggered\n        if (this._cloneParentWasCaching) {\n            this.usingCaching(this._cloneParentCacheOptions);\n        }\n        return this.reqImpl(\"GET\", options, parser);\n    }\n\n    protected postCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new JSONParser()): Promise<T> {\n        return this.reqImpl(\"POST\", options, parser);\n    }\n\n    protected patchCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new JSONParser()): Promise<T> {\n        return this.reqImpl(\"PATCH\", options, parser);\n    }\n\n    protected deleteCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new JSONParser()): Promise<T> {\n        return this.reqImpl(\"DELETE\", options, parser);\n    }\n\n    protected putCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new JSONParser()): Promise<T> {\n        return this.reqImpl(\"PUT\", options, parser);\n    }\n\n    protected reqImpl<T>(method: string, options: FetchOptions = {}, parser: ODataParser<T>): Promise<T> {\n        return this.getRequestPipeline<T>(method, options, parser)\n            .then(pipeline => this.toRequestContext<T>(method, options, parser, pipeline))\n            .then(context => pipe(context));\n    }\n\n    /**\n     * Appends the given string and normalizes \"/\" chars\n     *\n     * @param pathPart The string to append\n     */\n    protected append(pathPart: string) {\n        this._url = combine(this._url, pathPart);\n    }\n\n    /**\n     * Gets the parent url used when creating this instance\n     *\n     */\n    protected get parentUrl(): string {\n        return this._parentUrl;\n    }\n\n    /**\n     * Extends this queryable from the provided parent \n     * \n     * @param parent Parent queryable from which we will derive a base url\n     * @param path Additional path\n     */\n    protected extend(parent: Queryable<any>, path?: string) {\n        this._parentUrl = parent._url;\n        this._url = combine(this._parentUrl, path || \"\");\n        this.configureFrom(parent);\n    }\n\n    /**\n     * Configures a cloned object from this instance\n     * \n     * @param clone\n     */\n    protected _clone(clone: Queryable<any>, _0: any): any {\n\n        clone.configureFrom(this);\n\n        if (this._useCaching) {\n            clone._cloneParentWasCaching = true;\n            clone._cloneParentCacheOptions = this._cachingOptions;\n        }\n\n        return clone;\n    }\n\n    /**\n     * Handles getting the request pipeline to run for a given request\n     */\n    // @ts-ignore\n    // justified because we want to show that all these arguments are passed to the method so folks inheriting and potentially overriding\n    // clearly see how the method is invoked inside the class\n    protected getRequestPipeline<T>(method: string, options: FetchOptions = {}, parser: ODataParser<T>): Promise<PipelineMethod<T>[]> {\n\n        return new Promise(resolve => {\n            if (objectDefinedNotNull(this._requestPipeline) && isArray(this._requestPipeline)) {\n                resolve(this._requestPipeline);\n            } else {\n                resolve(getDefaultPipeline());\n            }\n        });\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected abstract toRequestContext<T>(\n        verb: string,\n        options: FetchOptions,\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>>;\n}\n\nexport abstract class ODataQueryable<BatchType extends ODataBatch, GetType = any> extends Queryable<GetType> {\n\n    /**\n     * Tracks the batch of which this query may be part\n     */\n    protected _batch: BatchType | null;\n\n    /**\n     * Allows us to properly block batch execution until everything is loaded\n     */\n    protected _batchDependency: () => void | null;\n\n    constructor() {\n        super();\n        this._batch = null;\n        this._batchDependency = null;\n    }\n\n    /**\n     * Adds this query to the supplied batch\n     *\n     * @example\n     * ```\n     *\n     * let b = pnp.sp.createBatch();\n     * pnp.sp.web.inBatch(b).get().then(...);\n     * b.execute().then(...)\n     * ```\n     */\n    public inBatch(batch: BatchType): this {\n\n        if (this.batch !== null) {\n            throw Error(\"This query is already part of a batch.\");\n        }\n\n        if (objectDefinedNotNull(batch)) {\n            this._batch = batch;\n        }\n\n        return this;\n    }\n\n    /**\n     * Gets the currentl url\n     *\n     */\n    public toUrl(): string {\n        return this._url;\n    }\n\n    /**\n     * Executes the currently built request\n     *\n     * @param parser Allows you to specify a parser to handle the result\n     * @param getOptions The options used for this request\n     */\n    public get<T = GetType>(parser: ODataParser<T> = new ODataDefaultParser(), options: FetchOptions = {}): Promise<T> {\n        return this.getCore(parser, options);\n    }\n\n    protected getCore<T = GetType>(parser: ODataParser<T> = new ODataDefaultParser(), options: FetchOptions = {}): Promise<T> {\n        return super.getCore<T>(parser, options);\n    }\n\n    protected postCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return super.postCore<T>(options, parser);\n    }\n\n    protected patchCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return super.patchCore<T>(options, parser);\n    }\n\n    protected deleteCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return super.deleteCore<T>(options, parser);\n    }\n\n    protected putCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return super.putCore<T>(options, parser);\n    }\n\n    protected reqImpl<T>(method: string, options: FetchOptions = {}, parser: ODataParser<T>): Promise<T> {\n\n        if (this.hasBatch) {\n            this._batchDependency = this.addBatchDependency();\n        }\n\n        return super.reqImpl(method, options, parser);\n    }\n\n    /**\n     * Blocks a batch call from occuring, MUST be cleared by calling the returned function\n    */\n    protected addBatchDependency(): () => void {\n        if (this._batch !== null) {\n            return this._batch.addDependency();\n        }\n\n        return () => null;\n    }\n\n    /**\n     * Indicates if the current query has a batch associated\n     *\n     */\n    protected get hasBatch(): boolean {\n        return objectDefinedNotNull(this._batch);\n    }\n\n    /**\n     * The batch currently associated with this query or null\n     *\n     */\n    protected get batch(): BatchType | null {\n        return this.hasBatch ? this._batch : null;\n    }\n\n    /**\n     * Configures a cloned object from this instance\n     * \n     * @param clone \n     */\n    protected _clone(clone: ODataQueryable<any, any>, cloneSettings: { includeBatch: boolean }): any {\n\n        clone = super._clone(clone, cloneSettings);\n\n        if (cloneSettings.includeBatch) {\n            clone = clone.inBatch(this._batch);\n        }\n\n        return clone;\n    }\n}\n","import { FetchOptions, getGUID } from \"@pnp/common\";\nimport { ODataParser } from \"./parsers\";\n\nexport interface ODataBatchRequestInfo {\n    url: string;\n    method: string;\n    options: FetchOptions;\n    parser: ODataParser<any>;\n    resolve: ((d: any) => void) | null;\n    reject: ((error: any) => void) | null;\n    id: string;\n}\n\nexport abstract class ODataBatch {\n\n    protected _deps: Promise<void>[];\n    protected _reqs: ODataBatchRequestInfo[];\n    protected _rDeps: Promise<void>[];\n\n    constructor(private _batchId = getGUID()) {\n        this._reqs = [];\n        this._deps = [];\n        this._rDeps = [];\n    }\n\n    public get batchId(): string {\n        return this._batchId;\n    }\n\n    /**\n     * The requests contained in this batch\n     */\n    protected get requests(): ODataBatchRequestInfo[] {\n        return this._reqs;\n    }\n\n    /**\n     * \n     * @param url Request url\n     * @param method Request method (GET, POST, etc)\n     * @param options Any request options\n     * @param parser The parser used to handle the eventual return from the query\n     * @param id An identifier used to track a request within a batch\n     */\n    public add<T>(url: string, method: string, options: FetchOptions, parser: ODataParser<T>, id: string): Promise<T> {\n\n        const info: ODataBatchRequestInfo = {\n            id,\n            method: method.toUpperCase(),\n            options,\n            parser,\n            reject: null,\n            resolve: null,\n            url,\n        };\n\n        const p = new Promise<T>((resolve, reject) => {\n            info.resolve = resolve;\n            info.reject = reject;\n        });\n\n        this._reqs.push(info);\n\n        return p;\n    }\n\n    /**\n     * Adds a dependency insuring that some set of actions will occur before a batch is processed.\n     * MUST be cleared using the returned resolve delegate to allow batches to run\n     */\n    public addDependency(): () => void {\n\n        let resolver: () => void = () => void (0);\n\n        this._deps.push(new Promise<void>((resolve) => {\n            resolver = resolve;\n        }));\n\n        return resolver;\n    }\n\n    /**\n     * The batch's execute method will not resolve util any promises added here resolve\n     * \n     * @param p The dependent promise\n     */\n    public addResolveBatchDependency(p: Promise<any>): void {\n        this._rDeps.push(p);\n    }\n\n    /**\n     * Execute the current batch and resolve the associated promises\n     *\n     * @returns A promise which will be resolved once all of the batch's child promises have resolved\n     */\n    public execute(): Promise<void> {\n\n        // we need to check the dependencies twice due to how different engines handle things.\n        // We can get a second set of promises added during the first set resolving\n        return Promise.all(this._deps)\n            .then(() => Promise.all(this._deps))\n            .then(() => this.executeImpl())\n            .then(() => Promise.all(this._rDeps))\n            .then(() => void (0));\n    }\n\n    protected abstract executeImpl(): Promise<void>;\n}\n"],"names":["Object","CachingOptions","this","storeName","storage","local","session","PnPClientStorage","key","dateAdd","Date","RuntimeConfig","defaultCachingTimeoutSeconds","defaultCachingStore","CachingParserWrapper","response","parser","parse","then","r","_this","cacheData","data","cacheOptions","store","put","expiration","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__decorate","decorators","target","desc","c","arguments","length","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","tslib_1.__extends","Error","HttpRequestError","clone","text","t","status","statusText","message","_super","ODataParserBase","Promise","resolve","reject","handleError","parseImpl","headers","has","parseFloat","get","txt","replace","JSON","json","parseODataJSON","catch","e","ok","init","result","rawJson","hOP","results","value","TextParser","BlobParser","blob","JSONParser","BufferParser","isFunc","arrayBuffer","buffer","LambdaParser","setResult","context","hasResult","next","pipeline","shift","pipe","Logger","write","requestId","getTime","promise","ctx","log","activeLogLevel","level","error","isBatched","batch","addResolveBatchDependency","requestPipelineMethod","alwaysRun","propertyKey","descriptor","method","_i","args","apply","PipelineMethods","verb","requestAbsoluteUrl","isCached","toLowerCase","undefined","cachingOptions","extend","batchDependency","hydrate","add","options","batchId","client","clientFactory","opts","fetch","tslib_1.__decorate","getDefaultPipeline","logStart","caching","send","logEnd","slice","Queryable","_url","pathPart","_query","mergeOptions","_options","o","globalCacheDisable","_useCaching","_cachingOptions","_requestPipeline","_cloneParentWasCaching","usingCaching","_cloneParentCacheOptions","reqImpl","getRequestPipeline","toRequestContext","combine","_parentUrl","parent","path","configureFrom","_0","objectDefinedNotNull","isArray","Map","ODataQueryable","_batch","ODataDefaultParser","getCore","postCore","patchCore","deleteCore","putCore","hasBatch","_batchDependency","addBatchDependency","addDependency","cloneSettings","_clone","includeBatch","inBatch","ODataBatch","_batchId","_reqs","url","id","info","toUpperCase","push","resolver","_deps","_rDeps","all","executeImpl","getGUID"],"mappings":";;;;;;;;;gUAmBIA,sBAAWC,yBAAX,WACI,MAAuB,UAAnBC,KAAKC,UACEF,EAAeG,QAAQC,MAEvBJ,EAAeG,QAAQE,yCAZrBL,UAAU,IAAIM,sBAM/B,WAAmBC,GAAAN,SAAAM,EAJZN,gBAAaO,UAAQ,IAAIC,KAAQ,SAAUC,gBAAcC,8BAEzDV,eAAiCS,gBAAcE,2BAmB/CC,kBAAP,SAAaC,GAAb,WACI,OAAOb,KAAKc,OAAOC,MAAMF,GAAUG,KAAK,SAAAC,GAAK,OAAAC,EAAKC,UAAUF,MAGtDL,sBAAV,SAAoBQ,GAIhB,OAHgC,OAA5BpB,KAAKqB,aAAaC,OAClBtB,KAAKqB,aAAaC,MAAMC,IAAIvB,KAAKqB,aAAaf,IAAKc,EAAMpB,KAAKqB,aAAaG,YAExEJ,MAZX,WACWN,EACAO,GADArB,YAAAc,EACAd,kBAAAqB,EChBf,IAAII,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgB3B,OAAO8B,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUJ,EAAGC,GAAKD,EAAEG,UAAYF,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAII,KAAKJ,EAAOA,EAAEK,eAAeD,KAAIL,EAAEK,GAAKJ,EAAEI,MACpDL,EAAGC,IAGrB,SAASM,EAAUP,EAAGC,GAEzB,SAASO,IAAOlC,KAAKmC,YAAcT,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEU,UAAkB,OAANT,EAAa7B,OAAOuC,OAAOV,IAAMO,EAAGE,UAAYT,EAAES,UAAW,IAAIF,GA0B5E,SAASI,EAAWC,EAAYC,EAAQlC,EAAKmC,GAChD,IAA2Hf,EAAvHgB,EAAIC,UAAUC,OAAQ3B,EAAIyB,EAAI,EAAIF,EAAkB,OAATC,EAAgBA,EAAO3C,OAAO+C,yBAAyBL,EAAQlC,GAAOmC,EACrH,GAAuB,iBAAZK,SAAoD,mBAArBA,QAAQC,SAAyB9B,EAAI6B,QAAQC,SAASR,EAAYC,EAAQlC,EAAKmC,QACpH,IAAK,IAAIO,EAAIT,EAAWK,OAAS,EAAQ,GAALI,EAAQA,KAAStB,EAAIa,EAAWS,MAAI/B,GAAKyB,EAAI,EAAIhB,EAAET,GAAS,EAAJyB,EAAQhB,EAAEc,EAAQlC,EAAKW,GAAKS,EAAEc,EAAQlC,KAASW,GAChJ,OAAW,EAAJyB,GAASzB,GAAKnB,OAAOmD,eAAeT,EAAQlC,EAAKW,GAAIA,WCjD1BiC,MAAAC,OAQpBC,OAAd,SAAmBnC,GAEf,OAAOA,EAAEoC,QAAQC,OAAOtC,KAAK,SAAAuC,GACzB,OAAO,IAAIH,EAAiB,iDAAiDnC,EAAEuC,YAAWvC,EAAEwC,mBAAkBF,EAAKtC,EAAEoC,eAP7H,WAAYK,EAAwB7C,EAA2B2C,EAAiCC,gBAAjCD,EAAS3C,EAAS2C,qBAAeC,EAAa5C,EAAS4C,YAAtH,MACIE,YAAMD,gBAD0BxC,WAAAL,EAA2BK,SAAAsC,EAAiCtC,aAAAuC,EAFzFvC,sBAAqB,WAkBrB0C,kBAAP,SAAa3C,GAAb,WAEI,OAAO,IAAI4C,QAAW,SAACC,EAASC,GACxB7C,EAAK8C,YAAY/C,EAAG8C,IACpB7C,EAAK+C,UAAUhD,EAAG6C,EAASC,MAK7BH,sBAAV,SAAoB3C,EAAa6C,EAA+CC,GAAhF,WACS9C,EAAEiD,QAAQC,IAAI,mBAAsE,IAAjDC,WAAWnD,EAAEiD,QAAQG,IAAI,oBAA2C,MAAbpD,EAAEuC,OAC7FM,EAAW,IAIX7C,EAAEqC,OACGtC,KAAK,SAAAsD,GAAO,OAAiC,EAAjCA,EAAIC,QAAQ,OAAQ,IAAI3B,OAAa4B,KAAKzD,MAAMuD,GAAO,KACnEtD,KAAK,SAAAyD,GAAQ,OAAAX,EAAQ5C,EAAKwD,eAAkBD,MAC5CE,MAAM,SAAAC,GAAK,OAAAb,EAAOa,MAWrBhB,wBAAV,SAAsB3C,EAAa8C,GAK/B,OAJK9C,EAAE4D,IACHzB,EAAiB0B,KAAK7D,GAAGD,KAAK+C,GAG3B9C,EAAE4D,IAQHjB,2BAAV,SAA4Ba,GAExB,IAAIM,EADJ/E,KAAKgF,QAAUP,EAWf,OATIQ,MAAIR,EAAM,KAENM,EADAE,MAAIR,EAAK/C,EAAG,WACH+C,EAAK/C,EAAEwD,QAEPT,EAAK/C,EAEXuD,MAAIR,EAAM,WACjBM,EAASN,EAAKU,OAEXJ,MA1Df,aAEc/E,aAAe,YA4DoBkD,MAAAU,MAAjD,qEAGgCV,MAAAU,GAElBwB,sBAAV,SAAoBnE,EAAa6C,GAC7B7C,EAAEqC,OAAOtC,KAAK8C,OAHtB,qEAOgCZ,MAAAU,GAElByB,sBAAV,SAAoBpE,EAAa6C,GAC7B7C,EAAEqE,OAAOtE,KAAK8C,OAHtB,qEAOgCZ,MAAAU,GAElB2B,sBAAV,SAAoBtE,EAAa6C,GAC7B7C,EAAEwD,OAAOzD,KAAK8C,OAHtB,qEAOkCZ,MAAAU,GAEpB4B,sBAAV,SAAoBvE,EAAa6C,GAEzB2B,SAAOxE,EAAEyE,aACTzE,EAAEyE,cAAc1E,KAAK8C,GAEf7C,EAAG0E,SAAS3E,KAAK8C,OAPnC,qEAY2CZ,MAAAU,GAM7BgC,sBAAV,SAAoB3E,EAAa6C,GAC7B9D,KAAKc,OAAOG,GAAGD,KAAK8C,OALxB,WAAoBhD,GAApB,MACI6C,0BADgBzC,SAAAJ,aC5ER+E,EAAaC,EAA4BX,GAErD,OAAO,IAAItB,QAA2B,SAACC,GAEnCgC,EAAQf,OAASI,EACjBW,EAAQC,WAAY,EACpBjC,EAAQgC,KAShB,SAASE,EAAQtD,GAEb,OAAwB,EAApBA,EAAEuD,SAASrD,OACJF,EAAEuD,SAASC,OAAXxD,CAAoBA,GAEpBmB,QAAQC,QAAQpB,YASfyD,EAAQL,GAEhBA,EAAQG,SAASrD,OAAS,GAC1BwD,SAAOC,MAAM,IAAIP,EAAQQ,iBAAe,IAAK9F,MAAQ+F,uDAGzD,IAAMC,EAAUR,EAAKF,GAAS9E,KAAK,SAAAyF,GAAO,OAjDrBX,EAiDkCW,EA/CvDL,SAAOM,IAAI,CACPtF,SAAMgF,SAAOO,eAAsCb,EAAQf,OAAS,GACpE6B,QACAlD,QAAS,IAAIoC,EAAQQ,iBAAe,IAAK9F,MAAQ+F,oFAG9C1C,QAAQC,QAAQgC,EAAQf,QARnC,IAAyBe,IAiDwCnB,MAAM,SAACC,GAEhE,MADAwB,SAAOS,MAAMjC,GACPA,IAQV,OALIkB,EAAQgB,WAERhB,EAAQiB,MAAMC,0BAA0BR,GAGrCA,WAMKS,EAAsBC,GAElC,oBAFkCA,MAE3B,SAAC1E,EAAa2E,EAAqBC,GAEtC,IAAMC,EAASD,EAAWjC,MAE1BiC,EAAWjC,MAAQ,eAAU,aAAAmC,mBAAAA,IAAAC,kBAGzB,OAAKL,GAA2B,EAAdK,EAAK3E,QAAcqC,MAAIsC,EAAK,GAAI,cAAgBA,EAAK,GAAGxB,WACtEK,SAAOC,MAAM,IAAIkB,EAAK,GAAGjB,iBAAe,IAAK9F,MAAQ+F,gDAA+CY,sCAC7FtD,QAAQC,QAAQyD,EAAK,MAIhCnB,SAAOC,MAAM,IAAIkB,EAAK,GAAGjB,iBAAe,IAAK9F,MAAQ+F,+CAA8CY,SAG5FE,EAAOG,MAAMhF,EAAQ+E,GAAMvG,KAAK,SAACyF,GAA6B,OAAAT,EAAKS,eAcpEgB,WAAd,SAA0B3B,GACtB,OAAO,IAAIjC,QAA2B,SAAAC,GAElCsC,SAAOM,IAAI,CACPtF,SAAMgF,SAAOO,eAAmC,GAAKb,EACrDc,QACAlD,QAAS,IAAIoC,EAAQQ,iBAAe,IAAK9F,MAAQ+F,yBAAwBT,EAAQ4B,kBAAiB5B,EAAQ6B,yBAG9G7D,EAAQgC,MAQF2B,UAAd,SAAyB3B,GAErB,OAAO,IAAIjC,QAA2B,SAAAC,GAGlC,GAAIgC,EAAQ8B,SAAU,CAElBxB,SAAOC,MAAM,IAAIP,EAAQQ,iBAAe,IAAK9F,MAAQ+F,mEAErD,IAAIlF,EAAe,IAAItB,EAAe+F,EAAQ6B,mBAAmBE,eAMjE,QAL+BC,IAA3BhC,EAAQiC,iBACR1G,EAAe2G,SAAO3G,EAAcyE,EAAQiC,iBAIrB,OAAvB1G,EAAaC,MAAgB,CAE7B,IAAIF,EAAOC,EAAaC,MAAM+C,IAAIhD,EAAaf,KAC/C,GAAa,OAATc,EAcA,OAZAgF,SAAOM,IAAI,CACPtF,SAAMgF,SAAOO,eAAmC,GAAKvF,EACrDwF,QACAlD,QAAS,IAAIoC,EAAQQ,iBAAe,IAAK9F,MAAQ+F,2CAEjDd,SAAOK,EAAQmC,kBACfnC,EAAQmC,kBAGRhD,MAAIa,EAAQhF,OAAQ,aACpBM,EAAO0E,EAAQhF,OAAOoH,QAAQ9G,IAE3ByE,EAAUC,EAAS1E,GAAMJ,KAAK,SAAAyF,GAAO,OAAA3C,EAAQ2C,KAI5DL,SAAOC,MAAM,IAAIP,EAAQQ,iBAAe,IAAK9F,MAAQ+F,2CAIrDT,EAAQhF,OAAS,IAAIF,EAAqBkF,EAAQhF,OAAQO,GAG9D,OAAOyC,EAAQgC,MAQT2B,OAAd,SAAsB3B,GAElB,OAAO,IAAIjC,QAA2B,SAACC,EAASC,GAE5C,GAAI+B,EAAQgB,UAAW,CAGnB,IAAM/E,EAAI+D,EAAQiB,MAAMoB,IAAIrC,EAAQ6B,mBAAoB7B,EAAQ4B,KAAM5B,EAAQsC,QAAStC,EAAQhF,OAAQgF,EAAQQ,WAG3Gb,SAAOK,EAAQmC,kBACfnC,EAAQmC,kBAGZ7B,SAAOC,MAAM,IAAIP,EAAQQ,iBAAe,IAAK9F,MAAQ+F,yCAAwCT,EAAQiB,MAAMsB,eAG3GvE,EAAQ+B,EAAUC,EAAS/D,QAExB,CAEHqE,SAAOC,MAAM,IAAIP,EAAQQ,iBAAe,IAAK9F,MAAQ+F,kCAGrD,IAAM+B,EAASxC,EAAQyC,gBACjBC,EAAOR,SAAOlC,EAAQsC,SAAW,GAAI,CAAEf,OAAQvB,EAAQ4B,OAC7DY,EAAOG,MAAM3C,EAAQ6B,mBAAoBa,GACpCxH,KAAK,SAAAH,GAAY,OAAAiF,EAAQhF,OAAOC,MAAMF,KACtCG,KAAK,SAAA+D,GAAU,OAAAc,EAAUC,EAASf,KAClC/D,KAAK,SAAAyF,GAAO,OAAA3C,EAAQ2C,KACpB9B,MAAM,SAAAC,GAAK,OAAAb,EAAOa,SASrB6C,SAAd,SAAwB3B,GAEpB,OAAO,IAAIjC,QAA2B,SAAAC,GAE9BgC,EAAQgB,UAERV,SAAOM,IAAI,CACPtF,SAAMgF,SAAOO,eAAmC,GAAKb,EACrDc,QACAlD,QAAS,IAAIoC,EAAQQ,iBAAe,IAAK9F,MAAQ+F,eAAcT,EAAQ4B,wCAAuC5B,EAAQiB,MAAMsB,cAKhIjC,SAAOM,IAAI,CACPtF,SAAMgF,SAAOO,eAAmC,GAAKb,EACrDc,QACAlD,QAAS,IAAIoC,EAAQQ,iBAAe,IAAK9F,MAAQ+F,0BAAyBT,EAAQ4B,mBAI1F5D,EAAQgC,MAhIhB4C,GADCzB,GAAsB,uBAkBvByB,GADCzB,uBAoDDyB,GADCzB,oBAwCDyB,GADCzB,GAAsB,wBAhH3B,uBA2IgB0B,IACZ,MAAO,CACHlB,EAAgBmB,SAChBnB,EAAgBoB,QAChBpB,EAAgBqB,KAChBrB,EAAgBsB,QAClBC,MAAM,UCrLDC,kBAAP,WACI,OAAOjJ,KAAKkJ,MAQTD,mBAAP,SAAcE,GAEV,OADAnJ,KAAKkJ,MAAQC,EACNnJ,MAOXF,sBAAWmJ,yBAAX,WACI,OAAOjJ,KAAKoJ,wCAQTH,sBAAP,SAAiBb,GAEb,OADAiB,eAAarJ,KAAKsJ,SAAUlB,GACrBpI,MAQJiJ,0BAAP,SAAqBM,GAEjB,OADAF,eAAarJ,KAAKsJ,SAAUC,EAAED,UACvBtJ,MAQJiJ,yBAAP,SAAoBb,GAOhB,OANK3H,gBAAc+I,qBACfxJ,KAAKyJ,aAAc,OACH3B,IAAZM,IACApI,KAAK0J,gBAAkBtB,IAGxBpI,MAQJiJ,yBAAP,SAAoBhD,GAEhB,OADAjG,KAAK2J,iBAAmB1D,EAAS+C,MAAM,GAChChJ,MAGDiJ,oBAAV,SAA+BnI,EAA2CsH,GAStE,oBAT2BtH,MAA6ByE,gBAAc6C,MAMlEpI,KAAK4J,wBACL5J,KAAK6J,aAAa7J,KAAK8J,0BAEpB9J,KAAK+J,QAAQ,MAAO3B,EAAStH,IAG9BmI,qBAAV,SAA4Bb,EAA4BtH,GACpD,oBADwBsH,mBAA4BtH,MAA6ByE,GAC1EvF,KAAK+J,QAAQ,OAAQ3B,EAAStH,IAG/BmI,sBAAV,SAA6Bb,EAA4BtH,GACrD,oBADyBsH,mBAA4BtH,MAA6ByE,GAC3EvF,KAAK+J,QAAQ,QAAS3B,EAAStH,IAGhCmI,uBAAV,SAA8Bb,EAA4BtH,GACtD,oBAD0BsH,mBAA4BtH,MAA6ByE,GAC5EvF,KAAK+J,QAAQ,SAAU3B,EAAStH,IAGjCmI,oBAAV,SAA2Bb,EAA4BtH,GACnD,oBADuBsH,mBAA4BtH,MAA6ByE,GACzEvF,KAAK+J,QAAQ,MAAO3B,EAAStH,IAG9BmI,oBAAV,SAAqB5B,EAAgBe,EAA4BtH,GAAjE,WACI,oBADiCsH,MAC1BpI,KAAKgK,mBAAsB3C,EAAQe,EAAStH,GAC9CE,KAAK,SAAAiF,GAAY,OAAA/E,EAAK+I,iBAAoB5C,EAAQe,EAAStH,EAAQmF,KACnEjF,KAAK,SAAA8E,GAAW,OAAAK,EAAKL,MAQpBmD,mBAAV,SAAiBE,GACbnJ,KAAKkJ,KAAOgB,UAAQlK,KAAKkJ,KAAMC,IAOnCrJ,sBAAcmJ,6BAAd,WACI,OAAOjJ,KAAKmK,4CASNlB,mBAAV,SAAiBmB,EAAwBC,GACrCrK,KAAKmK,WAAaC,EAAOlB,KACzBlJ,KAAKkJ,KAAOgB,UAAQlK,KAAKmK,WAAYE,GAAQ,IAC7CrK,KAAKsK,cAAcF,IAQbnB,mBAAV,SAAiB5F,EAAuBkH,GASpC,OAPAlH,EAAMiH,cAActK,MAEhBA,KAAKyJ,cACLpG,EAAMuG,wBAAyB,EAC/BvG,EAAMyG,yBAA2B9J,KAAK0J,iBAGnCrG,GASD4F,+BAAV,SAAgC5B,EAAgBe,EAA4BtH,GAA5E,WAEI,oBAF4CsH,MAErC,IAAIvE,QAAQ,SAAAC,GACX0G,uBAAqBtJ,EAAKyI,mBAAqBc,UAAQvJ,EAAKyI,kBAC5D7F,EAAQ5C,EAAKyI,kBAEb7F,EAAQ6E,WArLpB,aACI3I,KAAKoJ,OAAS,IAAIsB,IAClB1K,KAAKsJ,SAAW,GAChBtJ,KAAKkJ,KAAO,GACZlJ,KAAKmK,WAAa,GAClBnK,KAAKyJ,aAAc,EACnBzJ,KAAK0J,gBAAkB,KACvB1J,KAAK4J,wBAAyB,EAC9B5J,KAAK8J,yBAA2B,KAChC9J,KAAK2J,iBAAmB,cAgM0DzG,MAAA+F,GA6B/E0B,oBAAP,SAAe5D,GAEX,GAAmB,OAAf/G,KAAK+G,MACL,MAAM5D,MAAM,0CAOhB,OAJIqH,uBAAqBzD,KACrB/G,KAAK4K,OAAS7D,GAGX/G,MAOJ2K,kBAAP,WACI,OAAO3K,KAAKkJ,MASTyB,gBAAP,SAAwB7J,EAAmDsH,GACvE,oBADoBtH,MAA6B+J,gBAAsBzC,MAChEpI,KAAK8K,QAAQhK,EAAQsH,IAGtBuC,oBAAV,SAA+B7J,EAAmDsH,GAC9E,oBAD2BtH,MAA6B+J,gBAAsBzC,MACvEzE,YAAMmH,kBAAWhK,EAAQsH,IAG1BuC,qBAAV,SAA4BvC,EAA4BtH,GACpD,oBADwBsH,mBAA4BtH,MAA6B+J,GAC1ElH,YAAMoH,mBAAY3C,EAAStH,IAG5B6J,sBAAV,SAA6BvC,EAA4BtH,GACrD,oBADyBsH,mBAA4BtH,MAA6B+J,GAC3ElH,YAAMqH,oBAAa5C,EAAStH,IAG7B6J,uBAAV,SAA8BvC,EAA4BtH,GACtD,oBAD0BsH,mBAA4BtH,MAA6B+J,GAC5ElH,YAAMsH,qBAAc7C,EAAStH,IAG9B6J,oBAAV,SAA2BvC,EAA4BtH,GACnD,oBADuBsH,mBAA4BtH,MAA6B+J,GACzElH,YAAMuH,kBAAW9C,EAAStH,IAG3B6J,oBAAV,SAAqBtD,EAAgBe,EAA4BtH,GAM7D,oBANiCsH,MAE7BpI,KAAKmL,WACLnL,KAAKoL,iBAAmBpL,KAAKqL,sBAG1B1H,YAAMoG,kBAAQ1C,EAAQe,EAAStH,IAMhC6J,+BAAV,WACI,OAAoB,OAAhB3K,KAAK4K,OACE5K,KAAK4K,OAAOU,gBAGhB,WAAM,OAAA,OAOjBxL,sBAAc6K,4BAAd,WACI,OAAOH,uBAAqBxK,KAAK4K,yCAOrC9K,sBAAc6K,yBAAd,WACI,OAAO3K,KAAKmL,SAAWnL,KAAK4K,OAAS,sCAQ/BD,mBAAV,SAAiBtH,EAAiCkI,GAQ9C,OANAlI,EAAQM,YAAM6H,iBAAOnI,EAAOkI,GAExBA,EAAcE,eACdpI,EAAQA,EAAMqI,QAAQ1L,KAAK4K,SAGxBvH,MArHX,aAAA,MACIM,0BACAzC,EAAK0J,OAAS,KACd1J,EAAKkK,iBAAmB,cCjQ5BtL,sBAAW6L,2BAAX,WACI,OAAO3L,KAAK4L,0CAMhB9L,sBAAc6L,4BAAd,WACI,OAAO3L,KAAK6L,uCAWTF,gBAAP,SAAcG,EAAazE,EAAgBe,EAAuBtH,EAAwBiL,GAEtF,IAAMC,EAA8B,CAChCD,KACA1E,OAAQA,EAAO4E,cACf7D,UACAtH,SACAiD,OAAQ,KACRD,QAAS,KACTgI,OAGE/J,EAAI,IAAI8B,QAAW,SAACC,EAASC,GAC/BiI,EAAKlI,QAAUA,EACfkI,EAAKjI,OAASA,IAKlB,OAFA/D,KAAK6L,MAAMK,KAAKF,GAETjK,GAOJ4J,0BAAP,WAEI,IAAIQ,EAAuB,aAM3B,OAJAnM,KAAKoM,MAAMF,KAAK,IAAIrI,QAAc,SAACC,GAC/BqI,EAAWrI,KAGRqI,GAQJR,sCAAP,SAAiC5J,GAC7B/B,KAAKqM,OAAOH,KAAKnK,IAQd4J,oBAAP,WAAA,WAII,OAAO9H,QAAQyI,IAAItM,KAAKoM,OACnBpL,KAAK,WAAM,OAAA6C,QAAQyI,IAAIpL,EAAKkL,SAC5BpL,KAAK,WAAM,OAAAE,EAAKqL,gBAChBvL,KAAK,WAAM,OAAA6C,QAAQyI,IAAIpL,EAAKmL,UAC5BrL,KAAK,kBApFd,WAAoB4K,gBAAAA,EAAWY,aAAXxM,cAAA4L,EAChB5L,KAAK6L,MAAQ,GACb7L,KAAKoM,MAAQ,GACbpM,KAAKqM,OAAS"}