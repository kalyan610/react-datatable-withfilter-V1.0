import { __awaiter, __decorate } from "tslib";
import { _SharePointQueryable } from "../sharepointqueryable.js";
import { extractWebUrl } from "../utils/extractweburl.js";
import { headers, body } from "@pnp/odata";
import { spPost } from "../operations.js";
import { hOP } from "@pnp/common";
import { tag } from "../telemetry.js";
export class _SiteDesigns extends _SharePointQueryable {
    constructor(baseUrl, methodName = "") {
        const url = typeof baseUrl === "string" ? baseUrl : baseUrl.toUrl();
        super(extractWebUrl(url), `_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.${methodName}`);
    }
    execute(props) {
        return spPost(this, body(props, headers({ "Content-Type": "application/json;charset=utf-8" })));
    }
    /**
     * Creates a new site design available to users when they create a new site from the SharePoint home page.
     *
     * @param creationInfo A sitedesign creation information object
     */
    createSiteDesign(creationInfo) {
        return this.clone(SiteDesignsCloneFactory, "CreateSiteDesign").execute({ info: creationInfo });
    }
    /**
     * Applies a site design to an existing site collection.
     *
     * @param siteDesignId The ID of the site design to apply.
     * @param webUrl The URL of the site collection where you want to apply the site design.
     */
    applySiteDesign(siteDesignId, webUrl) {
        return this.clone(SiteDesignsCloneFactory, "ApplySiteDesign").execute({ siteDesignId: siteDesignId, "webUrl": webUrl });
    }
    /**
     * Gets the list of available site designs
     */
    getSiteDesigns() {
        return this.clone(SiteDesignsCloneFactory, "GetSiteDesigns").execute({});
    }
    /**
     * Gets information about a specific site design.
     * @param id The ID of the site design to get information about.
     */
    getSiteDesignMetadata(id) {
        return this.clone(SiteDesignsCloneFactory, "GetSiteDesignMetadata").execute({ id: id });
    }
    /**
     * Updates a site design with new values. In the REST call, all parameters are optional except the site script Id.
     * If you had previously set the IsDefault parameter to TRUE and wish it to remain true, you must pass in this parameter again (otherwise it will be reset to FALSE).
     * @param updateInfo A sitedesign update information object
     */
    updateSiteDesign(updateInfo) {
        return this.clone(SiteDesignsCloneFactory, "UpdateSiteDesign").execute({ updateInfo: updateInfo });
    }
    /**
     * Deletes a site design.
     * @param id The ID of the site design to delete.
     */
    deleteSiteDesign(id) {
        return this.clone(SiteDesignsCloneFactory, "DeleteSiteDesign").execute({ id: id });
    }
    /**
     * Gets a list of principals that have access to a site design.
     * @param id The ID of the site design to get rights information from.
     */
    getSiteDesignRights(id) {
        return this.clone(SiteDesignsCloneFactory, "GetSiteDesignRights").execute({ id: id });
    }
    /**
     * Grants access to a site design for one or more principals.
     * @param id The ID of the site design to grant rights on.
     * @param principalNames An array of one or more principals to grant view rights.
     *                       Principals can be users or mail-enabled security groups in the form of "alias" or "alias@<domain name>.com"
     * @param grantedRights Always set to 1. This represents the View right.
     */
    grantSiteDesignRights(id, principalNames, grantedRights = 1) {
        return this.clone(SiteDesignsCloneFactory, "GrantSiteDesignRights")
            .execute({
            "grantedRights": grantedRights.toString(),
            "id": id,
            "principalNames": principalNames,
        });
    }
    /**
     * Revokes access from a site design for one or more principals.
     * @param id The ID of the site design to revoke rights from.
     * @param principalNames An array of one or more principals to revoke view rights from.
     *                       If all principals have rights revoked on the site design, the site design becomes viewable to everyone.
     */
    revokeSiteDesignRights(id, principalNames) {
        return this.clone(SiteDesignsCloneFactory, "RevokeSiteDesignRights")
            .execute({
            "id": id,
            "principalNames": principalNames,
        });
    }
    /**
     * Adds a site design task on the specified web url to be invoked asynchronously.
     * @param webUrl The absolute url of the web on where to create the task
     * @param siteDesignId The ID of the site design to create a task for
     */
    addSiteDesignTask(webUrl, siteDesignId) {
        return this.clone(SiteDesignsCloneFactory, "AddSiteDesignTask")
            .execute({ "webUrl": webUrl, "siteDesignId": siteDesignId });
    }
    /**
     * Adds a site design task on the current web to be invoked asynchronously.
     * @param siteDesignId The ID of the site design to create a task for
     */
    addSiteDesignTaskToCurrentWeb(siteDesignId) {
        return this.clone(SiteDesignsCloneFactory, "AddSiteDesignTaskToCurrentWeb")
            .execute({ "siteDesignId": siteDesignId });
    }
    /**
     * Retrieves the site design task, if the task has finished running null will be returned
     * @param id The ID of the site design task
     */
    getSiteDesignTask(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const task = yield this.clone(SiteDesignsCloneFactory, "GetSiteDesignTask")
                .execute({ "taskId": id });
            return hOP(task, "ID") ? task : null;
        });
    }
    /**
     * Retrieves a list of site design that have run on a specific web
     * @param webUrl The url of the web where the site design was applied
     * @param siteDesignId (Optional) the site design ID, if not provided will return all site design runs
     */
    getSiteDesignRun(webUrl, siteDesignId) {
        return this.clone(SiteDesignsCloneFactory, "GetSiteDesignRun")
            .execute({ "webUrl": webUrl, siteDesignId: siteDesignId });
    }
    /**
     * Retrieves the status of a site design that has been run or is still running
     * @param webUrl The url of the web where the site design was applied
     * @param runId the run ID
     */
    getSiteDesignRunStatus(webUrl, runId) {
        return this.clone(SiteDesignsCloneFactory, "GetSiteDesignRunStatus")
            .execute({ "webUrl": webUrl, runId: runId });
    }
}
__decorate([
    tag("sd.createSiteDesign")
], _SiteDesigns.prototype, "createSiteDesign", null);
__decorate([
    tag("sd.applySiteDesign")
], _SiteDesigns.prototype, "applySiteDesign", null);
__decorate([
    tag("sd.getSiteDesigns")
], _SiteDesigns.prototype, "getSiteDesigns", null);
__decorate([
    tag("sd.getSiteDesignMetadata")
], _SiteDesigns.prototype, "getSiteDesignMetadata", null);
__decorate([
    tag("sd.updateSiteDesign")
], _SiteDesigns.prototype, "updateSiteDesign", null);
__decorate([
    tag("sd.deleteSiteDesign")
], _SiteDesigns.prototype, "deleteSiteDesign", null);
__decorate([
    tag("sd.getSiteDesignRights")
], _SiteDesigns.prototype, "getSiteDesignRights", null);
__decorate([
    tag("sd.grantSiteDesignRights")
], _SiteDesigns.prototype, "grantSiteDesignRights", null);
__decorate([
    tag("sd.revokeSiteDesignRights")
], _SiteDesigns.prototype, "revokeSiteDesignRights", null);
__decorate([
    tag("sd.addSiteDesignTask")
], _SiteDesigns.prototype, "addSiteDesignTask", null);
__decorate([
    tag("sd.addSiteDesignTaskToCurrentWeb")
], _SiteDesigns.prototype, "addSiteDesignTaskToCurrentWeb", null);
__decorate([
    tag("sd.getSiteDesignTask")
], _SiteDesigns.prototype, "getSiteDesignTask", null);
__decorate([
    tag("sd.getSiteDesignRun")
], _SiteDesigns.prototype, "getSiteDesignRun", null);
__decorate([
    tag("sd.getSiteDesignRunStatus")
], _SiteDesigns.prototype, "getSiteDesignRunStatus", null);
export const SiteDesigns = (baseUrl, methodName) => new _SiteDesigns(baseUrl, methodName);
const SiteDesignsCloneFactory = (baseUrl, methodName = "") => SiteDesigns(baseUrl, methodName);
//# sourceMappingURL=types.js.map