import { __decorate } from "tslib";
import { _SharePointQueryable } from "../sharepointqueryable.js";
import { extractWebUrl } from "../utils/extractweburl.js";
import { defaultPath } from "../decorators.js";
import { spPost } from "../operations.js";
import { body } from "@pnp/odata";
import { tag } from "../telemetry.js";
let _RelatedItemManager = class _RelatedItemManager extends _SharePointQueryable {
    getRelatedItems(sourceListName, sourceItemId) {
        const query = this.clone(RelatedItemManager, null);
        query.concat(".GetRelatedItems");
        return spPost(query, body({
            SourceItemID: sourceItemId,
            SourceListName: sourceListName,
        }));
    }
    getPageOneRelatedItems(sourceListName, sourceItemId) {
        const query = this.clone(RelatedItemManager, null);
        query.concat(".GetPageOneRelatedItems");
        return spPost(query, body({
            SourceItemID: sourceItemId,
            SourceListName: sourceListName,
        }));
    }
    addSingleLink(sourceListName, sourceItemId, sourceWebUrl, targetListName, targetItemID, targetWebUrl, tryAddReverseLink = false) {
        const query = this.clone(RelatedItemManager, null);
        query.concat(".AddSingleLink");
        return spPost(query, body({
            SourceItemID: sourceItemId,
            SourceListName: sourceListName,
            SourceWebUrl: sourceWebUrl,
            TargetItemID: targetItemID,
            TargetListName: targetListName,
            TargetWebUrl: targetWebUrl,
            TryAddReverseLink: tryAddReverseLink,
        }));
    }
    addSingleLinkToUrl(sourceListName, sourceItemId, targetItemUrl, tryAddReverseLink = false) {
        const query = this.clone(RelatedItemManager, null);
        query.concat(".AddSingleLinkToUrl");
        return spPost(query, body({
            SourceItemID: sourceItemId,
            SourceListName: sourceListName,
            TargetItemUrl: targetItemUrl,
            TryAddReverseLink: tryAddReverseLink,
        }));
    }
    addSingleLinkFromUrl(sourceItemUrl, targetListName, targetItemId, tryAddReverseLink = false) {
        const query = this.clone(RelatedItemManager, null);
        query.concat(".AddSingleLinkFromUrl");
        return spPost(query, body({
            SourceItemUrl: sourceItemUrl,
            TargetItemID: targetItemId,
            TargetListName: targetListName,
            TryAddReverseLink: tryAddReverseLink,
        }));
    }
    deleteSingleLink(sourceListName, sourceItemId, sourceWebUrl, targetListName, targetItemId, targetWebUrl, tryDeleteReverseLink = false) {
        const query = this.clone(RelatedItemManager, null);
        query.concat(".DeleteSingleLink");
        return spPost(query, body({
            SourceItemID: sourceItemId,
            SourceListName: sourceListName,
            SourceWebUrl: sourceWebUrl,
            TargetItemID: targetItemId,
            TargetListName: targetListName,
            TargetWebUrl: targetWebUrl,
            TryDeleteReverseLink: tryDeleteReverseLink,
        }));
    }
};
__decorate([
    tag("rim.getRelatedItems")
], _RelatedItemManager.prototype, "getRelatedItems", null);
__decorate([
    tag("rim.getPageOneRelatedItems")
], _RelatedItemManager.prototype, "getPageOneRelatedItems", null);
__decorate([
    tag("rim.addSingleLink")
], _RelatedItemManager.prototype, "addSingleLink", null);
__decorate([
    tag("rim.ToUrl")
], _RelatedItemManager.prototype, "addSingleLinkToUrl", null);
__decorate([
    tag("rim.FromUrl")
], _RelatedItemManager.prototype, "addSingleLinkFromUrl", null);
__decorate([
    tag("rim.deleteSingleLink")
], _RelatedItemManager.prototype, "deleteSingleLink", null);
_RelatedItemManager = __decorate([
    defaultPath("_api/SP.RelatedItemManager")
], _RelatedItemManager);
export { _RelatedItemManager };
export const RelatedItemManager = (url) => new _RelatedItemManager(extractWebUrl(typeof url === "string" ? url : url.toUrl()));
//# sourceMappingURL=types.js.map