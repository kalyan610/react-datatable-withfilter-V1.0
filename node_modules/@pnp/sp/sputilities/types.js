import { __awaiter } from "tslib";
import { _SharePointQueryable, spInvokableFactory } from "../sharepointqueryable.js";
import { assign } from "@pnp/common";
import { body } from "@pnp/odata";
import { odataUrlFrom } from "../odata.js";
import { metadata } from "../utils/metadata.js";
import { File } from "../files/types.js";
import { extractWebUrl } from "../utils/extractweburl.js";
import { spPost } from "../operations.js";
import { tag } from "../telemetry.js";
import { objectToSPKeyValueCollection } from "../utils/objectToSPKeyValueCollection.js";
export class _Utilities extends _SharePointQueryable {
    constructor(baseUrl, methodName) {
        const url = typeof baseUrl === "string" ? baseUrl : baseUrl.toUrl();
        super(extractWebUrl(url), `_api/SP.Utilities.Utility.${methodName}`);
    }
    excute(props) {
        return spPost(this, body(props));
    }
    sendEmail(props) {
        const params = {
            properties: assign(metadata("SP.Utilities.EmailProperties"), {
                Body: props.Body,
                From: props.From,
                Subject: props.Subject,
            }),
        };
        if (props.To && props.To.length > 0) {
            params.properties = assign(params.properties, {
                To: { results: props.To },
            });
        }
        if (props.CC && props.CC.length > 0) {
            params.properties = assign(params.properties, {
                CC: { results: props.CC },
            });
        }
        if (props.BCC && props.BCC.length > 0) {
            params.properties = assign(params.properties, {
                BCC: { results: props.BCC },
            });
        }
        if (props.AdditionalHeaders) {
            params.properties = assign(params.properties, {
                AdditionalHeaders: objectToSPKeyValueCollection(props.AdditionalHeaders),
            });
        }
        return tag.configure(this.clone(UtilitiesCloneFactory, "SendEmail", true), "u.sendEmail").excute(params);
    }
    getCurrentUserEmailAddresses() {
        return tag.configure(this.clone(UtilitiesCloneFactory, "GetCurrentUserEmailAddresses", true), "u.getCurrentUserEmailAddresses").excute({});
    }
    resolvePrincipal(input, scopes, sources, inputIsEmailOnly, addToUserInfoList, matchUserInfoList = false) {
        const params = {
            addToUserInfoList,
            input,
            inputIsEmailOnly,
            matchUserInfoList,
            scopes,
            sources,
        };
        const clone = this.clone(UtilitiesCloneFactory, "ResolvePrincipalInCurrentContext", true);
        return tag.configure(clone, "u.ResolvePrincipalInCurrentContext").excute(params);
    }
    searchPrincipals(input, scopes, sources, groupName, maxCount) {
        const params = {
            groupName: groupName,
            input: input,
            maxCount: maxCount,
            scopes: scopes,
            sources: sources,
        };
        const clone = this.clone(UtilitiesCloneFactory, "SearchPrincipalsUsingContextWeb", true);
        return tag.configure(clone, "u.SearchPrincipalsUsingContextWeb").excute(params);
    }
    createEmailBodyForInvitation(pageAddress) {
        const params = {
            pageAddress: pageAddress,
        };
        const clone = this.clone(UtilitiesCloneFactory, "CreateEmailBodyForInvitation", true);
        return tag.configure(clone, "u.CreateEmailBodyForInvitation").excute(params);
    }
    expandGroupsToPrincipals(inputs, maxCount = 30) {
        const params = {
            inputs: inputs,
            maxCount: maxCount,
        };
        const clone = this.clone(UtilitiesCloneFactory, "ExpandGroupsToPrincipals", true);
        return tag.configure(clone, "u.ExpandGroupsToPrincipals").excute(params);
    }
    createWikiPage(info) {
        return __awaiter(this, void 0, void 0, function* () {
            const clone = this.clone(UtilitiesCloneFactory, "CreateWikiPageInContextWeb", true);
            const newPage = yield tag.configure(clone, "u.CreateWikiPageInContextWeb").excute({ parameters: info });
            return {
                data: newPage,
                file: File(odataUrlFrom(newPage)),
            };
        });
    }
}
export const Utilities = spInvokableFactory(_Utilities);
const UtilitiesCloneFactory = (baseUrl, path) => Utilities(baseUrl, path);
//# sourceMappingURL=types.js.map