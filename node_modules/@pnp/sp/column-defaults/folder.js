import { __awaiter } from "tslib";
import { odataUrlFrom } from "../odata.js";
import { extractWebUrl } from "../utils/extractweburl.js";
import { Web } from "../webs/types.js";
import "../lists/web.js";
import { _Folder, Folder } from "../folders/types.js";
_Folder.prototype.getDefaultColumnValues = function () {
    return __awaiter(this, void 0, void 0, function* () {
        const folderProps = yield Folder(this, "Properties").select("vti_x005f_listname")();
        const { ServerRelativePath: serRelPath } = yield this.select("ServerRelativePath")();
        const web = Web(extractWebUrl(odataUrlFrom(folderProps)));
        const docLib = web.lists.getById(folderProps.vti_x005f_listname);
        // and we return the defaults associated with this folder's server relative path only
        // if you want all the defaults use list.getDefaultColumnValues()
        return (yield docLib.getDefaultColumnValues()).filter(v => v.path.toLowerCase() === serRelPath.DecodedUrl.toLowerCase());
    });
};
_Folder.prototype.setDefaultColumnValues = function (fieldDefaults, merge = true) {
    return __awaiter(this, void 0, void 0, function* () {
        // we start by figuring out where we are
        const folderProps = yield Folder(this, "Properties").select("vti_x005f_listname")();
        // now we create a web, list and batch to get some info we need
        const web = Web(extractWebUrl(odataUrlFrom(folderProps)));
        const docLib = web.lists.getById(folderProps.vti_x005f_listname);
        // we need the proper folder path
        const folderPath = (yield this.select("ServerRelativePath")()).ServerRelativePath.DecodedUrl;
        // at this point we should have all the defaults to update
        // and we need to get all the defaults to update the entire doc
        const existingDefaults = yield docLib.getDefaultColumnValues();
        // we filter all defaults to remove any associated with this folder if merge is false
        const filteredExistingDefaults = merge ? existingDefaults : existingDefaults.filter(f => f.path !== folderPath);
        // we update / add any new defaults from those passed to this method
        fieldDefaults.forEach(d => {
            const existing = filteredExistingDefaults.find(ed => ed.name === d.name && ed.path === folderPath);
            if (existing) {
                existing.value = d.value;
            }
            else {
                filteredExistingDefaults.push({
                    name: d.name,
                    path: folderPath,
                    value: d.value,
                });
            }
        });
        // after this operation filteredExistingDefaults should contain all the value we want to write to the file
        yield docLib.setDefaultColumnValues(filteredExistingDefaults);
    });
};
_Folder.prototype.clearDefaultColumnValues = function () {
    return __awaiter(this, void 0, void 0, function* () {
        yield this.setDefaultColumnValues([], false);
    });
};
//# sourceMappingURL=folder.js.map