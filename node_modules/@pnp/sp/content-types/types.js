import { __awaiter, __decorate } from "tslib";
import { body } from "@pnp/odata";
import { SharePointQueryableCollection, _SharePointQueryableInstance, _SharePointQueryableCollection, spInvokableFactory, deleteable, } from "../sharepointqueryable.js";
import { defaultPath } from "../decorators.js";
import { metadata } from "../utils/metadata.js";
import { spPost } from "../operations.js";
import { tag } from "../telemetry.js";
let _ContentTypes = class _ContentTypes extends _SharePointQueryableCollection {
    /**
     * Adds an existing contenttype to a content type collection
     *
     * @param contentTypeId in the following format, for example: 0x010102
     */
    addAvailableContentType(contentTypeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield spPost(this.clone(ContentTypes, "addAvailableContentType"), body({ "contentTypeId": contentTypeId }));
            return {
                contentType: this.getById(data.id),
                data: data,
            };
        });
    }
    /**
     * Gets a ContentType by content type id
     * @param id The id of the content type to get, in the following format, for example: 0x010102
     */
    getById(id) {
        return tag.configure(ContentType(this).concat(`('${id}')`), "cts.getById");
    }
    /**
     * Adds a new content type to the collection
     *
     * @param id The desired content type id for the new content type (also determines the parent content type)
     * @param name The name of the content type
     * @param description The description of the content type
     * @param group The group in which to add the content type
     * @param additionalSettings Any additional settings to provide when creating the content type
     *
     */
    add(id, name, description = "", group = "Custom Content Types", additionalSettings = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const postBody = body(Object.assign(metadata("SP.ContentType"), {
                "Description": description,
                "Group": group,
                "Id": { "StringValue": id },
                "Name": name,
            }, additionalSettings));
            const data = yield spPost(this, postBody);
            return { contentType: this.getById(data.id), data };
        });
    }
};
__decorate([
    tag("cts.addAvailableContentType")
], _ContentTypes.prototype, "addAvailableContentType", null);
__decorate([
    tag("cts.add")
], _ContentTypes.prototype, "add", null);
_ContentTypes = __decorate([
    defaultPath("contenttypes")
], _ContentTypes);
export { _ContentTypes };
export const ContentTypes = spInvokableFactory(_ContentTypes);
export class _ContentType extends _SharePointQueryableInstance {
    constructor() {
        super(...arguments);
        this.delete = deleteable("ct");
    }
    /**
     * Gets the column (also known as field) references in the content type.
     */
    get fieldLinks() {
        return tag.configure(FieldLinks(this), "ct.fieldLinks");
    }
    /**
     * Gets a value that specifies the collection of fields for the content type.
     */
    get fields() {
        return tag.configure(SharePointQueryableCollection(this, "fields"), "ct.fields");
    }
    /**
     * Gets the parent content type of the content type.
     */
    get parent() {
        return tag.configure(ContentType(this, "parent"), "ct.parent");
    }
    /**
     * Gets a value that specifies the collection of workflow associations for the content type.
     */
    get workflowAssociations() {
        return tag.configure(SharePointQueryableCollection(this, "workflowAssociations"), "ct.workflowAssociations");
    }
}
export const ContentType = spInvokableFactory(_ContentType);
let _FieldLinks = class _FieldLinks extends _SharePointQueryableCollection {
    /**
    *  Gets a FieldLink by GUID id
    *
    * @param id The GUID id of the field link
    */
    getById(id) {
        return tag.configure(FieldLink(this).concat(`(guid'${id}')`), "fls.getById");
    }
};
_FieldLinks = __decorate([
    defaultPath("fieldlinks")
], _FieldLinks);
export { _FieldLinks };
export const FieldLinks = spInvokableFactory(_FieldLinks);
export class _FieldLink extends _SharePointQueryableInstance {
}
export const FieldLink = spInvokableFactory(_FieldLink);
//# sourceMappingURL=types.js.map