import { __awaiter } from "tslib";
import { DefaultRuntime, Runtime } from "@pnp/common";
import { setup as _setup, } from "./splibconfig.js";
/**
 * Root of the SharePoint REST module
 */
export class SPRest {
    /**
     * Creates a new instance of the SPRest class
     *
     * @param options Additional options
     * @param baseUrl A string that should form the base part of the url
     */
    constructor(_options = {}, _baseUrl = "", _runtime = DefaultRuntime) {
        this._options = _options;
        this._baseUrl = _baseUrl;
        this._runtime = _runtime;
    }
    /**
     * Configures instance with additional options and baseUrl.
     * Provided configuration used by other objects in a chain
     *
     * @param options Additional options
     * @param baseUrl A string that should form the base part of the url
     */
    configure(options, baseUrl = "") {
        return new SPRest(options, baseUrl);
    }
    /**
     * Global SharePoint configuration options
     *
     * @param config The SharePoint configuration to apply
     */
    setup(config) {
        if (config.pageContext) {
            _setup({
                spfxContext: config,
            }, this._runtime);
        }
        else {
            _setup(config, this._runtime);
        }
    }
    createIsolated(init) {
        return __awaiter(this, void 0, void 0, function* () {
            // merge our defaults
            init = Object.assign({
                baseUrl: "",
                cloneGlobal: true,
                config: {},
                options: {},
            }, init || {});
            const { baseUrl, cloneGlobal, options, config } = init;
            const runtime = cloneGlobal ? new Runtime(DefaultRuntime.export()) : new Runtime();
            runtime.assign(config);
            return new SPRest(options, baseUrl, runtime);
        });
    }
    childConfigHook(callback) {
        return callback({ options: this._options, baseUrl: this._baseUrl, runtime: this._runtime });
    }
}
export const sp = new SPRest();
//# sourceMappingURL=rest.js.map