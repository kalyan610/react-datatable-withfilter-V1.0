import { __awaiter, __decorate } from "tslib";
import { body } from "@pnp/odata";
import { _SharePointQueryableInstance, _SharePointQueryableCollection, spInvokableFactory, deleteable, } from "../sharepointqueryable.js";
import { metadata } from "../utils/metadata.js";
import { defaultPath } from "../decorators.js";
import { spPost } from "../operations.js";
import { tag } from "../telemetry.js";
let _Views = class _Views extends _SharePointQueryableCollection {
    /**
     * Adds a new view to the collection
     *
     * @param title The new views's title
     * @param personalView True if this is a personal view, otherwise false, default = false
     * @param additionalSettings Will be passed as part of the view creation body
     */
    add(title, personalView = false, additionalSettings = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const postBody = body(Object.assign(metadata("SP.View"), {
                "PersonalView": personalView,
                "Title": title,
            }, additionalSettings));
            const data = yield spPost(this.clone(Views, null), postBody);
            return {
                data,
                view: this.getById(data.Id),
            };
        });
    }
    /**
     * Gets a view by guid id
     *
     * @param id The GUID id of the view
     */
    getById(id) {
        return View(this).concat(`('${id}')`);
    }
    /**
     * Gets a view by title (case-sensitive)
     *
     * @param title The case-sensitive title of the view
     */
    getByTitle(title) {
        return View(this, `getByTitle('${title}')`);
    }
};
__decorate([
    tag("vs.add")
], _Views.prototype, "add", null);
_Views = __decorate([
    defaultPath("views")
], _Views);
export { _Views };
export const Views = spInvokableFactory(_Views);
export class _View extends _SharePointQueryableInstance {
    constructor() {
        super(...arguments);
        this.delete = deleteable("vw");
        /**
         * Updates this view intance with the supplied properties
         *
         * @param properties A plain object hash of values to update for the view
         */
        this.update = this._update("SP.View", data => ({ data, view: this }));
    }
    get fields() {
        return ViewFields(this);
    }
    /**
     * Returns the list view as HTML.
     *
     */
    renderAsHtml() {
        return this.clone(View, "renderashtml")();
    }
    /**
     * Sets the view schema
     *
     * @param viewXml The view XML to set
     */
    setViewXml(viewXml) {
        return spPost(this.clone(View, "SetViewXml"), body({ viewXml }));
    }
}
__decorate([
    tag("v.renderAsHtml")
], _View.prototype, "renderAsHtml", null);
__decorate([
    tag("v.setViewXml")
], _View.prototype, "setViewXml", null);
export const View = spInvokableFactory(_View);
let _ViewFields = class _ViewFields extends _SharePointQueryableCollection {
    /**
     * Gets a value that specifies the XML schema that represents the collection.
     */
    getSchemaXml() {
        return this.clone(ViewFields, "schemaxml")();
    }
    /**
     * Adds the field with the specified field internal name or display name to the collection.
     *
     * @param fieldTitleOrInternalName The case-sensitive internal name or display name of the field to add.
     */
    add(fieldTitleOrInternalName) {
        return spPost(this.clone(ViewFields, `addviewfield('${fieldTitleOrInternalName}')`));
    }
    /**
     * Moves the field with the specified field internal name to the specified position in the collection.
     *
     * @param field The case-sensitive internal name of the field to move.
     * @param index The zero-based index of the new position for the field.
     */
    move(field, index) {
        return spPost(this.clone(ViewFields, "moveviewfieldto"), body({ field, index }));
    }
    /**
     * Removes all the fields from the collection.
     */
    removeAll() {
        return spPost(this.clone(ViewFields, "removeallviewfields"));
    }
    /**
     * Removes the field with the specified field internal name from the collection.
     *
     * @param fieldInternalName The case-sensitive internal name of the field to remove from the view.
     */
    remove(fieldInternalName) {
        return spPost(this.clone(ViewFields, `removeviewfield('${fieldInternalName}')`));
    }
};
__decorate([
    tag("vfs.getSchemaXml")
], _ViewFields.prototype, "getSchemaXml", null);
__decorate([
    tag("vfs.add")
], _ViewFields.prototype, "add", null);
__decorate([
    tag("vfs.move")
], _ViewFields.prototype, "move", null);
__decorate([
    tag("vfs.removeAll")
], _ViewFields.prototype, "removeAll", null);
__decorate([
    tag("vfs.remove")
], _ViewFields.prototype, "remove", null);
_ViewFields = __decorate([
    defaultPath("viewfields")
], _ViewFields);
export { _ViewFields };
export const ViewFields = spInvokableFactory(_ViewFields);
export var ViewScope;
(function (ViewScope) {
    ViewScope[ViewScope["DefaultValue"] = 0] = "DefaultValue";
    ViewScope[ViewScope["Recursive"] = 1] = "Recursive";
    ViewScope[ViewScope["RecursiveAll"] = 2] = "RecursiveAll";
    ViewScope[ViewScope["FilesOnly"] = 3] = "FilesOnly";
})(ViewScope || (ViewScope = {}));
//# sourceMappingURL=types.js.map