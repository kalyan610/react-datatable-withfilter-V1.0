import { __awaiter, __decorate } from "tslib";
import { _SharePointQueryableInstance, _SharePointQueryableCollection, spInvokableFactory, } from "../sharepointqueryable";
import { spPost } from "../operations.js";
import { odataUrlFrom } from "../odata.js";
import { extractWebUrl } from "../utils/extractweburl.js";
import { File } from "../files/types.js";
import { tag } from "../telemetry.js";
import { Web } from "../webs/index.js";
import "../items/index.js";
export class _AppCatalog extends _SharePointQueryableCollection {
    constructor(baseUrl, path = "_api/web/tenantappcatalog/AvailableApps") {
        super(extractWebUrl(typeof baseUrl === "string" ? baseUrl : baseUrl.toUrl()), path);
    }
    /**
     * Get details of specific app from the app catalog
     * @param id - Specify the guid of the app
     */
    getAppById(id) {
        return tag.configure(App(this, `getById('${id}')`), "ac.getAppById");
    }
    /**
     * Synchronize a solution to the Microsoft Teams App Catalog
     * @param id - Specify the guid of the app
     * @param useSharePointItemId (optional) - By default this REST call requires the SP Item id of the app, not the app id.
     *                            PnPjs will try to fetch the item id by default, you can still use this parameter to pass your own item id in the first parameter
     */
    syncSolutionToTeams(id, useSharePointItemId = false) {
        return __awaiter(this, void 0, void 0, function* () {
            // This REST call requires that you refer the list item id of the solution in the app catalog site.
            let appId = null;
            const webUrl = extractWebUrl(this.toUrl());
            if (useSharePointItemId) {
                appId = id;
            }
            else {
                const web = Web(webUrl);
                const listId = (yield web.lists.select("Id").filter("EntityTypeName eq 'AppCatalog'")())[0].Id;
                const listItems = yield web.lists.getById(listId).items.filter(`AppProductID eq '${id}'`).top(1)();
                if (listItems && listItems.length > 0) {
                    appId = listItems[0].Id;
                }
                else {
                    throw Error(`Did not find the app with id ${id} in the appcatalog.`);
                }
            }
            const poster = tag.configure(AppCatalog(webUrl, `_api/web/tenantappcatalog/SyncSolutionToTeams(id=${appId})`), "ac.syncSolutionToTeams");
            return yield spPost(poster, {});
        });
    }
    /**
     * Uploads an app package. Not supported for batching
     *
     * @param filename Filename to create.
     * @param content app package data (eg: the .app or .sppkg file).
     * @param shouldOverWrite Should an app with the same name in the same location be overwritten? (default: true)
     * @returns Promise<IAppAddResult>
     */
    add(filename, content, shouldOverWrite = true) {
        return __awaiter(this, void 0, void 0, function* () {
            // you don't add to the availableapps collection
            const adder = tag.configure(AppCatalog(extractWebUrl(this.toUrl()), `_api/web/tenantappcatalog/add(overwrite=${shouldOverWrite},url='${filename}')`), "ac.add");
            const r = yield spPost(adder, {
                body: content, headers: {
                    "binaryStringRequestBody": "true",
                },
            });
            return {
                data: r,
                file: File(odataUrlFrom(r)),
            };
        });
    }
}
export const AppCatalog = spInvokableFactory(_AppCatalog);
export class _App extends _SharePointQueryableInstance {
    /**
     * This method deploys an app on the app catalog. It must be called in the context
     * of the tenant app catalog web or it will fail.
     *
     * @param skipFeatureDeployment Deploy the app to the entire tenant
     */
    deploy(skipFeatureDeployment = false) {
        return this.do(`Deploy(${skipFeatureDeployment})`);
    }
    /**
     * This method retracts a deployed app on the app catalog. It must be called in the context
     * of the tenant app catalog web or it will fail.
     */
    retract() {
        return this.do("Retract");
    }
    /**
     * This method allows an app which is already deployed to be installed on a web
     */
    install() {
        return this.do("Install");
    }
    /**
     * This method allows an app which is already installed to be uninstalled on a web
     * Note: when you use the REST API to uninstall a solution package from the site, it is not relocated to the recycle bin
     */
    uninstall() {
        return this.do("Uninstall");
    }
    /**
     * This method allows an app which is already installed to be upgraded on a web
     */
    upgrade() {
        return this.do("Upgrade");
    }
    /**
     * This method removes an app from the app catalog. It must be called in the context
     * of the tenant app catalog web or it will fail.
     */
    remove() {
        return this.do("Remove");
    }
    do(path) {
        return spPost(this.clone(App, path));
    }
}
__decorate([
    tag("app.deploy")
], _App.prototype, "deploy", null);
__decorate([
    tag("app.retract")
], _App.prototype, "retract", null);
__decorate([
    tag("app.install")
], _App.prototype, "install", null);
__decorate([
    tag("app.uninstall")
], _App.prototype, "uninstall", null);
__decorate([
    tag("app.upgrade")
], _App.prototype, "upgrade", null);
__decorate([
    tag("app.remove")
], _App.prototype, "remove", null);
export const App = spInvokableFactory(_App);
//# sourceMappingURL=types.js.map