import { __awaiter, __decorate } from "tslib";
import { _SharePointQueryableInstance } from "../sharepointqueryable.js";
import { hOP, DefaultRuntime } from "@pnp/common";
import { defaultPath } from "../decorators.js";
import { tag } from "../telemetry.js";
let _Suggest = class _Suggest extends _SharePointQueryableInstance {
    execute(query) {
        return __awaiter(this, void 0, void 0, function* () {
            this.mapQueryToQueryString(query);
            const response = yield this.get();
            const mapper = hOP(response, "suggest") ? (s_1) => response.suggest[s_1].results : (s_2) => response[s_2];
            return {
                PeopleNames: mapper("PeopleNames"),
                PersonalResults: mapper("PersonalResults"),
                Queries: mapper("Queries"),
            };
        });
    }
    mapQueryToQueryString(query) {
        const setProp = (q) => (checkProp) => (sp) => {
            if (hOP(q, checkProp)) {
                this.query.set(sp, q[checkProp].toString());
            }
        };
        this.query.set("querytext", `'${query.querytext}'`);
        const querySetter = setProp(query);
        querySetter("count")("inumberofquerysuggestions");
        querySetter("personalCount")("inumberofresultsuggestions");
        querySetter("preQuery")("fprequerysuggestions");
        querySetter("hitHighlighting")("fhithighlighting");
        querySetter("capitalize")("fcapitalizefirstletters");
        querySetter("culture")("culture");
        querySetter("stemming")("enablestemming");
        querySetter("includePeople")("showpeoplenamesuggestions");
        querySetter("queryRules")("enablequeryrules");
        querySetter("prefixMatch")("fprefixmatchallterms");
    }
};
__decorate([
    tag("su.execute")
], _Suggest.prototype, "execute", null);
_Suggest = __decorate([
    defaultPath("_api/search/suggest")
], _Suggest);
export { _Suggest };
export const Suggest = (baseUrl, options = {}, runtime = DefaultRuntime) => (query) => {
    return (new _Suggest(baseUrl)).configure(options).setRuntime(runtime).execute(query);
};
//# sourceMappingURL=suggest.js.map