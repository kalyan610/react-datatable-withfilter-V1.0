import { hOP } from "@pnp/common";
import { Logger } from "@pnp/logging";
import { extendGlobal } from "./invokable-extensions.js";
extendGlobal([
    (op, target, ...rest) => {
        if (target.__deepTrace) {
            switch (op) {
                case "apply":
                    Logger.write(`${op} ::> ()`, 1 /* Info */);
                    break;
                case "has":
                case "get":
                case "set":
                    Logger.write(`${op} ::> ${rest[0]}`, 1 /* Info */);
                    break;
            }
        }
    },
    {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        get: (target, p, _receiver) => {
            switch (p) {
                case "__enableDeepTrace":
                    return () => {
                        target.__deepTrace = true;
                    };
                case "__disableDeepTrace":
                    return () => {
                        target.__deepTrace = false;
                    };
                case "__data":
                    return target.data;
                case "__unwrap":
                    return () => target;
                case "__json":
                    return () => {
                        const o = {};
                        for (const name in target) {
                            if (hOP(target, name)) {
                                o[name] = target[name];
                            }
                        }
                        return o;
                    };
            }
        },
    }
]);
//# sourceMappingURL=debug.js.map