import { __awaiter, __decorate } from "tslib";
import { _SharePointQueryableInstance, _SharePointQueryableCollection, spInvokableFactory, } from "../sharepointqueryable.js";
import { body, headers } from "@pnp/odata";
import { defaultPath } from "../decorators.js";
import { spPost, spDelete, spPatch } from "../operations.js";
import { tag } from "../telemetry.js";
let _Subscriptions = class _Subscriptions extends _SharePointQueryableCollection {
    /**
    * Returns all the webhook subscriptions or the specified webhook subscription
    *
    * @param subscriptionId The id of a specific webhook subscription to retrieve, omit to retrieve all the webhook subscriptions
    */
    getById(subscriptionId) {
        return tag.configure(Subscription(this).concat(`('${subscriptionId}')`), "subs.getById");
    }
    /**
     * Creates a new webhook subscription
     *
     * @param notificationUrl The url to receive the notifications
     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months)
     * @param clientState A client specific string (optional)
     */
    add(notificationUrl, expirationDate, clientState) {
        return __awaiter(this, void 0, void 0, function* () {
            const postBody = {
                "expirationDateTime": expirationDate,
                "notificationUrl": notificationUrl,
                "resource": this.toUrl(),
            };
            if (clientState) {
                postBody.clientState = clientState;
            }
            const data = yield spPost(this, body(postBody, headers({ "Content-Type": "application/json" })));
            return { data, subscription: this.getById(data.id) };
        });
    }
};
__decorate([
    tag("subs.add")
], _Subscriptions.prototype, "add", null);
_Subscriptions = __decorate([
    defaultPath("subscriptions")
], _Subscriptions);
export { _Subscriptions };
export const Subscriptions = spInvokableFactory(_Subscriptions);
export class _Subscription extends _SharePointQueryableInstance {
    /**
     * Renews this webhook subscription
     *
     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months, optional)
     * @param notificationUrl The url to receive the notifications (optional)
     * @param clientState A client specific string (optional)
     */
    update(expirationDate, notificationUrl, clientState) {
        return __awaiter(this, void 0, void 0, function* () {
            const postBody = {};
            if (expirationDate) {
                postBody.expirationDateTime = expirationDate;
            }
            if (notificationUrl) {
                postBody.notificationUrl = notificationUrl;
            }
            if (clientState) {
                postBody.clientState = clientState;
            }
            const data = yield spPatch(this, body(postBody, headers({ "Content-Type": "application/json" })));
            return { data, subscription: this };
        });
    }
    /**
     * Removes this webhook subscription
     *
     */
    delete() {
        return spDelete(this);
    }
}
__decorate([
    tag("sub.update")
], _Subscription.prototype, "update", null);
__decorate([
    tag("sub.delete")
], _Subscription.prototype, "delete", null);
export const Subscription = spInvokableFactory(_Subscription);
//# sourceMappingURL=types.js.map