import { __awaiter, __decorate } from "tslib";
import { _SharePointQueryableInstance, _SharePointQueryableCollection, spInvokableFactory, } from "../sharepointqueryable.js";
import { SiteUsers } from "../site-users/types.js";
import { assign, hOP } from "@pnp/common";
import { metadata } from "../utils/metadata.js";
import { body } from "@pnp/odata";
import { defaultPath } from "../decorators.js";
import { spPost } from "../operations.js";
import { tag } from "../telemetry.js";
let _SiteGroups = class _SiteGroups extends _SharePointQueryableCollection {
    /**
     * Gets a group from the collection by id
     *
     * @param id The id of the group to retrieve
     */
    getById(id) {
        return tag.configure(SiteGroup(this).concat(`(${id})`), "sgs.getById");
    }
    /**
     * Adds a new group to the site collection
     *
     * @param properties The group properties object of property names and values to be set for the group
     */
    add(properties) {
        return __awaiter(this, void 0, void 0, function* () {
            const postBody = body(assign(metadata("SP.Group"), properties));
            const data = yield spPost(tag.configure(this, "sgs.add"), postBody);
            return {
                data,
                group: this.getById(data.Id),
            };
        });
    }
    /**
     * Gets a group from the collection by name
     *
     * @param groupName The name of the group to retrieve
     */
    getByName(groupName) {
        return tag.configure(SiteGroup(this, `getByName('${groupName}')`), "sgs.getByName");
    }
    /**
     * Removes the group with the specified member id from the collection
     *
     * @param id The id of the group to remove
     */
    removeById(id) {
        return spPost(this.clone(SiteGroups, `removeById('${id}')`));
    }
    /**
     * Removes the cross-site group with the specified name from the collection
     *
     * @param loginName The name of the group to remove
     */
    removeByLoginName(loginName) {
        return spPost(this.clone(SiteGroups, `removeByLoginName('${loginName}')`));
    }
};
__decorate([
    tag("sgs.removeById")
], _SiteGroups.prototype, "removeById", null);
__decorate([
    tag("sgs.removeByLoginName")
], _SiteGroups.prototype, "removeByLoginName", null);
_SiteGroups = __decorate([
    defaultPath("sitegroups")
], _SiteGroups);
export { _SiteGroups };
export const SiteGroups = spInvokableFactory(_SiteGroups);
export class _SiteGroup extends _SharePointQueryableInstance {
    constructor() {
        super(...arguments);
        /**
         * Updates the group with the given property values
         *
         * @param props The group properties object of property names and values to be set for the group
         */
        this.update = this._update("SP.Group", (d, p) => {
            const retGroup = hOP(p, "Title") ? this.getParent(SiteGroup, this.parentUrl, `getByName('${p.Title}')`) : SiteGroup(this);
            return {
                data: d,
                group: retGroup,
            };
        });
    }
    /**
     * Gets the users for this group
     *
     */
    get users() {
        return tag.configure(SiteUsers(this, "users"), "sg.users");
    }
    /**
     * Set the owner of a group using a user id
     * @param userId the id of the user that will be set as the owner of the current group
     */
    setUserAsOwner(userId) {
        return spPost(this.clone(SiteGroup, `SetUserAsOwner(${userId})`));
    }
}
__decorate([
    tag("sg.setUserAsOwner")
], _SiteGroup.prototype, "setUserAsOwner", null);
export const SiteGroup = spInvokableFactory(_SiteGroup);
//# sourceMappingURL=types.js.map