import { __awaiter, __decorate } from "tslib";
import { defaultPath } from "../decorators.js";
import { spPost } from "../operations.js";
import { _SharePointQueryableInstance, _SharePointQueryableCollection, spInvokableFactory, deleteableWithETag, } from "../sharepointqueryable.js";
import { TextParser, BlobParser, JSONParser, BufferParser, headers } from "@pnp/odata";
import { tag } from "../telemetry.js";
let _Attachments = class _Attachments extends _SharePointQueryableCollection {
    /**
    * Gets a Attachment File by filename
    *
    * @param name The name of the file, including extension.
    */
    getByName(name) {
        const f = tag.configure(Attachment(this), "ats.getByName");
        f.concat(`('${name}')`);
        return f;
    }
    /**
     * Adds a new attachment to the collection. Not supported for batching.
     *
     * @param name The name of the file, including extension.
     * @param content The Base64 file content.
     */
    add(name, content) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield spPost(this.clone(Attachments, `add(FileName='${name}')`, false), { body: content });
            return {
                data: response,
                file: this.getByName(name),
            };
        });
    }
    /**
     * Adds multiple new attachment to the collection. Not supported for batching.
     *
     * @param files The collection of files to add
     */
    addMultiple(files) {
        return __awaiter(this, void 0, void 0, function* () {
            for (let i = 0; i < files.length; i++) {
                yield this.add(files[i].name, files[i].content);
            }
        });
    }
    /**
     * Delete multiple attachments from the collection. Not supported for batching.
     *
     * @param files The collection of files to delete
     */
    deleteMultiple(...files) {
        return __awaiter(this, void 0, void 0, function* () {
            for (let i = 0; i < files.length; i++) {
                yield this.getByName(files[i]).delete();
            }
        });
    }
    /**
     * Delete multiple attachments from the collection and send to recycle bin. Not supported for batching.
     *
     * @param files The collection of files to be deleted and sent to recycle bin
     */
    recycleMultiple(...files) {
        return __awaiter(this, void 0, void 0, function* () {
            for (let i = 0; i < files.length; i++) {
                yield this.getByName(files[i]).recycle();
            }
        });
    }
};
__decorate([
    tag("ats.add")
], _Attachments.prototype, "add", null);
__decorate([
    tag("ats.addMultiple")
], _Attachments.prototype, "addMultiple", null);
__decorate([
    tag("ats.deleteMultiple")
], _Attachments.prototype, "deleteMultiple", null);
__decorate([
    tag("ats.recycleMultiple")
], _Attachments.prototype, "recycleMultiple", null);
_Attachments = __decorate([
    defaultPath("AttachmentFiles")
], _Attachments);
export { _Attachments };
export const Attachments = spInvokableFactory(_Attachments);
export class _Attachment extends _SharePointQueryableInstance {
    constructor() {
        super(...arguments);
        this.delete = deleteableWithETag("at");
    }
    /**
     * Gets the contents of the file as text
     *
     */
    getText() {
        return this.getParsed(new TextParser());
    }
    /**
     * Gets the contents of the file as a blob, does not work in Node.js
     *
     */
    getBlob() {
        return this.getParsed(new BlobParser());
    }
    /**
     * Gets the contents of a file as an ArrayBuffer, works in Node.js
     */
    getBuffer() {
        return this.getParsed(new BufferParser());
    }
    /**
     * Gets the contents of a file as an ArrayBuffer, works in Node.js
     */
    getJSON() {
        return this.getParsed(new JSONParser());
    }
    /**
     * Sets the content of a file. Not supported for batching
     *
     * @param content The value to set for the file contents
     */
    setContent(content) {
        return __awaiter(this, void 0, void 0, function* () {
            yield spPost(this.clone(Attachment, "$value", false), headers({ "X-HTTP-Method": "PUT" }, {
                body: content,
            }));
            return Attachment(this);
        });
    }
    /**
     * Delete this attachment file and send it to recycle bin
     *
     * @param eTag Value used in the IF-Match header, by default "*"
     */
    recycle(eTag = "*") {
        return spPost(this.clone(Attachment, "recycleObject"), headers({
            "IF-Match": eTag,
            "X-HTTP-Method": "DELETE",
        }));
    }
    getParsed(parser) {
        return this.clone(Attachment, "$value", false).usingParser(parser)();
    }
}
__decorate([
    tag("at.getText")
], _Attachment.prototype, "getText", null);
__decorate([
    tag("at.getBlob")
], _Attachment.prototype, "getBlob", null);
__decorate([
    tag("at.getBuffer")
], _Attachment.prototype, "getBuffer", null);
__decorate([
    tag("at.getJSON")
], _Attachment.prototype, "getJSON", null);
__decorate([
    tag("at.setContent")
], _Attachment.prototype, "setContent", null);
__decorate([
    tag("at.recycle")
], _Attachment.prototype, "recycle", null);
export const Attachment = spInvokableFactory(_Attachment);
//# sourceMappingURL=types.js.map