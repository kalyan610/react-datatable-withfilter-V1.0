import { __awaiter, __decorate } from "tslib";
import { _SharePointQueryableInstance, _SharePointQueryableCollection, spInvokableFactory, deleteable, } from "../sharepointqueryable.js";
import { assign } from "@pnp/common";
import { body } from "@pnp/odata";
import { defaultPath } from "../decorators.js";
import { spPost } from "../operations.js";
import { tag } from "../telemetry.js";
import { metadata } from "../utils/metadata.js";
let _UserCustomActions = class _UserCustomActions extends _SharePointQueryableCollection {
    /**
     * Returns the user custom action with the specified id
     *
     * @param id The GUID id of the user custom action to retrieve
     */
    getById(id) {
        return tag.configure(UserCustomAction(this).concat(`('${id}')`), "ucas.getById");
    }
    /**
     * Creates a user custom action
     *
     * @param properties The information object of property names and values which define the new user custom action
     */
    add(properties) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield spPost(this, body(assign(metadata("SP.UserCustomAction"), properties)));
            return {
                action: this.getById(data.Id),
                data,
            };
        });
    }
    /**
     * Deletes all user custom actions in the collection
     */
    clear() {
        return spPost(this.clone(UserCustomActions, "clear"));
    }
};
__decorate([
    tag("ucas.add")
], _UserCustomActions.prototype, "add", null);
__decorate([
    tag("ucas.clear")
], _UserCustomActions.prototype, "clear", null);
_UserCustomActions = __decorate([
    defaultPath("usercustomactions")
], _UserCustomActions);
export { _UserCustomActions };
export const UserCustomActions = spInvokableFactory(_UserCustomActions);
export class _UserCustomAction extends _SharePointQueryableInstance {
    constructor() {
        super(...arguments);
        this.delete = deleteable("uca");
        /**
        * Updates this user custom action with the supplied properties
        *
        * @param properties An information object of property names and values to update for this user custom action
        */
        this.update = this._update("SP.UserCustomAction", (data) => ({ data, action: this }));
    }
}
export const UserCustomAction = spInvokableFactory(_UserCustomAction);
export var UserCustomActionRegistrationType;
(function (UserCustomActionRegistrationType) {
    UserCustomActionRegistrationType[UserCustomActionRegistrationType["None"] = 0] = "None";
    UserCustomActionRegistrationType[UserCustomActionRegistrationType["List"] = 1] = "List";
    UserCustomActionRegistrationType[UserCustomActionRegistrationType["ContentType"] = 2] = "ContentType";
    UserCustomActionRegistrationType[UserCustomActionRegistrationType["ProgId"] = 3] = "ProgId";
    UserCustomActionRegistrationType[UserCustomActionRegistrationType["FileType"] = 4] = "FileType";
})(UserCustomActionRegistrationType || (UserCustomActionRegistrationType = {}));
export var UserCustomActionScope;
(function (UserCustomActionScope) {
    UserCustomActionScope[UserCustomActionScope["Unknown"] = 0] = "Unknown";
    UserCustomActionScope[UserCustomActionScope["Site"] = 2] = "Site";
    UserCustomActionScope[UserCustomActionScope["Web"] = 3] = "Web";
    UserCustomActionScope[UserCustomActionScope["List"] = 4] = "List";
})(UserCustomActionScope || (UserCustomActionScope = {}));
//# sourceMappingURL=types.js.map