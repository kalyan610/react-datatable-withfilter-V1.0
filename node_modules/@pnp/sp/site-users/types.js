import { __awaiter, __decorate } from "tslib";
import { _SharePointQueryableInstance, _SharePointQueryableCollection, spInvokableFactory, deleteable, } from "../sharepointqueryable.js";
import { SiteGroups } from "../site-groups/types.js";
import { assign } from "@pnp/common";
import { metadata } from "../utils/metadata.js";
import { body } from "@pnp/odata";
import { defaultPath } from "../decorators.js";
import { spPost } from "../operations.js";
import { tag } from "../telemetry.js";
let _SiteUsers = class _SiteUsers extends _SharePointQueryableCollection {
    /**
     * Gets a user from the collection by id
     *
     * @param id The id of the user to retrieve
     */
    getById(id) {
        return tag.configure(SiteUser(this, `getById(${id})`), "sus.getById");
    }
    /**
     * Gets a user from the collection by email
     *
     * @param email The email address of the user to retrieve
     */
    getByEmail(email) {
        return tag.configure(SiteUser(this, `getByEmail('${email}')`), "sus.getByEmail");
    }
    /**
     * Gets a user from the collection by login name
     *
     * @param loginName The login name of the user to retrieve
     */
    getByLoginName(loginName) {
        return tag.configure(SiteUser(this).concat(`('!@v::${encodeURIComponent(loginName)}')`), "sus.getByLoginName");
    }
    /**
     * Removes a user from the collection by id
     *
     * @param id The id of the user to remove
     */
    removeById(id) {
        return spPost(this.clone(SiteUsers, `removeById(${id})`));
    }
    /**
     * Removes a user from the collection by login name
     *
     * @param loginName The login name of the user to remove
     */
    removeByLoginName(loginName) {
        const o = this.clone(SiteUsers, "removeByLoginName(@v)");
        o.query.set("@v", `'${encodeURIComponent(loginName)}'`);
        return spPost(o);
    }
    /**
     * Adds a user to a site collection
     *
     * @param loginName The login name of the user to add  to a site collection
     *
     */
    add(loginName) {
        return __awaiter(this, void 0, void 0, function* () {
            yield spPost(this, body(assign(metadata("SP.User"), { LoginName: loginName })));
            return this.getByLoginName(loginName);
        });
    }
};
__decorate([
    tag("sus.remId")
], _SiteUsers.prototype, "removeById", null);
__decorate([
    tag("sus.remLoginName")
], _SiteUsers.prototype, "removeByLoginName", null);
__decorate([
    tag("sus.add")
], _SiteUsers.prototype, "add", null);
_SiteUsers = __decorate([
    defaultPath("siteusers")
], _SiteUsers);
export { _SiteUsers };
export const SiteUsers = spInvokableFactory(_SiteUsers);
/**
 * Describes a single user
 *
 */
export class _SiteUser extends _SharePointQueryableInstance {
    constructor() {
        super(...arguments);
        this.delete = deleteable("su");
        /**
        * Updates this user instance with the supplied properties
        *
        * @param properties A plain object of property names and values to update for the user
        */
        this.update = this._update("SP.User", data => ({ data, user: this }));
    }
    /**
     * Gets the groups for this user
     *
     */
    get groups() {
        return tag.configure(SiteGroups(this, "groups"), "su.groups");
    }
}
export const SiteUser = spInvokableFactory(_SiteUser);
//# sourceMappingURL=types.js.map