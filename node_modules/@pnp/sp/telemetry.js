import { __awaiter } from "tslib";
import { stringIsNullOrEmpty } from "@pnp/common";
import { headers } from "@pnp/odata";
/**
 * Includes this method name in the X-ClientService-ClientTag used to record pnpjs usage
 *
 * @param name Method name, displayed in the
 */
export function tag(name) {
    return function (target, key, descriptor) {
        if (descriptor === undefined) {
            descriptor = Object.getOwnPropertyDescriptor(target, key);
        }
        const originalMethod = descriptor.value;
        descriptor.value = function (...args) {
            return __awaiter(this, void 0, void 0, function* () {
                this.configure(headers({ "X-PnPjs-Tracking": name }));
                return originalMethod.apply(this, args);
            });
        };
        return descriptor;
    };
}
tag.getClientTag = (h, deleteFromCollection = true) => {
    if (h.has("X-PnPjs-Tracking")) {
        const methodName = h.get("X-PnPjs-Tracking");
        if (deleteFromCollection) {
            h.delete("X-PnPjs-Tracking");
        }
        if (!stringIsNullOrEmpty(methodName)) {
            return methodName;
        }
    }
    return "";
};
tag.configure = (o, name) => {
    return o.configure(headers({ "X-PnPjs-Tracking": name }));
};
tag.isTagged = (o) => {
    return o.data.options.headers && o.data.options.headers["X-PnPjs-Tracking"];
};
//# sourceMappingURL=telemetry.js.map