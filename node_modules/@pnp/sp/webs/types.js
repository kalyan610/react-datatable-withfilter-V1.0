import { __awaiter, __decorate } from "tslib";
import { assign } from "@pnp/common";
import { body, headers } from "@pnp/odata";
import { _SharePointQueryableInstance, SharePointQueryableCollection, _SharePointQueryableCollection, spInvokableFactory, SharePointQueryableInstance, deleteable, } from "../sharepointqueryable.js";
import { defaultPath } from "../decorators.js";
import { odataUrlFrom } from "../odata.js";
import { SPBatch } from "../batch.js";
import { metadata } from "../utils/metadata.js";
import { Site } from "../sites/index.js";
import { spPost, spGet } from "../operations.js";
import { escapeQueryStrValue } from "../utils/escapeQueryStrValue.js";
import { tag } from "../telemetry.js";
let _Webs = class _Webs extends _SharePointQueryableCollection {
    /**
     * Adds a new web to the collection
     *
     * @param title The new web's title
     * @param url The new web's relative url
     * @param description The new web's description
     * @param template The new web's template internal name (default = STS)
     * @param language The locale id that specifies the new web's language (default = 1033 [English, US])
     * @param inheritPermissions When true, permissions will be inherited from the new web's parent (default = true)
     */
    add(title, url, description = "", template = "STS", language = 1033, inheritPermissions = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const postBody = body({
                "parameters": assign(metadata("SP.WebCreationInformation"), {
                    Description: description,
                    Language: language,
                    Title: title,
                    Url: url,
                    UseSamePermissionsAsParentSite: inheritPermissions,
                    WebTemplate: template,
                }),
            });
            const data = yield spPost(this.clone(Webs, "add"), postBody);
            return {
                data,
                web: Web(odataUrlFrom(data).replace(/_api\/web\/?/i, "")),
            };
        });
    }
};
__decorate([
    tag("ws.add")
], _Webs.prototype, "add", null);
_Webs = __decorate([
    defaultPath("webs")
], _Webs);
export { _Webs };
export const Webs = spInvokableFactory(_Webs);
/**
 * Describes a web
 *
 */
let _Web = class _Web extends _SharePointQueryableInstance {
    constructor() {
        super(...arguments);
        this.delete = deleteable("w");
    }
    /**
     * Gets this web's subwebs
     *
     */
    get webs() {
        return Webs(this);
    }
    /**
     * Allows access to the web's all properties collection
     */
    get allProperties() {
        return tag.configure(this.clone(SharePointQueryableInstance, "allproperties"), "w.allprops");
    }
    /**
     * Gets a collection of WebInfos for this web's subwebs
     *
     */
    get webinfos() {
        return tag.configure(SharePointQueryableCollection(this, "webinfos"), "w.webinfos");
    }
    /**
     * Gets this web's parent web and data
     *
     */
    getParentWeb() {
        return __awaiter(this, void 0, void 0, function* () {
            const { ParentWeb } = yield spGet(this.select("ParentWeb/Id").expand("ParentWeb"));
            return (ParentWeb === null || ParentWeb === void 0 ? void 0 : ParentWeb.Id) ? Site(this.parentUrl).openWebById(ParentWeb.Id) : null;
        });
    }
    /**
     * Updates this web instance with the supplied properties
     *
     * @param properties A plain object hash of values to update for the web
     */
    update(properties) {
        return __awaiter(this, void 0, void 0, function* () {
            const postBody = body(assign(metadata("SP.Web"), properties), headers({ "X-HTTP-Method": "MERGE" }));
            const data = yield spPost(this, postBody);
            return { data, web: this };
        });
    }
    /**
     * Applies the theme specified by the contents of each of the files specified in the arguments to the site
     *
     * @param colorPaletteUrl The server-relative URL of the color palette file
     * @param fontSchemeUrl The server-relative URL of the font scheme
     * @param backgroundImageUrl The server-relative URL of the background image
     * @param shareGenerated When true, the generated theme files are stored in the root site. When false, they are stored in this web
     */
    applyTheme(colorPaletteUrl, fontSchemeUrl, backgroundImageUrl, shareGenerated) {
        const postBody = body({
            backgroundImageUrl,
            colorPaletteUrl,
            fontSchemeUrl,
            shareGenerated,
        });
        return spPost(this.clone(Web, "applytheme"), postBody);
    }
    /**
     * Applies the specified site definition or site template to the Web site that has no template applied to it
     *
     * @param template Name of the site definition or the name of the site template
     */
    applyWebTemplate(template) {
        const q = this.clone(Web, "applywebtemplate");
        q.concat(`(webTemplate='${escapeQueryStrValue(template)}')`);
        return spPost(q);
    }
    /**
         * Returns the collection of changes from the change log that have occurred within the list, based on the specified query
         *
         * @param query The change query
         */
    getChanges(query) {
        const postBody = body({ "query": assign(metadata("SP.ChangeQuery"), query) });
        return spPost(this.clone(Web, "getchanges"), postBody);
    }
    /**
     * Returns the name of the image file for the icon that is used to represent the specified file
     *
     * @param filename The file name. If this parameter is empty, the server returns an empty string
     * @param size The size of the icon: 16x16 pixels = 0, 32x32 pixels = 1 (default = 0)
     * @param progId The ProgID of the application that was used to create the file, in the form OLEServerName.ObjectName
     */
    mapToIcon(filename, size = 0, progId = "") {
        return spGet(this.clone(Web, `maptoicon(filename='${escapeQueryStrValue(filename)}', progid='${escapeQueryStrValue(progId)}', size=${size})`));
    }
    /**
     * Returns the tenant property corresponding to the specified key in the app catalog site
     *
     * @param key Id of storage entity to be set
     */
    getStorageEntity(key) {
        return spGet(this.clone(Web, `getStorageEntity('${escapeQueryStrValue(key)}')`));
    }
    /**
     * This will set the storage entity identified by the given key (MUST be called in the context of the app catalog)
     *
     * @param key Id of storage entity to be set
     * @param value Value of storage entity to be set
     * @param description Description of storage entity to be set
     * @param comments Comments of storage entity to be set
     */
    setStorageEntity(key, value, description = "", comments = "") {
        return spPost(this.clone(Web, "setStorageEntity"), body({
            comments,
            description,
            key,
            value,
        }));
    }
    /**
     * This will remove the storage entity identified by the given key
     *
     * @param key Id of storage entity to be removed
     */
    removeStorageEntity(key) {
        return spPost(this.clone(Web, `removeStorageEntity('${escapeQueryStrValue(key)}')`));
    }
    /**
    * Returns a collection of objects that contain metadata about subsites of the current site in which the current user is a member.
    *
    * @param nWebTemplateFilter Specifies the site definition (default = -1)
    * @param nConfigurationFilter A 16-bit integer that specifies the identifier of a configuration (default = -1)
    */
    getSubwebsFilteredForCurrentUser(nWebTemplateFilter = -1, nConfigurationFilter = -1) {
        const o = this.clone(SharePointQueryableCollection, `getSubwebsFilteredForCurrentUser(nWebTemplateFilter=${nWebTemplateFilter},nConfigurationFilter=${nConfigurationFilter})`);
        return tag.configure(o, "w.getSubwebsFilteredForCurrentUser");
    }
    /**
     * Creates a new batch for requests within the context of this web
     *
     */
    createBatch() {
        return new SPBatch(this.parentUrl, this.getRuntime());
    }
    /**
     * Returns a collection of site templates available for the site
     *
     * @param language The locale id of the site templates to retrieve (default = 1033 [English, US])
     * @param includeCrossLanguage When true, includes language-neutral site templates; otherwise false (default = true)
     */
    availableWebTemplates(language = 1033, includeCrossLanugage = true) {
        const path = `getavailablewebtemplates(lcid=${language}, doincludecrosslanguage=${includeCrossLanugage})`;
        return tag.configure(SharePointQueryableCollection(this, path), "w.availableWebTemplates");
    }
};
__decorate([
    tag("w.getParentWeb")
], _Web.prototype, "getParentWeb", null);
__decorate([
    tag("w.update")
], _Web.prototype, "update", null);
__decorate([
    tag("w.applyTheme")
], _Web.prototype, "applyTheme", null);
__decorate([
    tag("w.applyWebTemplate")
], _Web.prototype, "applyWebTemplate", null);
__decorate([
    tag("w.getChanges")
], _Web.prototype, "getChanges", null);
__decorate([
    tag("w.mapToIcon")
], _Web.prototype, "mapToIcon", null);
__decorate([
    tag("w.getStorageEntity")
], _Web.prototype, "getStorageEntity", null);
__decorate([
    tag("w.setStorageEntity")
], _Web.prototype, "setStorageEntity", null);
__decorate([
    tag("w.removeStorageEntity")
], _Web.prototype, "removeStorageEntity", null);
_Web = __decorate([
    defaultPath("_api/web")
], _Web);
export { _Web };
export const Web = spInvokableFactory(_Web);
//# sourceMappingURL=types.js.map