import { __awaiter, __decorate } from "tslib";
import { dateAdd, hOP } from "@pnp/common";
import { _SharePointQueryableInstance, SharePointQueryableCollection, _SharePointQueryableCollection, spInvokableFactory, } from "../sharepointqueryable.js";
import { defaultPath } from "../decorators.js";
import { spODataEntity } from "../odata.js";
import { spPost } from "../operations.js";
import { tag } from "../telemetry.js";
let _RegionalSettings = class _RegionalSettings extends _SharePointQueryableInstance {
    /**
     * Gets the collection of languages used in a server farm.
     * ** Please use getInstalledLanguages instead of this method **
     */
    get installedLanguages() {
        console.warn("Deprecated: RegionalSettings.installedLanguages is deprecated, please use RegionalSettings.getInstalledLanguages");
        return tag.configure(SharePointQueryableCollection(this, "installedlanguages"), "rs.installedLanguages");
    }
    /**
     * Gets time zone
     */
    get timeZone() {
        return tag.configure(TimeZone(this), "rs.tz");
    }
    /**
     * Gets time zones
     */
    get timeZones() {
        return tag.configure(TimeZones(this), "rs.tzs");
    }
    /**
     * Gets the collection of languages used in a server farm.
     */
    getInstalledLanguages() {
        return __awaiter(this, void 0, void 0, function* () {
            const results = yield tag.configure(SharePointQueryableCollection(this, "installedlanguages"), "rs.getInstalledLanguages")();
            return results.Items;
        });
    }
};
_RegionalSettings = __decorate([
    defaultPath("regionalsettings")
], _RegionalSettings);
export { _RegionalSettings };
export const RegionalSettings = spInvokableFactory(_RegionalSettings);
let _TimeZone = class _TimeZone extends _SharePointQueryableInstance {
    /**
     * Gets an Local Time by UTC Time
     *
     * @param utcTime UTC Time as Date or ISO String
     */
    utcToLocalTime(utcTime) {
        return __awaiter(this, void 0, void 0, function* () {
            let dateIsoString;
            if (typeof utcTime === "string") {
                dateIsoString = utcTime;
            }
            else {
                dateIsoString = utcTime.toISOString();
            }
            const res = yield spPost(this.clone(TimeZone, `utctolocaltime('${dateIsoString}')`));
            return hOP(res, "UTCToLocalTime") ? res.UTCToLocalTime : res;
        });
    }
    /**
     * Gets an UTC Time by Local Time
     *
     * @param localTime Local Time as Date or ISO String
     */
    localTimeToUTC(localTime) {
        return __awaiter(this, void 0, void 0, function* () {
            let dateIsoString;
            if (typeof localTime === "string") {
                dateIsoString = localTime;
            }
            else {
                dateIsoString = dateAdd(localTime, "minute", localTime.getTimezoneOffset() * -1).toISOString();
            }
            const res = yield spPost(this.clone(TimeZone, `localtimetoutc('${dateIsoString}')`));
            return hOP(res, "LocalTimeToUTC") ? res.LocalTimeToUTC : res;
        });
    }
};
__decorate([
    tag("tz.utcToLocalTime")
], _TimeZone.prototype, "utcToLocalTime", null);
__decorate([
    tag("tz.localTimeToUTC")
], _TimeZone.prototype, "localTimeToUTC", null);
_TimeZone = __decorate([
    defaultPath("timezone")
], _TimeZone);
export { _TimeZone };
export const TimeZone = spInvokableFactory(_TimeZone);
let _TimeZones = class _TimeZones extends _SharePointQueryableCollection {
    /**
     * Gets an TimeZone by id (see: https://msdn.microsoft.com/en-us/library/office/jj247008.aspx)
     *
     * @param id The integer id of the timezone to retrieve
     */
    getById(id) {
        // do the post and merge the result into a TimeZone instance so the data and methods are available
        return spPost(this.clone(TimeZones, `GetById(${id})`).usingParser(spODataEntity(TimeZone)));
    }
};
__decorate([
    tag("tzs.getById")
], _TimeZones.prototype, "getById", null);
_TimeZones = __decorate([
    defaultPath("timezones")
], _TimeZones);
export { _TimeZones };
export const TimeZones = spInvokableFactory(_TimeZones);
//# sourceMappingURL=types.js.map