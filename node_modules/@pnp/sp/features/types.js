import { __awaiter, __decorate } from "tslib";
import { body } from "@pnp/odata";
import { _SharePointQueryableInstance, _SharePointQueryableCollection, spInvokableFactory, } from "../sharepointqueryable.js";
import { defaultPath } from "../decorators.js";
import { spPost } from "../operations.js";
import { tag } from "../telemetry.js";
let _Features = class _Features extends _SharePointQueryableCollection {
    /**
     * Adds (activates) the specified feature
     *
     * @param id The Id of the feature (GUID)
     * @param force If true the feature activation will be forced
     */
    add(id, force = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield spPost(this.clone(Features, "add"), body({
                featdefScope: 0,
                featureId: id,
                force: force,
            }));
            return {
                data: data,
                feature: this.getById(id),
            };
        });
    }
    /**
     * Gets a feature from the collection with the specified guid
     *
     * @param id The Id of the feature (GUID)
     */
    getById(id) {
        const feature = Feature(this);
        feature.concat(`('${id}')`);
        return tag.configure(feature, "fes.getById");
    }
    /**
     * Removes (deactivates) a feature from the collection
     *
     * @param id The Id of the feature (GUID)
     * @param force If true the feature deactivation will be forced
     */
    remove(id, force = false) {
        return spPost(this.clone(Features, "remove"), body({
            featureId: id,
            force: force,
        }));
    }
};
__decorate([
    tag("fes.add")
], _Features.prototype, "add", null);
__decorate([
    tag("fes.remove")
], _Features.prototype, "remove", null);
_Features = __decorate([
    defaultPath("features")
], _Features);
export { _Features };
export const Features = spInvokableFactory(_Features);
export class _Feature extends _SharePointQueryableInstance {
    /**
     * Removes (deactivates) the feature
     *
     * @param force If true the feature deactivation will be forced
     */
    deactivate(force = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeDependency = this.addBatchDependency();
            const feature = yield Feature(this).select("DefinitionId")();
            const promise = this.getParent(Features, this.parentUrl, "", this.batch).remove(feature.DefinitionId, force);
            removeDependency();
            return promise;
        });
    }
}
__decorate([
    tag("fe.deactivate")
], _Feature.prototype, "deactivate", null);
export const Feature = spInvokableFactory(_Feature);
//# sourceMappingURL=types.js.map