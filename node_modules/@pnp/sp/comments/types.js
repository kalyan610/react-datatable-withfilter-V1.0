import { __awaiter, __decorate } from "tslib";
import { defaultPath } from "../decorators.js";
import { _SharePointQueryableInstance, _SharePointQueryableCollection, spInvokableFactory, } from "../sharepointqueryable.js";
import { assign } from "@pnp/common";
import { odataUrlFrom } from "../odata.js";
import { metadata } from "../utils/metadata.js";
import { body } from "@pnp/odata";
import { spPost } from "../operations.js";
import { tag } from "../telemetry.js";
let _Comments = class _Comments extends _SharePointQueryableCollection {
    /**
     * Adds a new comment to this collection
     *
     * @param info Comment information to add
     */
    add(info) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof info === "string") {
                info = { text: info };
            }
            const postBody = body(assign(metadata("Microsoft.SharePoint.Comments.comment"), info));
            const d = yield spPost(this.clone(Comments, null), postBody);
            return assign(this.getById(d.id), d);
        });
    }
    /**
     * Gets a comment by id
     *
     * @param id Id of the comment to load
     */
    getById(id) {
        return tag.configure(Comment(this).concat(`(${id})`), "coms.getById");
    }
    /**
     * Deletes all the comments in this collection
     */
    clear() {
        return spPost(tag.configure(this.clone(Comments, "DeleteAll"), "coms.clear"));
    }
};
__decorate([
    tag("coms.add")
], _Comments.prototype, "add", null);
_Comments = __decorate([
    defaultPath("comments")
], _Comments);
export { _Comments };
export const Comments = spInvokableFactory(_Comments);
export class _Comment extends _SharePointQueryableInstance {
    /**
     * A comment's replies
     */
    get replies() {
        return tag.configure(Replies(this), "com.replies");
    }
    /**
     * Likes the comment as the current user
     */
    like() {
        return spPost(this.clone(Comment, "Like"));
    }
    /**
     * Unlikes the comment as the current user
     */
    unlike() {
        return spPost(this.clone(Comment, "Unlike"));
    }
    /**
     * Deletes this comment
     */
    delete() {
        return spPost(this.clone(Comment, "DeleteComment"));
    }
}
__decorate([
    tag("com.like")
], _Comment.prototype, "like", null);
__decorate([
    tag("com.unlike")
], _Comment.prototype, "unlike", null);
__decorate([
    tag("com.delete")
], _Comment.prototype, "delete", null);
export const Comment = spInvokableFactory(_Comment);
let _Replies = class _Replies extends _SharePointQueryableCollection {
    /**
     * Adds a new reply to this collection
     *
     * @param info Comment information to add
     */
    add(info) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof info === "string") {
                info = { text: info };
            }
            const postBody = body(assign(metadata("Microsoft.SharePoint.Comments.comment"), info));
            const d = yield spPost(this.clone(Replies, null), postBody);
            return assign(Comment(odataUrlFrom(d)), d);
        });
    }
};
__decorate([
    tag("reps.add")
], _Replies.prototype, "add", null);
_Replies = __decorate([
    defaultPath("replies")
], _Replies);
export { _Replies };
export const Replies = spInvokableFactory(_Replies);
//# sourceMappingURL=types.js.map