import { __awaiter } from "tslib";
import { combine, isUrlAbsolute, DefaultRuntime, stringIsNullOrEmpty, hOP, safeGlobal } from "@pnp/common";
/**
 * Ensures that a given url is absolute for the current web based on context
 *
 * @param candidateUrl The url to make absolute
 *
 */
export function toAbsoluteUrl(candidateUrl, runtime = DefaultRuntime) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        if (isUrlAbsolute(candidateUrl)) {
            // if we are already absolute, then just return the url
            return candidateUrl;
        }
        const baseUrl = (_a = runtime.get("sp")) === null || _a === void 0 ? void 0 : _a.baseUrl;
        const fetchClientFactory = (_b = runtime.get("sp")) === null || _b === void 0 ? void 0 : _b.fetchClientFactory;
        if (!stringIsNullOrEmpty(baseUrl)) {
            // base url specified either with baseUrl of spfxContext config property
            return combine(baseUrl, candidateUrl);
        }
        // use a passed context if provided, if not see if we get one from the current runtime
        const context = runtime.get("spfxContext");
        if (context) {
            return combine(context.pageContext.web.absoluteUrl, candidateUrl);
        }
        // to make the existing node client work in a backwards compatible way we do the following (hacky thing)
        // get the client
        // see if it has a siteUrl property
        // use that to absolute the url
        if (fetchClientFactory) {
            const tempClient = fetchClientFactory();
            if (hOP(tempClient, "siteUrl")) {
                return combine(tempClient.siteUrl, candidateUrl);
            }
        }
        if (safeGlobal._spPageContextInfo !== undefined) {
            // operating in classic pages
            if (hOP(safeGlobal._spPageContextInfo, "webAbsoluteUrl")) {
                return combine(safeGlobal._spPageContextInfo.webAbsoluteUrl, candidateUrl);
            }
            else if (hOP(safeGlobal._spPageContextInfo, "webServerRelativeUrl")) {
                return combine(safeGlobal._spPageContextInfo.webServerRelativeUrl, candidateUrl);
            }
        }
        // does window.location exist and have a certain path part in it?
        if (safeGlobal.location !== undefined) {
            const location = safeGlobal.location.toString().toLowerCase();
            ["/_layouts/", "/siteassets/", "/sitepages/"].forEach((s) => {
                const index = location.indexOf(s);
                if (index > 0) {
                    return combine(location.substr(0, index), candidateUrl);
                }
            });
        }
        return candidateUrl;
    });
}
//# sourceMappingURL=toabsoluteurl.js.map