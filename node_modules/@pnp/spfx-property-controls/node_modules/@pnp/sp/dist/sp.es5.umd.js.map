{"version":3,"file":"sp.es5.umd.js","sources":["../../../../node_modules/tslib/tslib.es6.js","../../../../packages/sp/src/utils/extractweburl.ts","../../../../packages/sp/src/odata.ts","../../../../packages/sp/src/config/splibconfig.ts","../../../../packages/sp/src/net/digestcache.ts","../../../../packages/sp/src/net/sphttpclient.ts","../../../../node_modules/rollup-plugin-node-globals/src/global.js","../../../../packages/sp/src/utils/toabsoluteurl.ts","../../../../packages/sp/src/utils/metadata.ts","../../../../packages/sp/src/sharepointqueryable.ts","../../../../packages/sp/src/siteusers.ts","../../../../packages/sp/src/sitegroups.ts","../../../../packages/sp/src/roles.ts","../../../../packages/sp/src/types.ts","../../../../packages/sp/src/sharepointqueryablesecurable.ts","../../../../packages/sp/src/sharepointqueryableshareable.ts","../../../../packages/sp/src/webparts.ts","../../../../packages/sp/src/folders.ts","../../../../packages/sp/src/contenttypes.ts","../../../../packages/sp/src/attachmentfiles.ts","../../../../packages/sp/src/views.ts","../../../../packages/sp/src/fields.ts","../../../../packages/sp/src/forms.ts","../../../../packages/sp/src/subscriptions.ts","../../../../packages/sp/src/usercustomactions.ts","../../../../packages/sp/src/lists.ts","../../../../packages/sp/src/comments.ts","../../../../packages/sp/src/items.ts","../../../../packages/sp/src/files.ts","../../../../packages/sp/src/appcatalog.ts","../../../../packages/sp/src/batch.ts","../../../../packages/sp/src/features.ts","../../../../packages/sp/src/site.ts","../../../../packages/sp/src/navigation.ts","../../../../packages/sp/src/relateditems.ts","../../../../packages/sp/src/regionalsettings.ts","../../../../packages/sp/src/sitedesigns.ts","../../../../packages/sp/src/sitescripts.ts","../../../../packages/sp/src/webs.ts","../../../../packages/sp/src/clientsidepages.ts","../../../../packages/sp/src/search.ts","../../../../packages/sp/src/searchsuggest.ts","../../../../packages/sp/src/userprofiles.ts","../../../../packages/sp/src/social.ts","../../../../packages/sp/src/utilities.ts","../../../../packages/sp/src/hubsites.ts","../../../../packages/sp/src/rest.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { stringIsNullOrEmpty } from \"@pnp/common\";\n\nexport function extractWebUrl(candidateUrl: string) {\n\n    if (stringIsNullOrEmpty(candidateUrl)) {\n        return \"\";\n    }\n\n    let index = candidateUrl.indexOf(\"_api/\");\n\n    if (index < 0) {\n        index = candidateUrl.indexOf(\"_vti_bin/\");\n    }\n\n    if (index > -1) {\n        return candidateUrl.substr(0, index);\n    }\n\n    // if all else fails just give them what they gave us back\n    return candidateUrl;\n}\n","import { SharePointQueryableConstructor } from \"./sharepointqueryable\";\nimport { extend, combine, hOP } from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { ODataParser, ODataParserBase } from \"@pnp/odata\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\n\nexport function odataUrlFrom(candidate: any): string {\n\n    const parts: string[] = [];\n    const s = [\"odata.type\", \"odata.editLink\", \"__metadata\", \"odata.metadata\"];\n    if (hOP(candidate, s[0]) && candidate[s[0]] === \"SP.Web\") {\n        // webs return an absolute url in the editLink\n        if (hOP(candidate, s[1])) {\n            parts.push(candidate[s[1]]);\n        } else if (hOP(candidate, s[2])) {\n            // we are dealing with verbose, which has an absolute uri\n            parts.push(candidate.__metadata.uri);\n        }\n\n    } else {\n\n        if (hOP(candidate, s[3]) && hOP(candidate, s[1])) {\n            // we are dealign with minimal metadata (default)\n            parts.push(extractWebUrl(candidate[s[3]]), \"_api\", candidate[s[1]]);\n        } else if (hOP(candidate, s[1])) {\n            parts.push(\"_api\", candidate[s[1]]);\n        } else if (hOP(candidate, s[2])) {\n            // we are dealing with verbose, which has an absolute uri\n            parts.push(candidate.__metadata.uri);\n        }\n    }\n\n    if (parts.length < 1) {\n        Logger.write(\"No uri information found in ODataEntity parsing, chaining will fail for this object.\", LogLevel.Warning);\n        return \"\";\n    }\n\n    return combine(...parts);\n}\n\nclass SPODataEntityParserImpl<T, D> extends ODataParserBase<T & D> {\n\n    constructor(protected factory: SharePointQueryableConstructor<T>) {\n        super();\n    }\n\n    public hydrate = (d: D) => {\n        const o = <T>new this.factory(odataUrlFrom(d), null);\n        return extend(o, d);\n    }\n\n    public parse(r: Response): Promise<T & D> {\n        return super.parse(r).then((d: any) => {\n            const o = <T>new this.factory(odataUrlFrom(d), null);\n            return extend<T, D>(o, d);\n        });\n    }\n}\n\nclass SPODataEntityArrayParserImpl<T, D> extends ODataParserBase<(T & D)[]> {\n\n    constructor(protected factory: SharePointQueryableConstructor<T>) {\n        super();\n    }\n\n    public hydrate = (d: D[]) => {\n        return d.map(v => {\n            const o = <T>new this.factory(odataUrlFrom(v), null);\n            return extend(o, v);\n        });\n    }\n\n    public parse(r: Response): Promise<(T & D)[]> {\n        return super.parse(r).then((d: D[]) => {\n            return d.map(v => {\n                const o = <T>new this.factory(odataUrlFrom(v), null);\n                return extend(o, v);\n            });\n        });\n    }\n}\n\nexport function spODataEntity<T, DataType = any>(factory: SharePointQueryableConstructor<T>): ODataParser<T & DataType> {\n    return new SPODataEntityParserImpl<T, DataType>(factory);\n}\n\nexport function spODataEntityArray<T, DataType = any>(factory: SharePointQueryableConstructor<T>): ODataParser<(T & DataType)[]> {\n    return new SPODataEntityArrayParserImpl<T, DataType>(factory);\n}\n","import {\n    LibraryConfiguration,\n    TypedHash,\n    RuntimeConfig,\n    HttpClientImpl,\n    FetchClient,\n} from \"@pnp/common\";\n\nexport interface SPConfigurationPart {\n    sp?: {\n        /**\n         * Any headers to apply to all requests\n         */\n        headers?: TypedHash<string>;\n\n        /**\n         * The base url used for all requests\n         */\n        baseUrl?: string;\n\n        /**\n         * Defines a factory method used to create fetch clients\n         */\n        fetchClientFactory?: () => HttpClientImpl;\n    };\n}\n\nexport interface SPConfiguration extends LibraryConfiguration, SPConfigurationPart { }\n\nexport function setup(config: SPConfiguration): void {\n    RuntimeConfig.extend(config);\n}\n\nexport class SPRuntimeConfigImpl {\n\n    public get headers(): TypedHash<string> {\n\n        const spPart = RuntimeConfig.get(\"sp\");\n        if (spPart !== undefined && spPart.headers !== undefined) {\n            return spPart.headers;\n        }\n\n        return {};\n    }\n\n    public get baseUrl(): string | null {\n\n        const spPart = RuntimeConfig.get(\"sp\");\n        if (spPart !== undefined && spPart.baseUrl !== undefined) {\n            return spPart.baseUrl;\n        }\n\n        if (RuntimeConfig.spfxContext !== undefined && RuntimeConfig.spfxContext !== null) {\n            return RuntimeConfig.spfxContext.pageContext.web.absoluteUrl;\n        }\n\n        return null;\n    }\n\n    public get fetchClientFactory(): () => HttpClientImpl {\n\n        const spPart = RuntimeConfig.get(\"sp\");\n        if (spPart !== undefined && spPart.fetchClientFactory !== undefined) {\n            return spPart.fetchClientFactory;\n        } else {\n            return () => new FetchClient();\n        }\n    }\n}\n\nexport let SPRuntimeConfig = new SPRuntimeConfigImpl();\n","import { SPHttpClient } from \"./sphttpclient\";\nimport { combine, extend } from \"@pnp/common\";\nimport { ODataDefaultParser } from \"@pnp/odata\";\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\n\nexport class CachedDigest {\n    public expiration: Date;\n    public value: string;\n}\n\n// allows for the caching of digests across all HttpClient's which each have their own DigestCache wrapper.\nconst digests = new Map<string, CachedDigest>();\n\nexport class DigestCache {\n\n    constructor(private _httpClient: SPHttpClient, private _digests: Map<string, CachedDigest> = digests) { }\n\n    public getDigest(webUrl: string): Promise<string> {\n\n        const cachedDigest: CachedDigest = this._digests.get(webUrl);\n        if (cachedDigest !== undefined) {\n            const now = new Date();\n            if (now < cachedDigest.expiration) {\n                return Promise.resolve(cachedDigest.value);\n            }\n        }\n\n        const url = combine(webUrl, \"/_api/contextinfo\");\n\n        const headers = {\n            \"Accept\": \"application/json;odata=verbose\",\n            \"Content-Type\": \"application/json;odata=verbose;charset=utf-8\",\n        };\n\n        return this._httpClient.fetchRaw(url, {\n            cache: \"no-cache\",\n            credentials: \"same-origin\",\n            headers: extend(headers, SPRuntimeConfig.headers, true),\n            method: \"POST\",\n        }).then((response) => {\n            const parser = new ODataDefaultParser();\n            return parser.parse(response).then((d: any) => d.GetContextWebInformation);\n        }).then((data: any) => {\n            const newCachedDigest = new CachedDigest();\n            newCachedDigest.value = data.FormDigestValue;\n            const seconds = data.FormDigestTimeoutSeconds;\n            const expiration = new Date();\n            expiration.setTime(expiration.getTime() + 1000 * seconds);\n            newCachedDigest.expiration = expiration;\n            this._digests.set(webUrl, newCachedDigest);\n            return newCachedDigest.value;\n        });\n    }\n\n    public clear() {\n        this._digests.clear();\n    }\n}\n","import { DigestCache } from \"./digestcache\";\nimport {\n    extend,\n    mergeHeaders,\n    FetchOptions,\n    RequestClient,\n    getCtxCallback,\n    HttpClientImpl,\n} from \"@pnp/common\";\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\n\nexport class SPHttpClient implements RequestClient {\n\n    private _digestCache: DigestCache;\n\n    constructor(private _impl: HttpClientImpl = SPRuntimeConfig.fetchClientFactory()) {\n        this._digestCache = new DigestCache(this);\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        let opts = extend(options, { cache: \"no-cache\", credentials: \"same-origin\" }, true);\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, SPRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        // lastly we apply any default headers we need that may not exist\n        if (!headers.has(\"Accept\")) {\n            headers.append(\"Accept\", \"application/json\");\n        }\n\n        if (!headers.has(\"Content-Type\")) {\n            headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n        }\n\n        if (!headers.has(\"X-ClientService-ClientTag\")) {\n            headers.append(\"X-ClientService-ClientTag\", \"PnPCoreJS:@pnp-$$Version$$\");\n        }\n\n        if (!headers.has(\"User-Agent\")) {\n            // this marks the requests for understanding by the service\n            headers.append(\"User-Agent\", \"NONISV|SharePointPnP|PnPCoreJS/$$Version$$\");\n        }\n\n        opts = extend(opts, { headers: headers });\n\n        if (opts.method && opts.method.toUpperCase() !== \"GET\") {\n\n            // if we have either a request digest or an authorization header we don't need a digest\n            if (!headers.has(\"X-RequestDigest\") && !headers.has(\"Authorization\")) {\n                return this._digestCache.getDigest(extractWebUrl(url))\n                    .then((digest) => {\n                        headers.append(\"X-RequestDigest\", digest);\n                        return this.fetchRaw(url, opts);\n                    });\n            }\n        }\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = extend(options, { headers: rawHeaders });\n\n        const retry = (ctx: RetryContext): void => {\n\n            // handles setting the proper timeout for a retry\n            const setRetry = (response: Response) => {\n                let delay;\n\n                if (response.headers.has(\"Retry-After\")) {\n                    // if we have gotten a header, use that value as the delay value\n                    delay = parseInt(response.headers.get(\"Retry-After\"), 10);\n                } else {\n                    // grab our current delay\n                    delay = ctx.delay;\n\n                    // Increment our counters.\n                    ctx.delay *= 2;\n                }\n\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(Error(`Retry count exceeded (${ctx.retryCount}) for request. Response status: [${response.status}] ${response.statusText}`));\n                } else {\n                    // Set our retry timeout for {delay} milliseconds.\n                    setTimeout(getCtxCallback(this, retry, ctx), delay);\n                }\n            };\n\n            // send the actual request\n            this._impl.fetch(url, options).then((response) => {\n\n                if (response.status === 429) {\n                    // we have been throttled\n                    setRetry(response);\n                } else {\n                    ctx.resolve(response);\n                }\n\n            }).catch((response: Response) => {\n\n                if (response.status === 503 || response.status === 504) {\n                    // http status code 503 or 504, we can retry this\n                    setRetry(response);\n                } else {\n                    ctx.reject(response);\n                }\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const retryContext: RetryContext = {\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            };\n\n            retry.call(this, retryContext);\n        });\n    }\n\n    public get(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface RetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: Response | PromiseLike<Response>) => void;\n    retryCount: number;\n}\n","export default (typeof global !== \"undefined\" ? global :\n            typeof self !== \"undefined\" ? self :\n            typeof window !== \"undefined\" ? window : {});\n","declare var global: { location: string, _spPageContextInfo?: { webAbsoluteUrl?: string, webServerRelativeUrl?: string } };\nimport { combine, isUrlAbsolute, hOP } from \"@pnp/common\";\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\n\n/**\n * Ensures that a given url is absolute for the current web based on context\n *\n * @param candidateUrl The url to make absolute\n *\n */\nexport function toAbsoluteUrl(candidateUrl: string): Promise<string> {\n\n    return new Promise((resolve) => {\n\n        if (isUrlAbsolute(candidateUrl)) {\n            // if we are already absolute, then just return the url\n            return resolve(candidateUrl);\n        }\n\n        if (SPRuntimeConfig.baseUrl !== null) {\n            // base url specified either with baseUrl of spfxContext config property\n            return resolve(combine(SPRuntimeConfig.baseUrl, candidateUrl));\n        }\n\n        if (global._spPageContextInfo !== undefined) {\n\n            // operating in classic pages\n            if (hOP(global._spPageContextInfo, \"webAbsoluteUrl\")) {\n                return resolve(combine(global._spPageContextInfo.webAbsoluteUrl, candidateUrl));\n            } else if (hOP(global._spPageContextInfo, \"webServerRelativeUrl\")) {\n                return resolve(combine(global._spPageContextInfo.webServerRelativeUrl, candidateUrl));\n            }\n        }\n\n        // does window.location exist and have a certain path part in it?\n        if (global.location !== undefined) {\n            const baseUrl = global.location.toString().toLowerCase();\n            [\"/_layouts/\", \"/siteassets/\"].forEach((s: string) => {\n                const index = baseUrl.indexOf(s);\n                if (index > 0) {\n                    return resolve(combine(baseUrl.substr(0, index), candidateUrl));\n                }\n            });\n        }\n\n        return resolve(candidateUrl);\n    });\n}\n","export function metadata(type: string) {\n    return {\n        \"__metadata\": { \"type\": type },\n    };\n}\n","import {\n    combine,\n    isUrlAbsolute,\n    FetchOptions,\n    mergeOptions,\n    extend,\n    getGUID,\n    jsS,\n} from \"@pnp/common\";\nimport {\n    ODataParser,\n    ODataQueryable,\n    RequestContext,\n} from \"@pnp/odata\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { SPBatch } from \"./batch\";\nimport { SPHttpClient } from \"./net/sphttpclient\";\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\nimport { metadata } from \"./utils/metadata\";\n\nexport interface SharePointQueryableConstructor<T> {\n    new(baseUrl: string | SharePointQueryable, path?: string): T;\n}\n\n/**\n * SharePointQueryable Base Class\n *\n */\nexport class SharePointQueryable<GetType = any> extends ODataQueryable<SPBatch, GetType> {\n\n    protected _forceCaching: boolean;\n\n    /**\n     * Creates a new instance of the SharePointQueryable class\n     *\n     * @constructor\n     * @param baseUrl A string or SharePointQueryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | SharePointQueryable, path?: string) {\n        super();\n\n        this._forceCaching = false;\n\n        if (typeof baseUrl === \"string\") {\n            // we need to do some extra parsing to get the parent url correct if we are\n            // being created from just a string.\n\n            if (isUrlAbsolute(baseUrl) || baseUrl.lastIndexOf(\"/\") < 0) {\n                this._parentUrl = baseUrl;\n                this._url = combine(baseUrl, path);\n            } else if (baseUrl.lastIndexOf(\"/\") > baseUrl.lastIndexOf(\"(\")) {\n                // .../items(19)/fields\n                const index = baseUrl.lastIndexOf(\"/\");\n                this._parentUrl = baseUrl.slice(0, index);\n                path = combine(baseUrl.slice(index), path);\n                this._url = combine(this._parentUrl, path);\n            } else {\n                // .../items(19)\n                const index = baseUrl.lastIndexOf(\"(\");\n                this._parentUrl = baseUrl.slice(0, index);\n                this._url = combine(baseUrl, path);\n            }\n        } else {\n            this.extend(baseUrl, path);\n            const target = baseUrl.query.get(\"@target\");\n            if (target !== undefined) {\n                this.query.set(\"@target\", target);\n            }\n        }\n    }\n\n    /**\n     * Creates a new instance of the supplied factory and extends this into that new instance\n     *\n     * @param factory constructor for the new SharePointQueryable\n     */\n    public as<T>(factory: SharePointQueryableConstructor<T>): T {\n        const o = <T>new factory(this._url, null);\n        return extend(o, this, true);\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public toUrlAndQuery(): string {\n\n        const aliasedParams = new Map<string, string>(this.query);\n\n        let url = this.toUrl().replace(/'!(@.*?)::(.*?)'/ig, (match, labelName, value) => {\n            Logger.write(`Rewriting aliased parameter from match ${match} to label: ${labelName} value: ${value}`, LogLevel.Verbose);\n            aliasedParams.set(labelName, `'${value}'`);\n            return labelName;\n        });\n\n        if (aliasedParams.size > 0) {\n            const char = url.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n            url += `${char}${Array.from(aliasedParams).map((v: [string, string]) => v[0] + \"=\" + v[1]).join(\"&\")}`;\n        }\n\n        return url;\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this.query.set(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this.query.set(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends SharePointQueryable>(\n        factory: SharePointQueryableConstructor<T>,\n        baseUrl: string | SharePointQueryable = this.parentUrl,\n        path?: string,\n        batch?: SPBatch): T {\n\n        let parent = new factory(baseUrl, path).configureFrom(this);\n\n        const t = \"@target\";\n        if (this.query.has(t)) {\n            parent.query.set(t, this.query.get(t));\n        }\n        if (batch !== undefined) {\n            parent = parent.inBatch(batch);\n        }\n        return parent;\n    }\n\n    /**\n     * Clones this SharePointQueryable into a new SharePointQueryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected clone<T extends SharePointQueryable>(factory: SharePointQueryableConstructor<T>, additionalPath?: string, includeBatch = true): T {\n\n        const clone: T = super._clone(new factory(this, additionalPath), { includeBatch });\n\n        // handle sp specific clone actions\n        const t = \"@target\";\n        if (this.query.has(t)) {\n            clone.query.set(t, this.query.get(t));\n        }\n\n        return clone;\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected toRequestContext<T>(\n        verb: string,\n        options: FetchOptions = {},\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>> {\n\n        const dependencyDispose = this.hasBatch ? this._batchDependency : () => { return; };\n\n        return toAbsoluteUrl(this.toUrlAndQuery()).then(url => {\n\n            mergeOptions(options, this._options);\n\n            // build our request context\n            const context: RequestContext<T> = {\n                batch: this.batch,\n                batchDependency: dependencyDispose,\n                cachingOptions: this._cachingOptions,\n                clientFactory: () => new SPHttpClient(),\n                isBatched: this.hasBatch,\n                isCached: this._forceCaching || (this._useCaching && /^get$/i.test(verb)),\n                options: options,\n                parser: parser,\n                pipeline: pipeline,\n                requestAbsoluteUrl: url,\n                requestId: getGUID(),\n                verb: verb,\n            };\n\n            return context;\n        });\n    }\n}\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class SharePointQueryableCollection<GetType = any[]> extends SharePointQueryable<GetType> {\n\n    /**\n     * Filters the returned collection (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#bk_supported)\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this.query.set(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields\n     *\n     * @param orderby The name of the field on which to sort\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const o = \"$orderby\";\n        const query = this.query.has(o) ? this.query.get(o).split(\",\") : [];\n        query.push(`${orderBy} ${ascending ? \"asc\" : \"desc\"}`);\n        this.query.set(o, query.join(\",\"));\n        return this;\n    }\n\n    /**\n     * Skips the specified number of items\n     *\n     * @param skip The number of items to skip\n     */\n    public skip(skip: number): this {\n        this.query.set(\"$skip\", skip.toString());\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this.query.set(\"$top\", top.toString());\n        return this;\n    }\n}\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class SharePointQueryableInstance<GetType = any> extends SharePointQueryable<GetType> {\n\n    /**\n     * Curries the update function into the common pieces\n     * \n     * @param type \n     * @param mapper \n     */\n    protected _update<Return, Props = any, Data = any>(type: string, mapper: (data: Data, props: Props) => Return): (props: Props) => Promise<Return> {\n        return (props: any) => this.postCore({\n            body: jsS(extend(metadata(type), props)),\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((d: Data) => mapper(d, props));\n    }\n\n    /**\n    * Deletes this instance\n    *\n    */\n    protected _delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Deletes this instance with an etag value in the headers\n     * \n     * @param eTag eTag to delete\n     */\n    protected _deleteWithETag(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\n/**\n * Decorator used to specify the default path for SharePointQueryable objects\n * \n * @param path \n */\nexport function defaultPath(path: string) {\n\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            constructor(...args: any[]) {\n                super(args[0], args.length > 1 && args[1] !== undefined ? args[1] : path);\n            }\n        };\n    };\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { SiteGroups } from \"./sitegroups\";\nimport { TypedHash, jsS, extend } from \"@pnp/common\";\nimport { metadata } from \"./utils/metadata\";\n\n/**\n * Properties that provide both a getter, and a setter.\n *\n */\nexport interface UserUpdateResult {\n    user: SiteUser;\n    data: any;\n}\n\n/**\n * Describes a collection of all site collection users\n *\n */\n@defaultPath(\"siteusers\")\nexport class SiteUsers extends SharePointQueryableCollection {\n\n    /**\n     * Gets a user from the collection by id\n     *\n     * @param id The id of the user to retrieve\n     */\n    public getById(id: number): SiteUser {\n        return new SiteUser(this, `getById(${id})`);\n    }\n\n    /**\n     * Gets a user from the collection by email\n     *\n     * @param email The email address of the user to retrieve\n     */\n    public getByEmail(email: string): SiteUser {\n        return new SiteUser(this, `getByEmail('${email}')`);\n    }\n\n    /**\n     * Gets a user from the collection by login name\n     *\n     * @param loginName The login name of the user to retrieve\n     */\n    public getByLoginName(loginName: string): SiteUser {\n        const su = new SiteUser(this);\n        su.concat(`('!@v::${encodeURIComponent(loginName)}')`);\n        return su;\n    }\n\n    /**\n     * Removes a user from the collection by id\n     *\n     * @param id The id of the user to remove\n     */\n    public removeById(id: number | SharePointQueryable): Promise<any> {\n        return this.clone(SiteUsers, `removeById(${id})`).postCore();\n    }\n\n    /**\n     * Removes a user from the collection by login name\n     *\n     * @param loginName The login name of the user to remove\n     */\n    public removeByLoginName(loginName: string): Promise<any> {\n        const o = this.clone(SiteUsers, `removeByLoginName(@v)`);\n        o.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return o.postCore();\n    }\n\n    /**\n     * Adds a user to a group\n     *\n     * @param loginName The login name of the user to add to the group\n     *\n     */\n    public add(loginName: string): Promise<SiteUser> {\n        return this.clone(SiteUsers, null).postCore({\n            body: jsS(extend(metadata(\"SP.User\"), { LoginName: loginName })),\n        }).then(() => this.getByLoginName(loginName));\n    }\n}\n\n/**\n * Base class for a user\n * \n */\nexport class UserBase extends SharePointQueryableInstance {\n\n    /**\n     * Gets the groups for this user\n     *\n     */\n    public get groups() {\n        return new SiteGroups(this, \"groups\");\n    }\n}\n\n/**\n * Describes a single user\n *\n */\nexport class SiteUser extends UserBase {\n\n    /**\n    * Updates this user instance with the supplied properties\n    *\n    * @param properties A plain object of property names and values to update for the user\n    */\n    public update = this._update<UserUpdateResult, TypedHash<any>, any>(\"SP.User\", data => ({ data, user: this }));\n\n    /**\n     * Delete this user\n     *\n     */\n    public delete = this._delete;\n}\n\n/**\n * Represents the current user\n */\n@defaultPath(\"currentuser\")\nexport class CurrentUser extends UserBase { }\n\nexport interface SiteUserProps {\n    Email: string;\n    Id: number;\n    IsHiddenInUI: boolean;\n    IsShareByEmailGuestUser: boolean;\n    IsSiteAdmin: boolean;\n    LoginName: string;\n    PrincipalType: number;\n    Title: string;\n}\n","import { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { SiteUsers } from \"./siteusers\";\nimport { extend, TypedHash, jsS, hOP } from \"@pnp/common\";\nimport { metadata } from \"./utils/metadata\";\n\n/**\n * Principal Type enum\n *\n */\nexport enum PrincipalType {\n    None = 0,\n    User = 1,\n    DistributionList = 2,\n    SecurityGroup = 4,\n    SharePointGroup = 8,\n    All = 15,\n}\n\n/**\n * Results from updating a group\n *\n */\nexport interface GroupUpdateResult {\n    group: SiteGroup;\n    data: any;\n}\n\n/**\n * Results from adding a group\n *\n */\nexport interface GroupAddResult {\n    group: SiteGroup;\n    data: any;\n}\n\n/**\n * Describes a collection of site groups\n *\n */\n@defaultPath(\"sitegroups\")\nexport class SiteGroups extends SharePointQueryableCollection {\n\n    /**\t\n     * Gets a group from the collection by id\t\n     *\t\n     * @param id The id of the group to retrieve\t\n     */\n    public getById(id: number) {\n        const sg = new SiteGroup(this);\n        sg.concat(`(${id})`);\n        return sg;\n    }\n\n    /**\n     * Adds a new group to the site collection\n     *\n     * @param props The group properties object of property names and values to be set for the group\n     */\n    public add(properties: TypedHash<any>): Promise<GroupAddResult> {\n        const postBody = jsS(extend(metadata(\"SP.Group\"), properties));\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                group: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Gets a group from the collection by name\n     *\n     * @param groupName The name of the group to retrieve\n     */\n    public getByName(groupName: string): SiteGroup {\n        return new SiteGroup(this, `getByName('${groupName}')`);\n    }\n\n    /**\n     * Removes the group with the specified member id from the collection\n     *\n     * @param id The id of the group to remove\n     */\n    public removeById(id: number): Promise<void> {\n        return this.clone(SiteGroups, `removeById('${id}')`).postCore();\n    }\n\n    /**\n     * Removes the cross-site group with the specified name from the collection\n     *\n     * @param loginName The name of the group to remove\n     */\n    public removeByLoginName(loginName: string): Promise<any> {\n        return this.clone(SiteGroups, `removeByLoginName('${loginName}')`).postCore();\n    }\n}\n\n/**\n * Describes a single group\n *\n */\nexport class SiteGroup extends SharePointQueryableInstance {\n\n    /**\n     * Gets the users for this group\n     *\n     */\n    public get users(): SiteUsers {\n        return new SiteUsers(this, \"users\");\n    }\n\n    public update = this._update<GroupUpdateResult, TypedHash<any>, any>(\"SP.Group\", (d, p) => {\n        let retGroup: SiteGroup = this;\n\n        if (hOP(p, \"Title\")) {\n            /* tslint:disable-next-line no-string-literal */\n            retGroup = this.getParent(SiteGroup, this.parentUrl, `getByName('${p[\"Title\"]}')`);\n        }\n\n        return {\n            data: d,\n            group: retGroup,\n        };\n    });\n\n    /**\n     * Set the owner of a group using a user id\n     * @param userId the id of the user that will be set as the owner of the current group\n     */\n    public async setUserAsOwner(userId: number): Promise<any> {\n        return this.clone(SiteGroup, `SetUserAsOwner(${userId})`).postCore();\n    }\n}\n\nexport interface SiteGroupAddResult {\n    group: SiteGroup;\n    data: any;\n}\n","import { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { SiteGroups } from \"./sitegroups\";\nimport { BasePermissions } from \"./types\";\nimport { extend, TypedHash, jsS, hOP } from \"@pnp/common\";\nimport { metadata } from \"./utils/metadata\";\n\n/**\n * Describes a set of role assignments for the current scope\n *\n */\n@defaultPath(\"roleassignments\")\nexport class RoleAssignments extends SharePointQueryableCollection {\n\n    /**\t\n     * Gets the role assignment associated with the specified principal id from the collection.\t\n     *\t\n     * @param id The id of the role assignment\t\n     */\n    public getById(id: number) {\n        const ra = new RoleAssignment(this);\n        ra.concat(`(${id})`);\n        return ra;\n    }\n\n    /**\n     * Adds a new role assignment with the specified principal and role definitions to the collection\n     *\n     * @param principalId The id of the user or group to assign permissions to\n     * @param roleDefId The id of the role definition that defines the permissions to assign\n     *\n     */\n    public add(principalId: number, roleDefId: number): Promise<void> {\n        return this.clone(RoleAssignments, `addroleassignment(principalid=${principalId}, roledefid=${roleDefId})`).postCore();\n    }\n\n    /**\n     * Removes the role assignment with the specified principal and role definition from the collection\n     *\n     * @param principalId The id of the user or group in the role assignment\n     * @param roleDefId The id of the role definition in the role assignment\n     *\n     */\n    public remove(principalId: number, roleDefId: number): Promise<void> {\n        return this.clone(RoleAssignments, `removeroleassignment(principalid=${principalId}, roledefid=${roleDefId})`).postCore();\n    }\n}\n\n/**\n * Describes a role assignment\n *\n */\nexport class RoleAssignment extends SharePointQueryableInstance {\n\n    /**\n     * Gets the groups that directly belong to the access control list (ACL) for this securable object\n     *\n     */\n    public get groups(): SiteGroups {\n        return new SiteGroups(this, \"groups\");\n    }\n\n    /**\n     * Gets the role definition bindings for this role assignment\n     *\n     */\n    public get bindings(): RoleDefinitionBindings {\n        return new RoleDefinitionBindings(this);\n    }\n\n    /**\n     * Deletes this role assignment\n     *\n     */\n    public delete = this._delete;\n}\n\n/**\n * Describes a collection of role definitions\n *\n */\n@defaultPath(\"roledefinitions\")\nexport class RoleDefinitions extends SharePointQueryableCollection {\n\n    /**\t   \n     * Gets the role definition with the specified id from the collection\t    \n     *\t     \n     * @param id The id of the role definition\t     \n     *\t     \n     */\n    public getById(id: number): RoleDefinition {\n        return new RoleDefinition(this, `getById(${id})`);\n    }\n\n    /**\n     * Gets the role definition with the specified name\n     *\n     * @param name The name of the role definition\n     *\n     */\n    public getByName(name: string): RoleDefinition {\n        return new RoleDefinition(this, `getbyname('${name}')`);\n    }\n\n    /**\n     * Gets the role definition with the specified role type\n     *\n     * @param roleTypeKind The roletypekind of the role definition (None=0, Guest=1, Reader=2, Contributor=3, WebDesigner=4, Administrator=5, Editor=6, System=7)\n     *\n     */\n    public getByType(roleTypeKind: number): RoleDefinition {\n        return new RoleDefinition(this, `getbytype(${roleTypeKind})`);\n    }\n\n    /**\n     * Creates a role definition\n     *\n     * @param name The new role definition's name\n     * @param description The new role definition's description\n     * @param order The order in which the role definition appears\n     * @param basePermissions The permissions mask for this role definition\n     *\n     */\n    public add(name: string, description: string, order: number, basePermissions: BasePermissions): Promise<RoleDefinitionAddResult> {\n\n        const postBody = jsS({\n            BasePermissions: {\n                High: basePermissions.High.toString(),\n                Low: basePermissions.Low.toString(),\n            },\n            Description: description,\n            Name: name,\n            Order: order,\n            __metadata: { \"type\": \"SP.RoleDefinition\" },\n        });\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                definition: this.getById(data.Id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a role definition\n *\n */\nexport class RoleDefinition extends SharePointQueryableInstance {\n\n    /**\n     * Deletes this role definition\n     *\n     */\n    public delete = this._delete;\n\n    /**\n     * Updates this role definition with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the role definition\n     */\n    /* tslint:disable no-string-literal */\n    public update(properties: TypedHash<any>): Promise<RoleDefinitionUpdateResult> {\n\n        if (hOP(properties, \"BasePermissions\") !== undefined) {\n            properties[\"BasePermissions\"] = extend({ __metadata: { type: \"SP.BasePermissions\" } }, {\n                High: properties[\"BasePermissions\"].High.toString(),\n                Low: properties[\"BasePermissions\"].Low.toString(),\n            });\n        }\n\n        const postBody = jsS(extend(metadata(\"SP.RoleDefinition\"), properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n\n            let retDef: RoleDefinition = this;\n\n            if (hOP(properties, \"Name\")) {\n                const parent = this.getParent(RoleDefinitions, this.parentUrl, \"\");\n                retDef = parent.getByName(<string>properties[\"Name\"]);\n            }\n\n            return {\n                data: data,\n                definition: retDef,\n            };\n        });\n    }\n    /* tslint:enable */\n}\n\n/**\n * Result from updating a role definition\n *\n */\nexport interface RoleDefinitionUpdateResult {\n    definition: RoleDefinition;\n    data: any;\n}\n\n/**\n * Result from adding a role definition\n *\n */\nexport interface RoleDefinitionAddResult {\n    definition: RoleDefinition;\n    data: any;\n}\n\n/**\n * Describes the role definitons bound to a role assignment object\n *\n */\n@defaultPath(\"roledefinitionbindings\")\nexport class RoleDefinitionBindings extends SharePointQueryableCollection { }\n","// reference: https://msdn.microsoft.com/en-us/library/office/dn600183.aspx\nimport { TypedHash } from \"@pnp/common\";\n\nimport { NavigationNode } from \"./navigation\";\n\n/**\n * Represents the unique sequential location of a change within the change log.\n */\nexport interface ChangeToken {\n    /**\n     * Gets or sets a string value that contains the serialized representation of the change token generated by the protocol server.\n     */\n    StringValue: string;\n}\n\n/**\n * Defines a query that is performed against the change log.\n */\nexport interface ChangeQuery {\n    /**\n     * Gets or sets a value that specifies whether add changes are included in the query.\n     */\n    Add?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to alerts are included in the query.\n     */\n    Alert?: boolean;\n\n    /**\n     * Gets or sets a value that specifies the end date and end time for changes that are returned through the query.\n     */\n    ChangeTokenEnd?: ChangeToken;\n\n    /**\n     * Gets or sets a value that specifies the start date and start time for changes that are returned through the query.\n     */\n    ChangeTokenStart?: ChangeToken;\n\n    /**\n     * Gets or sets a value that specifies whether changes to content types are included in the query.\n     */\n    ContentType?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether deleted objects are included in the query.\n     */\n    DeleteObject?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to fields are included in the query.\n     */\n    Field?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to files are included in the query.\n     */\n    File?: boolean;\n\n    /**\n     * Gets or sets value that specifies whether changes to folders are included in the query.\n     */\n    Folder?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to groups are included in the query.\n     */\n    Group?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding users to groups is included in the query.\n     */\n    GroupMembershipAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether deleting users from the groups is included in the query.\n     */\n    GroupMembershipDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether general changes to list items are included in the query.\n     */\n    Item?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to lists are included in the query.\n     */\n    List?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether move changes are included in the query.\n     */\n    Move?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to the navigation structure of a site collection are included in the query.\n     */\n    Navigation?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether renaming changes are included in the query.\n     */\n    Rename?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether restoring items from the recycle bin or from backups is included in the query.\n     */\n    Restore?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleAssignmentAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleAssignmentDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionUpdate?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether modifications to security policies are included in the query.\n     */\n    SecurityPolicy?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to site collections are included in the query.\n     */\n    Site?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether updates made using the item SystemUpdate method are included in the query.\n     */\n    SystemUpdate?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether update changes are included in the query.\n     */\n    Update?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to users are included in the query.\n     */\n    User?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to views are included in the query.\n     */\n    View?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to Web sites are included in the query.\n     */\n    Web?: boolean;\n}\n\n/**\n * Specifies a Collaborative Application Markup Language (CAML) query on a list or joined lists.\n */\nexport interface CamlQuery {\n\n    /**\n     * Gets or sets a value that indicates whether the query returns dates in Coordinated Universal Time (UTC) format.\n     */\n    DatesInUtc?: boolean;\n\n    /**\n     * Gets or sets a value that specifies the server relative URL of a list folder from which results will be returned.\n     */\n    FolderServerRelativeUrl?: string;\n\n    /**\n     * Gets or sets a value that specifies the information required to get the next page of data for the list view.\n     */\n    ListItemCollectionPosition?: ListItemCollectionPosition;\n\n    /**\n     * Gets or sets value that specifies the XML schema that defines the list view.\n     */\n    ViewXml?: string;\n}\n\n/**\n * Specifies the information required to get the next page of data for a list view.\n */\nexport interface ListItemCollectionPosition {\n    /**\n     * Gets or sets a value that specifies information, as name-value pairs, required to get the next page of data for a list view.\n     */\n    PagingInfo: string;\n}\n\n/**\n * Represents the input parameter of the GetListItemChangesSinceToken method.\n */\nexport interface ChangeLogitemQuery {\n    /**\n     * The change token for the request.\n     */\n    ChangeToken?: string;\n\n    /**\n     * The XML element that defines custom filtering for the query.\n     */\n    Contains?: string;\n\n    /**\n     * The records from the list to return and their return order.\n     */\n    Query?: string;\n\n    /**\n     * The options for modifying the query.\n     */\n    QueryOptions?: string;\n\n    /**\n     * RowLimit\n     */\n    RowLimit?: string;\n\n    /**\n     * The names of the fields to include in the query result.\n     */\n    ViewFields?: string;\n\n    /**\n     * The GUID of the view.\n     */\n    ViewName?: string;\n}\n\n/**\n * Determines the display mode of the given control or view\n */\nexport enum ControlMode {\n    Display = 1,\n    Edit = 2,\n    New = 3,\n}\n\n/**\n * Represents properties of a list item field and its value.\n */\nexport interface ListItemFormUpdateValue {\n\n    /**\n     * The error message result after validating the value for the field.\n     */\n    ErrorMessage?: string;\n\n    /**\n     * The internal name of the field.\n     */\n    FieldName?: string;\n\n    /**\n     * The value of the field, in string format.\n     */\n    FieldValue?: string;\n\n    /**\n     * Indicates whether there was an error result after validating the value for the field.\n     */\n    HasException?: boolean;\n}\n\n/**\n * Specifies the type of the field.\n */\nexport enum FieldTypes {\n    Invalid = 0,\n    Integer = 1,\n    Text = 2,\n    Note = 3,\n    DateTime = 4,\n    Counter = 5,\n    Choice = 6,\n    Lookup = 7,\n    Boolean = 8,\n    Number = 9,\n    Currency = 10,\n    URL = 11,\n    Computed = 12,\n    Threading = 13,\n    Guid = 14,\n    MultiChoice = 15,\n    GridChoice = 16,\n    Calculated = 17,\n    File = 18,\n    Attachments = 19,\n    User = 20,\n    Recurrence = 21,\n    CrossProjectLink = 22,\n    ModStat = 23,\n    Error = 24,\n    ContentTypeId = 25,\n    PageSeparator = 26,\n    ThreadIndex = 27,\n    WorkflowStatus = 28,\n    AllDayEvent = 29,\n    WorkflowEventType = 30,\n}\n\nexport enum DateTimeFieldFormatType {\n    DateOnly = 0,\n    DateTime = 1,\n}\n\nexport enum DateTimeFieldFriendlyFormatType {\n    Unspecified = 0,\n    Disabled = 1,\n    Relative = 2,\n}\n\n/**\n * Specifies the control settings while adding a field.\n */\nexport enum AddFieldOptions {\n    /**\n     *  Specify that a new field added to the list must also be added to the default content type in the site collection\n     */\n    DefaultValue = 0,\n    /**\n     * Specify that a new field added to the list must also be added to the default content type in the site collection.\n     */\n    AddToDefaultContentType = 1,\n    /**\n     * Specify that a new field must not be added to any other content type\n     */\n    AddToNoContentType = 2,\n    /**\n     *  Specify that a new field that is added to the specified list must also be added to all content types in the site collection\n     */\n    AddToAllContentTypes = 4,\n    /**\n     * Specify adding an internal field name hint for the purpose of avoiding possible database locking or field renaming operations\n     */\n    AddFieldInternalNameHint = 8,\n    /**\n     * Specify that a new field that is added to the specified list must also be added to the default list view\n     */\n    AddFieldToDefaultView = 16,\n    /**\n     * Specify to confirm that no other field has the same display name\n     */\n    AddFieldCheckDisplayName = 32,\n}\n\nexport interface XmlSchemaFieldCreationInformation {\n    Options?: AddFieldOptions;\n    SchemaXml: string;\n}\n\nexport enum CalendarType {\n    Gregorian = 1,\n    Japan = 3,\n    Taiwan = 4,\n    Korea = 5,\n    Hijri = 6,\n    Thai = 7,\n    Hebrew = 8,\n    GregorianMEFrench = 9,\n    GregorianArabic = 10,\n    GregorianXLITEnglish = 11,\n    GregorianXLITFrench = 12,\n    KoreaJapanLunar = 14,\n    ChineseLunar = 15,\n    SakaEra = 16,\n    UmAlQura = 23,\n}\n\nexport enum UrlFieldFormatType {\n    Hyperlink = 0,\n    Image = 1,\n}\n\nexport interface BasePermissions {\n    Low: number;\n    High: number;\n}\n\nexport enum PermissionKind {\n\n    /**\n     * Has no permissions on the Site. Not available through the user interface.\n     */\n    EmptyMask = 0,\n\n    /**\n     * View items in lists, documents in document libraries, and Web discussion comments.\n     */\n    ViewListItems = 1,\n\n    /**\n     * Add items to lists, documents to document libraries, and Web discussion comments.\n     */\n    AddListItems = 2,\n\n    /**\n     * Edit items in lists, edit documents in document libraries, edit Web discussion comments\n     * in documents, and customize Web Part Pages in document libraries.\n     */\n    EditListItems = 3,\n\n    /**\n     * Delete items from a list, documents from a document library, and Web discussion\n     * comments in documents.\n     */\n    DeleteListItems = 4,\n\n    /**\n     * Approve a minor version of a list item or document.\n     */\n    ApproveItems = 5,\n\n    /**\n     * View the source of documents with server-side file handlers.\n     */\n    OpenItems = 6,\n\n    /**\n     * View past versions of a list item or document.\n     */\n    ViewVersions = 7,\n\n    /**\n     * Delete past versions of a list item or document.\n     */\n    DeleteVersions = 8,\n\n    /**\n     * Discard or check in a document which is checked out to another user.\n     */\n    CancelCheckout = 9,\n\n    /**\n     * Create, change, and delete personal views of lists.\n     */\n    ManagePersonalViews = 10,\n\n    /**\n     * Create and delete lists, add or remove columns in a list, and add or remove public views of a list.\n     */\n    ManageLists = 12,\n\n    /**\n     * View forms, views, and application pages, and enumerate lists.\n     */\n    ViewFormPages = 13,\n\n    /**\n     * Make content of a list or document library retrieveable for anonymous users through SharePoint search.\n     * The list permissions in the site do not change.\n     */\n    AnonymousSearchAccessList = 14,\n\n    /**\n     * Allow users to open a Site, list, or folder to access items inside that container.\n     */\n    Open = 17,\n\n    /**\n     * View pages in a Site.\n     */\n    ViewPages = 18,\n\n    /**\n     * Add, change, or delete HTML pages or Web Part Pages, and edit the Site using\n     * a Windows SharePoint Services compatible editor.\n     */\n    AddAndCustomizePages = 19,\n\n    /**\n     * Apply a theme or borders to the entire Site.\n     */\n    ApplyThemeAndBorder = 20,\n\n    /**\n     * Apply a style sheet (.css file) to the Site.\n     */\n    ApplyStyleSheets = 21,\n\n    /**\n     * View reports on Site usage.\n     */\n    ViewUsageData = 22,\n\n    /**\n     * Create a Site using Self-Service Site Creation.\n     */\n    CreateSSCSite = 23,\n\n    /**\n     * Create subsites such as team sites, Meeting Workspace sites, and Document Workspace sites.\n     */\n    ManageSubwebs = 24,\n\n    /**\n     * Create a group of users that can be used anywhere within the site collection.\n     */\n    CreateGroups = 25,\n\n    /**\n     * Create and change permission levels on the Site and assign permissions to users\n     * and groups.\n     */\n    ManagePermissions = 26,\n\n    /**\n     * Enumerate files and folders in a Site using Microsoft Office SharePoint Designer\n     * and WebDAV interfaces.\n     */\n    BrowseDirectories = 27,\n\n    /**\n     * View information about users of the Site.\n     */\n    BrowseUserInfo = 28,\n\n    /**\n     * Add or remove personal Web Parts on a Web Part Page.\n     */\n    AddDelPrivateWebParts = 29,\n\n    /**\n     * Update Web Parts to display personalized information.\n     */\n    UpdatePersonalWebParts = 30,\n\n    /**\n     * Grant the ability to perform all administration tasks for the Site as well as\n     * manage content, activate, deactivate, or edit properties of Site scoped Features\n     * through the object model or through the user interface (UI). When granted on the\n     * root Site of a Site Collection, activate, deactivate, or edit properties of\n     * site collection scoped Features through the object model. To browse to the Site\n     * Collection Features page and activate or deactivate Site Collection scoped Features\n     * through the UI, you must be a Site Collection administrator.\n     */\n    ManageWeb = 31,\n\n    /**\n     * Content of lists and document libraries in the Web site will be retrieveable for anonymous users through\n     * SharePoint search if the list or document library has AnonymousSearchAccessList set.\n     */\n    AnonymousSearchAccessWebLists = 32,\n\n    /**\n     * Use features that launch client applications. Otherwise, users must work on documents\n     * locally and upload changes.\n     */\n    UseClientIntegration = 37,\n\n    /**\n     * Use SOAP, WebDAV, or Microsoft Office SharePoint Designer interfaces to access the Site.\n     */\n    UseRemoteAPIs = 38,\n\n    /**\n     * Manage alerts for all users of the Site.\n     */\n    ManageAlerts = 39,\n\n    /**\n     * Create e-mail alerts.\n     */\n    CreateAlerts = 40,\n\n    /**\n     * Allows a user to change his or her user information, such as adding a picture.\n     */\n    EditMyUserInfo = 41,\n\n    /**\n     * Enumerate permissions on Site, list, folder, document, or list item.\n     */\n    EnumeratePermissions = 63,\n\n    /**\n     * Has all permissions on the Site. Not available through the user interface.\n     */\n    FullMask = 65,\n}\n\nexport interface FollowedContent {\n    FollowedDocumentsUrl: string;\n    FollowedSitesUrl: string;\n}\n\nexport interface UserProfile {\n    /**\n     * An object containing the user's FollowedDocumentsUrl and FollowedSitesUrl.\n     */\n    FollowedContent?: FollowedContent;\n    /**\n     * The account name of the user. (SharePoint Online only)\n     */\n    AccountName?: string;\n    /**\n     * The display name of the user. (SharePoint Online only)\n     */\n    DisplayName?: string;\n    /**\n     * The FirstRun flag of the user. (SharePoint Online only)\n     */\n    O15FirstRunExperience?: number;\n    /**\n     * The personal site of the user.\n     */\n    PersonalSite?: string;\n    /**\n     * The capabilities of the user's personal site. Represents a bitwise PersonalSiteCapabilities value:\n     * None = 0; Profile Value = 1; Social Value = 2; Storage Value = 4; MyTasksDashboard Value = 8; Education Value = 16; Guest Value = 32.\n     */\n    PersonalSiteCapabilities?: number;\n    /**\n     * The error thrown when the user's personal site was first created, if any. (SharePoint Online only)\n     */\n    PersonalSiteFirstCreationError?: string;\n    /**\n     * The date and time when the user's personal site was first created. (SharePoint Online only)\n     */\n    PersonalSiteFirstCreationTime?: Date;\n    /**\n     * The status for the state of the personal site instantiation\n     */\n    PersonalSiteInstantiationState?: number;\n    /**\n     * The date and time when the user's personal site was last created. (SharePoint Online only)\n     */\n    PersonalSiteLastCreationTime?: Date;\n    /**\n     * The number of attempts made to create the user's personal site. (SharePoint Online only)\n     */\n    PersonalSiteNumberOfRetries?: number;\n    /**\n     * Indicates whether the user's picture is imported from Exchange.\n     */\n    PictureImportEnabled?: boolean;\n    /**\n     * The public URL of the personal site of the current user. (SharePoint Online only)\n     */\n    PublicUrl?: string;\n    /**\n     * The URL used to create the user's personal site.\n     */\n    UrlToCreatePersonalSite?: string;\n}\n\nexport interface HashTag {\n    /**\n     * The hash tag's internal name.\n     */\n    Name?: string;\n    /**\n     * The number of times that the hash tag is used.\n     */\n    UseCount?: number;\n}\n\nexport interface HashTagCollection {\n    Items: HashTag[];\n}\n\nexport interface UserIdInfo {\n    NameId?: string;\n    NameIdIssuer?: string;\n}\n\n/**\n * Specifies the type of a principal.\n */\n/* tslint:disable:no-bitwise */\nexport const enum PrincipalType {\n    /**\n     * Enumeration whose value specifies no principal type.\n     */\n    None = 0,\n    /**\n     * Enumeration whose value specifies a user as the principal type.\n     */\n    User = 1,\n    /**\n     * Enumeration whose value specifies a distribution list as the principal type.\n     */\n    DistributionList = 2,\n    /**\n     * Enumeration whose value specifies a security group as the principal type.\n     */\n    SecurityGroup = 4,\n    /**\n     * Enumeration whose value specifies a group as the principal type.\n     */\n    SharePointGroup = 8,\n    /**\n     * Enumeration whose value specifies all principal types.\n     */\n    All = SharePointGroup | SecurityGroup | DistributionList | User,\n}\n/* tslint:enable:no-bitwise */\n\n/**\n * Specifies the source of a principal.\n */\n/* tslint:disable:no-bitwise */\nexport const enum PrincipalSource {\n    /**\n     * Enumeration whose value specifies no principal source.\n     */\n    None = 0,\n    /**\n     * Enumeration whose value specifies user information list as the principal source.\n     */\n    UserInfoList = 1,\n    /**\n     * Enumeration whose value specifies Active Directory as the principal source.\n     */\n    Windows = 2,\n    /**\n     * Enumeration whose value specifies the current membership provider as the principal source.\n     */\n    MembershipProvider = 4,\n    /**\n     * Enumeration whose value specifies the current role provider as the principal source.\n     */\n    RoleProvider = 8,\n    /**\n     * Enumeration whose value specifies all principal sources.\n     */\n    All = RoleProvider | MembershipProvider | Windows | UserInfoList,\n}\n/* tslint:enable:no-bitwise */\n\nexport enum RoleType {\n    None = 0,\n    Guest = 1,\n    Reader = 2,\n    Contributor = 3,\n    WebDesigner = 4,\n    Administrator = 5,\n}\n\nexport interface PrincipalInfo {\n    Department: string;\n    DisplayName: string;\n    Email: string;\n    JobTitle: string;\n    LoginName: string;\n    Mobile: string;\n    PrincipalId: number;\n    PrincipalType: PrincipalType;\n    SIPAddress: string;\n}\n\nexport interface DocumentLibraryInformation {\n    AbsoluteUrl?: string;\n    Modified?: Date;\n    ModifiedFriendlyDisplay?: string;\n    ServerRelativeUrl?: string;\n    Title?: string;\n}\n\nexport interface ContextInfo {\n    FormDigestTimeoutSeconds?: number;\n    FormDigestValue?: number;\n    LibraryVersion?: string;\n    SiteFullUrl?: string;\n    SupportedSchemaVersions?: string[];\n    WebFullUrl?: string;\n}\n\nexport interface RenderListData {\n    Row: any[];\n    FirstRow: number;\n    FolderPermissions: string;\n    LastRow: number;\n    FilterLink: string;\n    ForceNoHierarchy: string;\n    HierarchyHasIndention: string;\n}\n\nexport enum PageType {\n    Invalid = -1,\n    DefaultView,\n    NormalView,\n    DialogView,\n    View,\n    DisplayForm,\n    DisplayFormDialog,\n    EditForm,\n    EditFormDialog,\n    NewForm,\n    NewFormDialog,\n    SolutionForm,\n    PAGE_MAXITEMS,\n}\n\nexport interface ListFormData {\n    ContentType?: string;\n    Title?: string;\n    Author?: string;\n    Editor?: string;\n    Created?: Date;\n    Modified: Date;\n    Attachments?: any;\n    ListSchema?: any;\n    FormControlMode?: number;\n    FieldControlModes?: {\n        Title?: number,\n        Author?: number,\n        Editor?: number,\n        Created?: number,\n        Modified?: number,\n        Attachments?: number,\n    };\n    WebAttributes?: {\n        WebUrl?: string,\n        EffectivePresenceEnabled?: boolean,\n        AllowScriptableWebParts?: boolean,\n        PermissionCustomizePages?: boolean,\n        LCID?: number,\n        CurrentUserId?: number,\n    };\n    ItemAttributes?: {\n        Id?: number,\n        FsObjType?: number,\n        ExternalListItem?: boolean,\n        Url?: string,\n        EffectiveBasePermissionsLow?: number,\n        EffectiveBasePermissionsHigh?: number,\n    };\n    ListAttributes?: {\n        Id?: string,\n        BaseType?: number,\n        Direction?: string,\n        ListTemplateType?: number,\n        DefaultItemOpen?: number,\n        EnableVersioning?: boolean,\n    };\n    CSRCustomLayout?: boolean;\n    PostBackRequired?: boolean;\n    PreviousPostBackHandled?: boolean;\n    UploadMode?: boolean;\n    SubmitButtonID?: string;\n    ItemContentTypeName?: string;\n    ItemContentTypeId?: string;\n    JSLinks?: string;\n}\n\nexport enum SharingLinkKind {\n    /**\n     * Uninitialized link\n     */\n    Uninitialized = 0,\n    /**\n     * Direct link to the object being shared\n     */\n    Direct = 1,\n    /**\n     * Organization-shareable link to the object being shared with view permissions\n     */\n    OrganizationView = 2,\n    /**\n     * Organization-shareable link to the object being shared with edit permissions\n     */\n    OrganizationEdit = 3,\n    /**\n     * View only anonymous link\n     */\n    AnonymousView = 4,\n    /**\n     * Read/Write anonymous link\n     */\n    AnonymousEdit = 5,\n    /**\n     * Flexible sharing Link where properties can change without affecting link URL\n     */\n    Flexible = 6,\n}\n\nexport interface ShareObjectOptions {\n    url?: string;\n    loginNames?: string | string[];\n    role: SharingRole;\n    emailData?: SharingEmailData;\n    group?: RoleType;\n    propagateAcl?: boolean;\n    includeAnonymousLinkInEmail?: boolean;\n    useSimplifiedRoles?: boolean;\n}\n\n/**\n * Indicates the role of the sharing link\n */\nexport enum SharingRole {\n    None = 0,\n    View = 1,\n    Edit = 2,\n    Owner = 3,\n}\n\n/**\n * Represents email data.\n */\nexport interface SharingEmailData {\n\n    /**\n     * The e-mail subject.\n     */\n    subject?: string;\n\n    /**\n     * The e-mail body.\n     */\n    body: string;\n}\n\nexport interface ShareLinkSettings {\n    /**\n     * The optional unique identifier of an existing sharing link to be retrieved and updated if necessary.\n     */\n    shareId?: string;\n\n    /**\n     * The kind of the sharing link to be created.\n     */\n    linkKind: SharingLinkKind;\n\n    /**\n     * A date/time string for which the format conforms to the ISO 8601:2004(E) complete representation for calendar date and time of day and\n     * which represents the time and date of expiry for the anonymous link. Both the minutes and hour value must be specified for the\n     * difference between the local and UTC time. Midnight is represented as 00:00:00.\n     */\n    expiration?: string;\n\n    /**\n     * The role to be used for the sharing link. This is required for Flexible links, and ignored for legacy link kinds.\n     */\n    role?: SharingRole;\n\n    /**\n     * Indicates if the sharing link, should support anonymous access. This is required for Flexible links, and ignored for legacy link kinds.\n     */\n    allowAnonymousAccess?: boolean;\n}\n\nexport interface ShareLinkRequest {\n\n    /**\n     * A string of JSON representing users in people picker format. Only needed if an e-mail notification should be sent.\n     */\n    peoplePickerInput?: string;\n\n    /**\n     * Whether to create the link or not if it doesn't exist yet.\n     */\n    createLink: boolean;\n\n    /**\n     * The e-mail data. Only needed if an e-mail notification should be sent.\n     */\n    emailData?: SharingEmailData;\n\n    /**\n     * The settings for the sharing link to be created/updated\n     */\n    settings: ShareLinkSettings;\n}\n\n/**\n * Represents a response for sharing a link\n */\nexport interface ShareLinkResponse {\n    /**\n     * A SharingLinkInfo that represents the sharing link. Will be populated if sharing operation is returning a sharing link.\n     */\n    sharingLinkInfo: SharingLinkInfo;\n}\n\nexport interface SharingLinkInfo {\n\n    AllowsAnonymousAccess: boolean;\n    Created: string;\n    CreatedBy: PrincipalInfo;\n    Expiration: string;\n    IsActive: boolean;\n    IsEditLink: boolean;\n    IsFormsLink: boolean;\n    IsUnhealthy: boolean;\n    LastModified: string;\n    LastModifiedBy: PrincipalInfo;\n    LinkKind: SharingLinkKind;\n    ShareId: string;\n    Url: string;\n}\n\nexport enum SharingOperationStatusCode {\n    /**\n     * The share operation completed without errors.\n     */\n    CompletedSuccessfully = 0,\n    /**\n     * The share operation completed and generated requests for access.\n     */\n    AccessRequestsQueued = 1,\n    /**\n     * The share operation failed as there were no resolved users.\n     */\n    NoResolvedUsers = -1,\n    /**\n     * The share operation failed due to insufficient permissions.\n     */\n    AccessDenied = -2,\n    /**\n     * The share operation failed when attempting a cross site share, which is not supported.\n     */\n    CrossSiteRequestNotSupported = -3,\n    /**\n     * The sharing operation failed due to an unknown error.\n     */\n    UnknowError = -4,\n    /**\n     * The text you typed is too long. Please shorten it.\n     */\n    EmailBodyTooLong = -5,\n    /**\n     * The maximum number of unique scopes in the list has been exceeded.\n     */\n    ListUniqueScopesExceeded = -6,\n    /**\n     * The share operation failed because a sharing capability is disabled in the site.\n     */\n    CapabilityDisabled = -7,\n    /**\n     * The specified object for the share operation is not supported.\n     */\n    ObjectNotSupported = -8,\n    /**\n     * A SharePoint group cannot contain another SharePoint group.\n     */\n    NestedGroupsNotSupported = -9,\n}\n\nexport interface SharingResult {\n\n    /**\n     * The relative URL of a page which can be navigated to, to show permissions.\n     */\n    PermissionsPageRelativeUrl?: string;\n\n    /**\n     * A collection of users which have new pending access requests as a result of sharing.\n     */\n    UsersWithAccessRequests?: any[]; // SPSharingUserCollection\n\n    /**\n     * An enumeration which summarizes the result of the sharing operation.\n     */\n    StatusCode?: SharingOperationStatusCode;\n\n    /**\n     * An error message about the failure if sharing was unsuccessful.\n     */\n    ErrorMessage?: string;\n\n    /**\n     * A list of UserSharingResults from attempting to share a securable with unique permissions.\n     */\n    UniquelyPermissionedUsers?: UserSharingResult[];\n    /**\n     * Groups which were granted permissions.\n     */\n    GroupsSharedWith?: any[]; // SPGroupCollection\n\n    /**\n     * The SharePoint group users were added to, if any were added to a group.\n     */\n    GroupUsersAddedTo?: any; // SPGroup\n\n    /**\n     * A list of users being added to a SharePoint permissions goup\n     */\n    UsersAddedToGroup?: UserSharingResult[];\n\n    /**\n     * A list of SPInvitationCreationResult for external users being invited to have access.\n     */\n    InvitedUsers?: SPInvitationCreationResult[];\n\n    /**\n     * The name of the securable being shared.\n     */\n    Name?: string;\n\n    /**\n     * The url of the securable being shared.\n     */\n    Url?: string;\n\n    /**\n     * IconUrl\n     */\n    IconUrl?: string;\n}\n\nexport interface UserSharingResult {\n    IsUserKnown?: boolean;\n    Status?: boolean;\n    Message?: string;\n    User?: string;\n    DisplayName?: string;\n    Email?: string;\n    CurrentRole?: SharingRole;\n    AllowedRoles?: SharingRole[];\n    InvitationLink?: string;\n}\n\nexport interface SPInvitationCreationResult {\n    Succeeded?: boolean;\n    Email?: string;\n    InvitationLink?: string;\n}\n\nexport interface SharingRecipient {\n    email?: string;\n    alias?: string;\n}\n\nexport interface SharingEntityPermission {\n    /**\n     * The Input Entity provided to the Call.\n     */\n    inputEntity: string;\n    /**\n     * The Resolved Entity after resolving using PeoplePicker API.\n     */\n    resolvedEntity: string;\n    /**\n     * Does the Entity have Access to the Securable Object\n     */\n    hasAccess: boolean;\n    /**\n     * Role of the Entity on ListItem\n     */\n    role: SharingRole;\n}\n\nexport interface SharingInformationRequest {\n    /**\n     * Max Principal's to return.\n     */\n    maxPrincipalsToReturn: number;\n    /**\n     * Supported Features (For future use by Office Client).\n     */\n    clientSupportedFeatures: string;\n}\n\nexport interface ObjectSharingSettings {\n    /**\n     * The URL pointing to the containing SPWeb object\n     */\n    WebUrl: string;\n    /**\n     * The unique ID of the parent list (if applicable)\n     */\n    ListId?: string;\n    /**\n     * The list item ID (if applicable)\n     */\n    ItemId?: string;\n    /**\n     * The object title\n     */\n    ItemName: string;\n    /**\n     * The server relative object URL\n     */\n    ItemUrl: string;\n    /**\n     * Contains information about the sharing state of a shareable object\n     */\n    ObjectSharingInformation: any; // SPObjectSharingInformation\n    /**\n     * Boolean indicating whether the sharing context operates under the access request mode\n     */\n    AccessRequestMode: boolean;\n    /**\n     * Boolean indicating whether the sharing context operates under the permissions only mode\n     * (i.e. adding to a group or hiding the groups dropdown in the SharePoint UI)\n     */\n    PermissionsOnlyMode: boolean;\n    /**\n     * URL of the site from which the shared object inherits permissions\n     */\n    InheritingWebLink: string;\n    /**\n     * Boolean flag denoting if guest users are enabled for the site collection\n     */\n    ShareByEmailEnabled: boolean;\n    /**\n     * Boolean indicating whether the current user is a guest user\n     */\n    IsGuestUser: boolean;\n    /**\n     * Boolean indicating whether the site has the standard \"Editor\" role\n     */\n    HasEditRole: boolean;\n    /**\n     * Boolean indicating whether the site has the standard \"Reader\" role\n     */\n    HasReadRole: boolean;\n    /**\n     * Boolean indicating whether the object to share is a picture library\n     */\n    IsPictureLibrary: boolean;\n    /**\n     * Boolean indicating whether the folder object can be shared\n     */\n    CanShareFolder: boolean;\n    /**\n     * Boolean indicating whether email invitations can be sent\n     */\n    CanSendEmail: boolean;\n    /**\n     * Default share link type\n     */\n    DefaultShareLinkType: SharingLinkKind;\n    /**\n     * Boolean indicating whether the object to share supports ACL propagation\n     */\n    SupportsAclPropagation: boolean;\n    /**\n     * Boolean indicating whether the current user can only share within the tenancy\n     */\n    CanCurrentUserShareInternally: boolean;\n    /**\n     * Boolean indicating whether the current user can share outside the tenancy, by inviting external users\n     */\n    CanCurrentUserShareExternally: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an anonymous View link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an anonymous Edit link\n     */\n    CanCurrentUserManageReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an anonymous Edit link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an anonymous Edit link\n     */\n    CanCurrentUserManageReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an organization View link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveOrganizationReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an organization Edit link\n     */\n    CanCurrentUserManageOrganizationReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an organization Edit link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveOrganizationReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an organization Edit link\n     */\n    CanCurrentUserManageOrganizationReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can make use of Share-By-Link\n     */\n    CanSendLink: boolean;\n    /**\n     * Boolean indicating whether the client logic should warn the user\n     * that they are about to share with external email addresses.\n     */\n    ShowExternalSharingWarning: boolean;\n    /**\n     * A list of SharingPermissionInformation objects that can be used to share\n     */\n    SharingPermissions: any[]; // SPSharingPermissionInformationCollection\n    /**\n     * A dictionary object that lists the display name and the id of\n     * the SharePoint simplified roles (edit, view)\n     */\n    SimplifiedRoles: { [key: string]: string };\n    /**\n     * A dictionary object that lists the display name and the id of the SharePoint groups\n     */\n    GroupsList: { [key: string]: string };\n    /**\n     * A dictionary object that lists the display name and the id of the SharePoint regular roles\n     */\n    Roles: { [key: string]: string };\n    /**\n     * An object containing the SharePoint UI specific sharing settings.\n     */\n    SharePointSettings: any; // SharePointSharingSettings\n    /**\n     * Boolean indicating whether the current user is a site collection administrator\n     */\n    IsUserSiteAdmin: boolean;\n    /**\n     * A value that indicates number of days an anonymous link can be valid before it expires\n     */\n    RequiredAnonymousLinkExpirationInDays: number;\n}\n\nexport interface SharingInformation {\n    /**\n     * External Sharing.\n     */\n    canAddExternalPrincipal?: boolean;\n    /**\n     * Internal Sharing.\n     */\n    canAddInternalPrincipal?: boolean;\n    /**\n     * Can Send Email.\n     */\n    canSendEmail?: boolean;\n    /**\n     * Can Use Simplified Roles present in Roles Enum.\n     */\n    canUseSimplifiedRoles?: boolean;\n    /**\n     * Has Unique Permissions.\n     */\n    hasUniquePermissions?: boolean;\n    /**\n     * Current Users Role on the Item.\n     */\n    currentRole?: SharingRole;\n    /**\n     * Does the User+Item require Approval from Admin for Sharing.\n     */\n    requiresAccessApproval?: boolean;\n    /**\n     * (Owners only)Whether there are pending access requests for the securable object.\n     */\n    hasPendingAccessRequests?: boolean;\n    /**\n     * (Owners only)The link to the access requests page for the securable object, or an empty string if the link is not available.\n     */\n    pendingAccessRequestsLink?: string;\n    /**\n     * sharedObjectType\n     */\n    sharedObjectType?: SPSharedObjectType;\n    /**\n     * Url for the Securable Object (Encoded).\n     */\n    directUrl?: string;\n    /**\n     * Parent Web Url for the Securable Object (Encoded).\n     */\n    webUrl?: string;\n    /**\n     * Default SharingLinkKind.\n     */\n    defaultLinkKind?: SharingLinkKind;\n    /**\n     * Tenant's SharingDomainRestrictionMode.\n     */\n    domainRestrictionMode?: SharingDomainRestrictionMode;\n    /**\n     * Tenant's RestrictedDomains.\n     */\n    RestrictedDomains?: string;\n    /**\n     * Tenant's Anonymous Link Expiration Restriction in Days.\n     */\n    anonymousLinkExpirationRestrictionDays?: number;\n    /**\n     * The PermissionCollection that are on the Securable Object (Princpals & Links)\n     */\n    permissionsInformation?: any; // PermissionCollection\n    /**\n     * PickerSettings used by the PeoplePicker Control.\n     */\n    pickerSettings?: any; // PickerSettings\n}\n\nexport enum SPSharedObjectType {\n    Unknown = 0,\n    File = 1,\n    Folder = 2,\n    Item = 3,\n    List = 4,\n    Web = 5,\n    Max = 6,\n}\n\nexport enum SharingDomainRestrictionMode {\n    None = 0,\n    AllowList = 1,\n    BlockList = 2,\n}\n\nexport interface EmailProperties {\n\n    To: string[];\n    CC?: string[];\n    BCC?: string[];\n    Subject: string;\n    Body: string;\n    AdditionalHeaders?: TypedHash<string>;\n    From?: string;\n}\n\nexport interface WikiPageCreationInformation {\n    /**\n     * The server-relative-url of the wiki page to be created.\n     */\n    ServerRelativeUrl: string;\n\n    /**\n     * The wiki content to be set in the wiki page.\n     */\n    WikiHtmlContent: string;\n}\n\nexport enum RenderListDataOptions {\n    None = 0,\n    ContextInfo = 1,\n    ListData = 2,\n    ListSchema = 4,\n    MenuView = 8,\n    ListContentType = 16,\n    FileSystemItemId = 32,\n    ClientFormSchema = 64,\n    QuickLaunch = 128,\n    Spotlight = 256,\n    Visualization = 512,\n    ViewMetadata = 1024,\n    DisableAutoHyperlink = 2048,\n    EnableMediaTAUrls = 4096,\n    ParentInfo = 8192,\n    PageContextInfo = 16384,\n    ClientSideComponentManifest = 32768,\n}\n\nexport interface RenderListDataParameters {\n    AllowMultipleValueFilterForTaxonomyFields?: boolean;\n    DatesInUtc?: boolean;\n    ExpandGroups?: boolean;\n    FirstGroupOnly?: boolean;\n    FolderServerRelativeUrl?: string;\n    ImageFieldsToTryRewriteToCdnUrls?: string;\n    OverrideViewXml?: string;\n    Paging?: string;\n    RenderOptions?: RenderListDataOptions[] | number;\n    ReplaceGroup?: boolean;\n    ViewXml?: string;\n}\n\nexport interface MenuNode {\n    CustomProperties: any[];\n    FriendlyUrlSegment: string;\n    IsDeleted: boolean;\n    IsHidden: boolean;\n    Key: string;\n    Nodes: MenuNode[];\n    NodeType: number;\n    SimpleUrl: string;\n    Title: string;\n}\n\nexport interface MenuNodeCollection {\n    FriendlyUrlPrefix: string;\n    Nodes: MenuNode[];\n    SimpleUrl: string;\n    SPSitePrefix: string;\n    SPWebPrefix: string;\n    StartingNodeKey: string;\n    StartingNodeTitle: string;\n    Version: Date;\n}\n\nexport enum FieldUserSelectionMode {\n    PeopleAndGroups = 1,\n    PeopleOnly = 0,\n}\n\nexport interface FieldCreationProperties extends TypedHash<string | number | boolean> {\n    DefaultFormula?: string;\n    Description?: string;\n    EnforceUniqueValues?: boolean;\n    FieldTypeKind?: number;\n    Group?: string;\n    Hidden?: boolean;\n    Indexed?: boolean;\n    Required?: boolean;\n    Title?: string;\n    ValidationFormula?: string;\n    ValidationMessage?: string;\n}\n\nexport enum ChoiceFieldFormatType {\n    Dropdown,\n    RadioButtons,\n}\n\n/**\n * Client people picker query parameters\n */\nexport interface ClientPeoplePickerQueryParameters {\n    /**\n     * Gets or sets a value that specifies whether e-mail addresses can be used to perform search.\n     */\n    AllowEmailAddresses?: boolean;\n    /**\n     * Gets or sets a value that specifies whether multiple entities are allowed.\n     */\n    AllowMultipleEntities?: boolean;\n    /**\n     * Gets or sets a value that specifies whether only e-mail addresses can be used to perform search.\n     */\n    AllowOnlyEmailAddresses?: boolean;\n    /**\n     * Gets or sets a value that specifies whether all URL zones are used to perform search.\n     */\n    AllUrlZones?: boolean;\n    /**\n     * Gets or sets a value that specifies claim providers that are used to perform search.\n     */\n    EnabledClaimProviders?: string;\n    /**\n     * Gets or sets a value that specifies whether claims are forced (if yes, multiple results for single entity can be returned).\n     */\n    ForceClaims?: boolean;\n    /**\n     * Gets or sets a value that specifies limit of results returned.\n     */\n    MaximumEntitySuggestions: number;\n    /**\n     * Gets or sets a value that specifies principal sources to perform search.\n     */\n    PrincipalSource?: PrincipalSource;\n    /**\n     * Gets or sets a value that specifies principal types to search for.\n     */\n    PrincipalType?: PrincipalType;\n    /**\n     * Gets or sets a value that specifies additional query settings.\n     */\n    QuerySettings?: PeoplePickerQuerySettings;\n    /**\n     * Gets or sets a value that specifies the term to search for.\n     */\n    QueryString: string;\n    /**\n     * Gets or sets a value that specifies ID of the SharePoint Group that will be used to perform search.\n     */\n    SharePointGroupID?: number;\n    /**\n     * Gets or sets a value that specifies URL zones that are used to perform search.\n     */\n    UrlZone?: UrlZone;\n    /**\n     * Gets or sets a value that specifies whether search is limited to specific URL zone.\n     */\n    UrlZoneSpecified?: boolean;\n    /**\n     * Gets or sets a value that specifies GUID of the Web Application that is used to perform search.\n     */\n    WebApplicationID?: string;\n}\n\n/**\n * People picker query settings\n */\nexport interface PeoplePickerQuerySettings {\n    ExcludeAllUsersOnTenantClaim?: boolean;\n}\n\n/**\n * People picker entity\n */\nexport interface PeoplePickerEntity {\n    Description: string;\n    DisplayText: string;\n    EntityData: PeoplePickerEntityData;\n    EntityType: string;\n    IsResolved: boolean;\n    Key: string;\n    MultipleMatches: PeoplePickerEntityData[];\n    ProviderDisplayName: string;\n    ProviderName: string;\n}\n\n/**\n * People picker entity data\n */\nexport interface PeoplePickerEntityData {\n    AccountName?: string;\n    Department?: string;\n    Email?: string;\n    IsAltSecIdPresent?: string;\n    MobilePhone?: string;\n    ObjectId?: string;\n    OtherMails?: string;\n    PrincipalType?: string;\n    SPGroupID?: string;\n    SPUserID?: string;\n    Title?: string;\n}\n\n/**\n * Specifies the originating zone of a request received.\n */\nexport const enum UrlZone {\n    /**\n     * Specifies the default zone used for requests unless another zone is specified.\n     */\n    DefaultZone,\n    /**\n     * Specifies an intranet zone.\n     */\n    Intranet,\n    /**\n     * Specifies an Internet zone.\n     */\n    Internet,\n    /**\n     * Specifies a custom zone.\n     */\n    Custom,\n    /**\n     * Specifies an extranet zone.\n     */\n    Extranet,\n}\n\nexport interface StorageEntity {\n    Value: string | null;\n    Comment: string | null;\n    Description: string | null;\n}\n\nexport interface LikeData {\n    name: string;\n    loginName: string;\n    id: number;\n    email: string;\n    creationDate: string;\n}\n\nexport interface HubSite {\n    Id: string;\n    Title: string;\n    SiteId: string;\n    TenantInstanceId: string;\n    SiteUrl: string;\n    LogoUrl: string;\n    Description: string;\n    Targets: string;\n}\n\nexport interface HubSiteData {\n    headerEmphasis: string | null;\n    logoUrl: string | null;\n    megaMenuEnabled: boolean;\n    name: string;\n    navigation: NavigationNode[];\n    requiresJoinApproval: boolean;\n    siteDesignId: string;\n    themeKey: string | null;\n    url: string;\n    usesMetadataNavigation: boolean;\n}\n","import { RoleAssignments } from \"./roles\";\nimport { BasePermissions, PermissionKind } from \"./types\";\nimport { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { hOP } from \"@pnp/common\";\n\nexport class SharePointQueryableSecurable extends SharePointQueryableInstance {\n\n    /**\n     * Gets the set of role assignments for this item\n     *\n     */\n    public get roleAssignments(): RoleAssignments {\n        return new RoleAssignments(this);\n    }\n\n    /**\n     * Gets the closest securable up the security hierarchy whose permissions are applied to this list item\n     *\n     */\n    public get firstUniqueAncestorSecurableObject(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FirstUniqueAncestorSecurableObject\");\n    }\n\n    /**\n     * Gets the effective permissions for the user supplied\n     *\n     * @param loginName The claims username for the user (ex: i:0#.f|membership|user@domain.com)\n     */\n    public getUserEffectivePermissions(loginName: string): Promise<BasePermissions> {\n        const q = this.clone(SharePointQueryable, \"getUserEffectivePermissions(@user)\");\n        q.query.set(\"@user\", `'${encodeURIComponent(loginName)}'`);\n        return q.get<any>().then(r => {\n            // handle verbose mode\n            return hOP(r, \"GetUserEffectivePermissions\") ? r.GetUserEffectivePermissions : r;\n        });\n    }\n\n    /**\n     * Gets the effective permissions for the current user\n     */\n    public getCurrentUserEffectivePermissions(): Promise<BasePermissions> {\n        const q = this.clone(SharePointQueryable, \"EffectiveBasePermissions\");\n        return q.get<any>().then(r => {\n            // handle verbose mode\n            return hOP(r, \"EffectiveBasePermissions\") ? r.EffectiveBasePermissions : r;\n        });\n    }\n\n    /**\n     * Breaks the security inheritance at this level optinally copying permissions and clearing subscopes\n     *\n     * @param copyRoleAssignments If true the permissions are copied from the current parent scope\n     * @param clearSubscopes Optional. true to make all child securable objects inherit role assignments from the current object\n     */\n    public breakRoleInheritance(copyRoleAssignments = false, clearSubscopes = false): Promise<any> {\n\n        return this.clone(SharePointQueryableSecurable, `breakroleinheritance(copyroleassignments=${copyRoleAssignments}, clearsubscopes=${clearSubscopes})`).postCore();\n    }\n\n    /**\n     * Removes the local role assignments so that it re-inherit role assignments from the parent object.\n     *\n     */\n    public resetRoleInheritance(): Promise<any> {\n\n        return this.clone(SharePointQueryableSecurable, \"resetroleinheritance\").postCore();\n    }\n\n    /**\n     * Determines if a given user has the appropriate permissions\n     *\n     * @param loginName The user to check\n     * @param permission The permission being checked\n     */\n    public userHasPermissions(loginName: string, permission: PermissionKind): Promise<boolean> {\n\n        return this.getUserEffectivePermissions(loginName).then(perms => {\n\n            return this.hasPermissions(perms, permission);\n        });\n    }\n\n    /**\n     * Determines if the current user has the requested permissions\n     *\n     * @param permission The permission we wish to check\n     */\n    public currentUserHasPermissions(permission: PermissionKind): Promise<boolean> {\n\n        return this.getCurrentUserEffectivePermissions().then(perms => {\n\n            return this.hasPermissions(perms, permission);\n        });\n    }\n\n    /**\n     * Taken from sp.js, checks the supplied permissions against the mask\n     *\n     * @param value The security principal's permissions on the given object\n     * @param perm The permission checked against the value\n     */\n    /* tslint:disable:no-bitwise */\n    public hasPermissions(value: BasePermissions, perm: PermissionKind): boolean {\n\n        if (!perm) {\n            return true;\n        }\n        if (perm === PermissionKind.FullMask) {\n            return (value.High & 32767) === 32767 && value.Low === 65535;\n        }\n\n        perm = perm - 1;\n        let num = 1;\n\n        if (perm >= 0 && perm < 32) {\n            num = num << perm;\n            return 0 !== (value.Low & num);\n        } else if (perm >= 32 && perm < 64) {\n            num = num << perm - 32;\n            return 0 !== (value.High & num);\n        }\n        return false;\n    }\n    /* tslint:enable */\n}\n","import { extend, combine, jsS } from \"@pnp/common\";\nimport { odataUrlFrom } from \"./odata\";\nimport {\n    SharePointQueryable,\n    SharePointQueryableInstance,\n    SharePointQueryableCollection,\n} from \"./sharepointqueryable\";\nimport { SharePointQueryableSecurable } from \"./sharepointqueryablesecurable\";\nimport {\n    RoleType,\n    SharingLinkKind,\n    ShareLinkResponse,\n    SharingRole,\n    SharingEmailData,\n    SharingResult,\n    SharingRecipient,\n    SharingEntityPermission,\n    SharingInformationRequest,\n    ObjectSharingSettings,\n    SharingInformation,\n    ShareObjectOptions,\n} from \"./types\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\n\n/**\n * Internal helper class used to augment classes to include sharing functionality\n */\nexport class SharePointQueryableShareable extends SharePointQueryable {\n\n    /**\n     * Gets a sharing link for the supplied\n     *\n     * @param kind The kind of link to share\n     * @param expiration The optional expiration for this link\n     */\n    public getShareLink(kind: SharingLinkKind, expiration: Date = null): Promise<ShareLinkResponse> {\n\n        // date needs to be an ISO string or null\n        const expString = expiration !== null ? expiration.toISOString() : null;\n\n        // clone using the factory and send the request\n        return this.clone(SharePointQueryableShareable, \"shareLink\").postCore<ShareLinkResponse>({\n            body: jsS({\n                request: {\n                    createLink: true,\n                    emailData: null,\n                    settings: {\n                        expiration: expString,\n                        linkKind: kind,\n                    },\n                },\n            }),\n        });\n    }\n\n    /**\n     * Shares this instance with the supplied users\n     *\n     * @param loginNames Resolved login names to share\n     * @param role The role\n     * @param requireSignin True to require the user is authenticated, otherwise false\n     * @param propagateAcl True to apply this share to all children\n     * @param emailData If supplied an email will be sent with the indicated properties\n     */\n    public shareWith(loginNames: string | string[], role: SharingRole, requireSignin = false, propagateAcl = false, emailData?: SharingEmailData): Promise<SharingResult> {\n\n        // handle the multiple input types\n        if (!Array.isArray(loginNames)) {\n            loginNames = [loginNames];\n        }\n\n        const userStr = jsS(loginNames.map(login => { return { Key: login }; }));\n        const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\n\n        // start by looking up the role definition id we need to set the roleValue\n        // remove need to reference Web here, which created a circular build issue\n        const w = new SharePointQueryableCollection(\"_api/web\", \"roledefinitions\");\n        return w.select(\"Id\").filter(`RoleTypeKind eq ${roleFilter}`).get().then((def: { Id: number }[]) => {\n\n            if (!Array.isArray(def) || def.length < 1) {\n                throw Error(`Could not locate a role defintion with RoleTypeKind ${roleFilter}`);\n            }\n\n            let postBody = {\n                includeAnonymousLinkInEmail: requireSignin,\n                peoplePickerInput: userStr,\n                propagateAcl: propagateAcl,\n                roleValue: `role:${def[0].Id}`,\n                useSimplifiedRoles: true,\n            };\n\n            if (emailData !== undefined) {\n\n                postBody = extend(postBody, {\n                    emailBody: emailData.body,\n                    emailSubject: emailData.subject !== undefined ? emailData.subject : \"\",\n                    sendEmail: true,\n                });\n            }\n\n            return this.clone(SharePointQueryableShareable, \"shareObject\").postCore<SharingResult>({\n                body: jsS(postBody),\n            });\n        });\n    }\n\n    /**\n     * Shares an object based on the supplied options\n     *\n     * @param options The set of options to send to the ShareObject method\n     * @param bypass If true any processing is skipped and the options are sent directly to the ShareObject method\n     */\n    public shareObject(options: ShareObjectOptions, bypass = false): Promise<SharingResult> {\n\n        if (bypass) {\n\n            // if the bypass flag is set send the supplied parameters directly to the service\n            return this.sendShareObjectRequest(options);\n        }\n\n        // extend our options with some defaults\n        options = extend(options, {\n            group: null,\n            includeAnonymousLinkInEmail: false,\n            propagateAcl: false,\n            useSimplifiedRoles: true,\n        }, true);\n\n        return this.getRoleValue(options.role, options.group).then(roleValue => {\n\n            // handle the multiple input types\n            if (!Array.isArray(options.loginNames)) {\n                options.loginNames = [options.loginNames];\n            }\n\n            const userStr = jsS(options.loginNames.map(login => { return { Key: login }; }));\n\n            let postBody = {\n                peoplePickerInput: userStr,\n                roleValue: roleValue,\n                url: options.url,\n            };\n\n            if (options.emailData !== undefined && options.emailData !== null) {\n\n                postBody = extend(postBody, {\n                    emailBody: options.emailData.body,\n                    emailSubject: options.emailData.subject !== undefined ? options.emailData.subject : \"Shared with you.\",\n                    sendEmail: true,\n                });\n            }\n\n            return this.sendShareObjectRequest(postBody);\n        });\n    }\n\n    /**\n     * Calls the web's UnshareObject method\n     *\n     * @param url The url of the object to unshare\n     */\n    public unshareObjectWeb(url: string): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, \"unshareObject\").postCore<SharingResult>({\n            body: jsS({\n                url: url,\n            }),\n        });\n    }\n\n    /**\n     * Checks Permissions on the list of Users and returns back role the users have on the Item.\n     *\n     * @param recipients The array of Entities for which Permissions need to be checked.\n     */\n    public checkPermissions(recipients: SharingRecipient[]): Promise<SharingEntityPermission[]> {\n\n        return this.clone(SharePointQueryableShareable, \"checkPermissions\").postCore<SharingEntityPermission[]>({\n            body: jsS({\n                recipients: recipients,\n            }),\n        });\n    }\n\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     * @param expands Expand more fields.\n     * \n     */\n    public getSharingInformation(request: SharingInformationRequest = null, expands?: string[]): Promise<SharingInformation> {\n\n        const q = this.clone(SharePointQueryableShareable, \"getSharingInformation\");\n        return q.expand.apply(q, expands).postCore({\n            body: jsS({\n                request: request,\n            }),\n        });\n    }\n\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    public getObjectSharingSettings(useSimplifiedRoles = true): Promise<ObjectSharingSettings> {\n\n        return this.clone(SharePointQueryableShareable, \"getObjectSharingSettings\").postCore<ObjectSharingSettings>({\n            body: jsS({\n                useSimplifiedRoles: useSimplifiedRoles,\n            }),\n        });\n    }\n\n    /**\n     * Unshares this object\n     */\n    public unshareObject(): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, \"unshareObject\").postCore<SharingResult>();\n    }\n\n    /**\n     * Deletes a link by type\n     *\n     * @param kind Deletes a sharing link by the kind of link\n     */\n    public deleteLinkByKind(kind: SharingLinkKind): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, \"deleteLinkByKind\").postCore({\n            body: jsS({ linkKind: kind }),\n        });\n    }\n\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId\n     */\n    public unshareLink(kind: SharingLinkKind, shareId = \"00000000-0000-0000-0000-000000000000\"): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, \"unshareLink\").postCore({\n            body: jsS({ linkKind: kind, shareId: shareId }),\n        });\n    }\n\n    /**\n     * Calculates the roleValue string used in the sharing query\n     *\n     * @param role The Sharing Role\n     * @param group The Group type\n     */\n    protected getRoleValue(role: SharingRole, group: RoleType): Promise<string> {\n\n        // we will give group precedence, because we had to make a choice\n        if (group !== undefined && group !== null) {\n\n            switch (group) {\n                case RoleType.Contributor:\n                    // remove need to reference Web here, which created a circular build issue\n                    const memberGroup = new SharePointQueryableInstance(\"_api/web\", \"associatedmembergroup\");\n                    return memberGroup.select(\"Id\").get<{ Id: number }>().then(g => `group: ${g.Id}`);\n                case RoleType.Reader:\n                case RoleType.Guest:\n                    // remove need to reference Web here, which created a circular build issue\n                    const visitorGroup = new SharePointQueryableInstance(\"_api/web\", \"associatedvisitorgroup\");\n                    return visitorGroup.select(\"Id\").get<{ Id: number }>().then(g => `group: ${g.Id}`);\n                default:\n                    throw Error(\"Could not determine role value for supplied value. Contributor, Reader, and Guest are supported\");\n            }\n        } else {\n\n            const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\n            // remove need to reference Web here, which created a circular build issue\n            const roleDefs = new SharePointQueryableCollection(\"_api/web\", \"roledefinitions\");\n            return roleDefs.select(\"Id\").top(1).filter(`RoleTypeKind eq ${roleFilter}`).get<{ Id: number }[]>().then(def => {\n                if (def.length < 1) {\n                    throw Error(\"Could not locate associated role definition for supplied role. Edit and View are supported\");\n                }\n                return `role: ${def[0].Id}`;\n            });\n        }\n    }\n\n    private getShareObjectWeb(candidate: string): Promise<SharePointQueryableInstance> {\n        return Promise.resolve(new SharePointQueryableInstance(extractWebUrl(candidate), \"/_api/SP.Web.ShareObject\"));\n    }\n\n    private sendShareObjectRequest(options: any): Promise<SharingResult> {\n\n        return this.getShareObjectWeb(this.toUrl()).then(web => {\n\n            return web.expand(\"UsersWithAccessRequests\", \"GroupsSharedWith\").as(SharePointQueryableShareable).postCore({\n                body: jsS(options),\n            });\n        });\n    }\n}\n\nexport class SharePointQueryableShareableWeb extends SharePointQueryableSecurable {\n\n    /**\n     * Shares this web with the supplied users\n     * @param loginNames The resolved login names to share\n     * @param role The role to share this web\n     * @param emailData Optional email data\n     */\n    public shareWith(loginNames: string | string[], role: SharingRole = SharingRole.View, emailData?: SharingEmailData): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n        // remove need to reference Web here, which created a circular build issue\n        const web = new SharePointQueryableInstance(extractWebUrl(this.toUrl()), \"/_api/web/url\");\n        return web.get().then((url: string) => {\n\n            dependency();\n\n            return this.shareObject(combine(url, \"/_layouts/15/aclinv.aspx?forSharing=1&mbypass=1\"), loginNames, role, emailData);\n        });\n    }\n\n    /**\n     * Provides direct access to the static web.ShareObject method\n     *\n     * @param url The url to share\n     * @param loginNames Resolved loginnames string[] of a single login name string\n     * @param roleValue Role value\n     * @param emailData Optional email data\n     * @param groupId Optional group id\n     * @param propagateAcl\n     * @param includeAnonymousLinkInEmail\n     * @param useSimplifiedRoles\n     */\n    public shareObject(url: string,\n        loginNames: string | string[],\n        role: SharingRole,\n        emailData?: SharingEmailData,\n        group?: RoleType,\n        propagateAcl = false,\n        includeAnonymousLinkInEmail = false,\n        useSimplifiedRoles = true): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, null).shareObject({\n            emailData: emailData,\n            group: group,\n            includeAnonymousLinkInEmail: includeAnonymousLinkInEmail,\n            loginNames: loginNames,\n            propagateAcl: propagateAcl,\n            role: role,\n            url: url,\n            useSimplifiedRoles: useSimplifiedRoles,\n        });\n    }\n\n    /**\n     * Supplies a method to pass any set of arguments to ShareObject\n     *\n     * @param options The set of options to send to ShareObject\n     */\n    public shareObjectRaw(options: any): Promise<SharingResult> {\n        return this.clone(SharePointQueryableShareable, null).shareObject(options, true);\n    }\n\n    /**\n     * Unshares the object\n     *\n     * @param url The url of the object to stop sharing\n     */\n    public unshareObject(url: string): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, null).unshareObjectWeb(url);\n    }\n}\n\nexport class SharePointQueryableShareableItem extends SharePointQueryableSecurable {\n\n    /**\n     * Gets a link suitable for sharing for this item\n     *\n     * @param kind The type of link to share\n     * @param expiration The optional expiration date\n     */\n    public getShareLink(kind: SharingLinkKind = SharingLinkKind.OrganizationView, expiration: Date = null): Promise<ShareLinkResponse> {\n        return this.clone(SharePointQueryableShareable, null).getShareLink(kind, expiration);\n    }\n\n    /**\n     * Shares this item with one or more users\n     *\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\n     * @param role The role (View | Edit) applied to the share\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n     */\n    public shareWith(loginNames: string | string[], role: SharingRole = SharingRole.View, requireSignin = false, emailData?: SharingEmailData): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, null).shareWith(loginNames, role, requireSignin, false, emailData);\n    }\n\n    /**\n     * Checks Permissions on the list of Users and returns back role the users have on the Item.\n     *\n     * @param recipients The array of Entities for which Permissions need to be checked.\n     */\n    public checkSharingPermissions(recipients: SharingRecipient[]): Promise<SharingEntityPermission[]> {\n\n        return this.clone(SharePointQueryableShareable, null).checkPermissions(recipients);\n    }\n\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     * @param expands Expand more fields.\n     * \n     */\n    public getSharingInformation(request: SharingInformationRequest = null, expands?: string[]): Promise<SharingInformation> {\n\n        return this.clone(SharePointQueryableShareable, null).getSharingInformation(request, expands);\n    }\n\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    public getObjectSharingSettings(useSimplifiedRoles = true): Promise<ObjectSharingSettings> {\n\n        return this.clone(SharePointQueryableShareable, null).getObjectSharingSettings(useSimplifiedRoles);\n    }\n\n    /**\n     * Unshare this item\n     */\n    public unshare(): Promise<SharingResult> {\n        return this.clone(SharePointQueryableShareable, null).unshareObject();\n    }\n\n    /**\n     * Deletes a sharing link by kind\n     *\n     * @param kind Deletes a sharing link by the kind of link\n     */\n    public deleteSharingLinkByKind(kind: SharingLinkKind): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, null).deleteLinkByKind(kind);\n    }\n\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId\n     */\n    public unshareLink(kind: SharingLinkKind, shareId?: string): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, null).unshareLink(kind, shareId);\n    }\n}\n\nexport class FileFolderShared extends SharePointQueryableInstance {\n    /**\n     * Gets a link suitable for sharing\n     *\n     * @param kind The kind of link to get\n     * @param expiration Optional, an expiration for this link\n     */\n    public getShareLink(kind: SharingLinkKind = SharingLinkKind.OrganizationView, expiration: Date = null): Promise<ShareLinkResponse> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.getShareLink(kind, expiration);\n        });\n    }\n\n    /**\n         * Checks Permissions on the list of Users and returns back role the users have on the Item.\n         *\n         * @param recipients The array of Entities for which Permissions need to be checked.\n         */\n    public checkSharingPermissions(recipients: SharingRecipient[]): Promise<SharingEntityPermission[]> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.checkPermissions(recipients);\n        });\n    }\n\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     * @param expands Expand more fields.\n     * \n     */\n    public getSharingInformation(request: SharingInformationRequest = null, expands?: string[]): Promise<SharingInformation> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.getSharingInformation(request, expands);\n        });\n    }\n\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    public getObjectSharingSettings(useSimplifiedRoles = true): Promise<ObjectSharingSettings> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.getObjectSharingSettings(useSimplifiedRoles);\n        });\n    }\n\n    /**\n     * Unshare this item\n     */\n    public unshare(): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.unshareObject();\n        });\n    }\n\n    /**\n     * Deletes a sharing link by the kind of link\n     *\n     * @param kind The kind of link to be deleted.\n     */\n    public deleteSharingLinkByKind(kind: SharingLinkKind): Promise<void> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.deleteLinkByKind(kind);\n        });\n    }\n\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId The share id to delete\n     */\n    public unshareLink(kind: SharingLinkKind, shareId?: string): Promise<void> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.unshareLink(kind, shareId);\n        });\n    }\n\n    /**\n     * For files and folders we need to use the associated item end point\n     */\n    protected getShareable(): Promise<SharePointQueryableShareable> {\n\n        // sharing only works on the item end point, not the file one - so we create a folder instance with the item url internally\n        return this.clone(SharePointQueryableShareableFile, \"listItemAllFields\", false).select(\"odata.id\").get().then(d => {\n\n            let shareable = new SharePointQueryableShareable(odataUrlFrom(d));\n\n            // we need to handle batching\n            if (this.hasBatch) {\n                shareable = shareable.inBatch(this.batch);\n            }\n\n            return shareable;\n        });\n    }\n}\n\nexport class SharePointQueryableShareableFile extends FileFolderShared {\n\n    /**\n     * Shares this item with one or more users\n     *\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\n     * @param role The role (View | Edit) applied to the share\n     * @param shareEverything Share everything in this folder, even items with unique permissions.\n     * @param requireSignin If true the user must signin to view link, otherwise anyone with the link can access the resource\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n     */\n    public shareWith(loginNames: string | string[],\n        role: SharingRole = SharingRole.View,\n        requireSignin = false,\n        emailData?: SharingEmailData): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.shareWith(loginNames, role, requireSignin, false, emailData);\n        });\n    }\n}\n\nexport class SharePointQueryableShareableFolder extends FileFolderShared {\n\n    /**\n     * Shares this item with one or more users\n     *\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\n     * @param role The role (View | Edit) applied to the share\n     * @param shareEverything Share everything in this folder, even items with unique permissions.\n     * @param requireSignin If true the user must signin to view link, otherwise anyone with the link can access the resource\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n     */\n    public shareWith(loginNames: string | string[],\n        role: SharingRole = SharingRole.View,\n        requireSignin = false,\n        shareEverything = false,\n        emailData?: SharingEmailData): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.shareWith(loginNames, role, requireSignin, shareEverything, emailData);\n        });\n    }\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { jsS } from \"@pnp/common\";\n\nexport class LimitedWebPartManager extends SharePointQueryable {\n\n    /**\n     * Gets the set of web part definitions contained by this web part manager\n     *\n     */\n    public get webparts(): WebPartDefinitions {\n\n        return new WebPartDefinitions(this, \"webparts\");\n    }\n\n    /**\n     * Exports a webpart definition\n     *\n     * @param id the GUID id of the definition to export\n     */\n    public export(id: string): Promise<string> {\n\n        return this.clone(LimitedWebPartManager, \"ExportWebPart\").postCore({\n            body: jsS({ webPartId: id }),\n        });\n    }\n\n    /**\n     * Imports a webpart\n     *\n     * @param xml webpart definition which must be valid XML in the .dwp or .webpart format\n     */\n    public import(xml: string): Promise<any> {\n\n        return this.clone(LimitedWebPartManager, \"ImportWebPart\").postCore({\n            body: jsS({ webPartXml: xml }),\n        });\n    }\n}\n\nexport class WebPartDefinitions extends SharePointQueryableCollection {\n\n    /**\n     * Gets a web part definition from the collection by id\n     *\n     * @param id The storage ID of the SPWebPartDefinition to retrieve\n     */\n    public getById(id: string): WebPartDefinition {\n        return new WebPartDefinition(this, `getbyid('${id}')`);\n    }\n\n    /**\n     * Gets a web part definition from the collection by storage id\n     *\n     * @param id The WebPart.ID of the SPWebPartDefinition to retrieve\n     */\n    public getByControlId(id: string): WebPartDefinition {\n\n        return new WebPartDefinition(this, `getByControlId('${id}')`);\n    }\n}\n\nexport class WebPartDefinition extends SharePointQueryableInstance {\n\n    /**\n     * Gets the webpart information associated with this definition\n     */\n    public get webpart(): WebPart {\n\n        return new WebPart(this);\n    }\n\n    /**\n     * Saves changes to the Web Part made using other properties and methods on the SPWebPartDefinition object\n     */\n    public saveChanges(): Promise<any> {\n\n        return this.clone(WebPartDefinition, \"SaveWebPartChanges\").postCore();\n    }\n\n    /**\n     * Moves the Web Part to a different location on a Web Part Page\n     *\n     * @param zoneId The ID of the Web Part Zone to which to move the Web Part\n     * @param zoneIndex A Web Part zone index that specifies the position at which the Web Part is to be moved within the destination Web Part zone\n     */\n    public moveTo(zoneId: string, zoneIndex: number): Promise<void> {\n\n        return this.clone(WebPartDefinition, `MoveWebPartTo(zoneID='${zoneId}', zoneIndex=${zoneIndex})`).postCore();\n    }\n\n    /**\n     * Closes the Web Part. If the Web Part is already closed, this method does nothing\n     */\n    public close(): Promise<void> {\n\n        return this.clone(WebPartDefinition, \"CloseWebPart\").postCore();\n    }\n\n    /**\n     * Opens the Web Part. If the Web Part is already closed, this method does nothing\n     */\n    public open(): Promise<void> {\n\n        return this.clone(WebPartDefinition, \"OpenWebPart\").postCore();\n\n    }\n\n    /**\n     * Removes a webpart from a page, all settings will be lost\n     */\n    public delete(): Promise<void> {\n\n        return this.clone(WebPartDefinition, \"DeleteWebPart\").postCore();\n    }\n}\n\n@defaultPath(\"webpart\")\nexport class WebPart extends SharePointQueryableInstance { }\n","import { extend, TypedHash, jsS, isUrlAbsolute } from \"@pnp/common\";\nimport { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { SharePointQueryableShareableFolder } from \"./sharepointqueryableshareable\";\nimport { Files } from \"./files\";\nimport { odataUrlFrom } from \"./odata\";\nimport { Item } from \"./items\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\n\n/**\n * Describes a collection of Folder objects\n *\n */\n@defaultPath(\"folders\")\nexport class Folders extends SharePointQueryableCollection {\n\n    /**\n     * Gets a folder by folder name\n     *\n     */\n    public getByName(name: string): Folder {\n        const f = new Folder(this);\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Adds a new folder to the current folder (relative) or any folder (absolute)\n     *\n     * @param url The relative or absolute url where the new folder will be created. Urls starting with a forward slash are absolute.\n     * @returns The new Folder and the raw response.\n     */\n    public add(url: string): Promise<FolderAddResult> {\n\n        return this.clone(Folders, `add('${url}')`).postCore().then((data) => {\n            return {\n                data,\n                folder: this.getByName(url),\n            };\n        });\n    }\n\n    /**\n     * Adds a new folder by path and should be prefered over add\n     * \n     * @param serverRelativeUrl The server relative url of the new folder to create\n     * @param overwrite True to overwrite an existing folder, default false\n     */\n    public addUsingPath(serverRelativeUrl: string, overwrite = false): Promise<FolderAddResult> {\n\n        return this.clone(Folders, `addUsingPath(DecodedUrl='${serverRelativeUrl}',overwrite=${overwrite})`).postCore().then((data) => {\n\n            return {\n                data,\n                folder: new Folder(extractWebUrl(this.toUrl()), `_api/web/getFolderByServerRelativePath(decodedUrl='${serverRelativeUrl}')`),\n            };\n        });\n    }\n}\n\n/**\n * Describes a single Folder instance\n *\n */\nexport class Folder extends SharePointQueryableShareableFolder {\n\n    /**\n     * Specifies the sequence in which content types are displayed.\n     *\n     */\n    public get contentTypeOrder(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"contentTypeOrder\");\n    }\n\n    /**\n     * Gets this folder's files\n     *\n     */\n    public get files(): Files {\n        return new Files(this);\n    }\n\n    /**\n     * Gets this folder's sub folders\n     *\n     */\n    public get folders(): Folders {\n        return new Folders(this);\n    }\n\n    /**\n     * Gets this folder's list item field values\n     *\n     */\n    public get listItemAllFields(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"listItemAllFields\");\n    }\n\n    /**\n     * Gets the parent folder, if available\n     *\n     */\n    public get parentFolder(): Folder {\n        return new Folder(this, \"parentFolder\");\n    }\n\n    /**\n     * Gets this folder's properties\n     *\n     */\n    public get properties(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"properties\");\n    }\n\n    /**\n     * Gets this folder's server relative url\n     *\n     */\n    public get serverRelativeUrl(): SharePointQueryable {\n        return new SharePointQueryable(this, \"serverRelativeUrl\");\n    }\n\n    /**\n     * Gets a value that specifies the content type order.\n     *\n     */\n    public get uniqueContentTypeOrder(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"uniqueContentTypeOrder\");\n    }\n\n    public update = this._update<FolderUpdateResult, TypedHash<any>>(\"SP.Folder\", data => ({ data, folder: this }));\n\n    /**\n    * Delete this folder\n    *\n    * @param eTag Value used in the IF-Match header, by default \"*\"\n    */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.clone(Folder, null).postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Moves the folder to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(Folder, \"recycle\").postCore();\n    }\n\n    /**\n     * Gets the associated list item for this folder, loading the default properties\n     */\n    public getItem<T>(...selects: string[]): Promise<Item & T> {\n\n        const q = this.listItemAllFields;\n        return q.select.apply(q, selects).get().then((d: any) => {\n\n            return extend(new Item(odataUrlFrom(d)), d);\n        });\n    }\n\n    /**\n     * Moves a folder to destination path\n     *\n     * @param destUrl Absolute or relative URL of the destination path\n     */\n    public moveTo(destUrl: string): Promise<void> {\n        return this.select(\"ServerRelativeUrl\").get().then(({ ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl }) => {\n            const webBaseUrl = extractWebUrl(absoluteUrl);\n            const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\n            const f = new Folder(webBaseUrl, \"/_api/SP.MoveCopyUtil.MoveFolder()\");\n            return f.postCore({\n                body: jsS({\n                    destUrl: isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`,\n                    srcUrl: `${hostUrl}${srcUrl}`,\n                }),\n            });\n        });\n    }\n\n    /**\n     * Copies a folder to destination path\n     *\n     * @param destUrl Absolute or relative URL of the destination path\n     */\n    public copyTo(destUrl: string): Promise<void> {\n        return this.select(\"ServerRelativeUrl\").get().then(({ ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl }) => {\n            const webBaseUrl = extractWebUrl(absoluteUrl);\n            const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\n            const f = new Folder(webBaseUrl, \"/_api/SP.MoveCopyUtil.CopyFolder()\");\n            return f.postCore({\n                body: jsS({\n                    destUrl: isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`,\n                    srcUrl: `${hostUrl}${srcUrl}`,\n                }),\n            });\n        });\n    }\n}\n\nexport interface FolderAddResult {\n    folder: Folder;\n    data: any;\n}\n\nexport interface FolderUpdateResult {\n    folder: Folder;\n    data: any;\n}\n","import { TypedHash, jsS } from \"@pnp/common\";\nimport { SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { metadata } from \"./utils/metadata\";\n\n/**\n * Describes a collection of content types\n *\n */\n@defaultPath(\"contenttypes\")\nexport class ContentTypes extends SharePointQueryableCollection {\n\n    /**\n     * Adds an existing contenttype to a content type collection\n     *\n     * @param contentTypeId in the following format, for example: 0x010102\n     */\n    public addAvailableContentType(contentTypeId: string): Promise<ContentTypeAddResult> {\n\n        const postBody: string = jsS({\n            \"contentTypeId\": contentTypeId,\n        });\n\n        return this.clone(ContentTypes, \"addAvailableContentType\").postCore<{ id: string }>({ body: postBody }).then((data) => {\n            return {\n                contentType: this.getById(data.id),\n                data: data,\n            };\n        });\n    }\n\n    /**\t\n     * Gets a ContentType by content type id\t\n     */\n    public getById(id: string): ContentType {\n        const ct: ContentType = new ContentType(this);\n        ct.concat(`('${id}')`);\n        return ct;\n    }\n\n    /**\n     * Adds a new content type to the collection\n     *\n     * @param id The desired content type id for the new content type (also determines the parent content type)\n     * @param name The name of the content type\n     * @param description The description of the content type\n     * @param group The group in which to add the content type\n     * @param additionalSettings Any additional settings to provide when creating the content type\n     *\n     */\n    public add(\n        id: string,\n        name: string,\n        description = \"\",\n        group = \"Custom Content Types\",\n        additionalSettings: TypedHash<string | number | boolean> = {}): Promise<ContentTypeAddResult> {\n\n        const postBody = jsS(Object.assign(metadata(\"SP.ContentType\"), {\n            \"Description\": description,\n            \"Group\": group,\n            \"Id\": { \"StringValue\": id },\n            \"Name\": name,\n        }, additionalSettings));\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return { contentType: this.getById(data.id), data: data };\n        });\n    }\n}\n\n/**\n * Describes a single ContentType instance\n *\n */\nexport class ContentType extends SharePointQueryableInstance {\n\n    /**\n     * Gets the column (also known as field) references in the content type.\n    */\n    public get fieldLinks(): FieldLinks {\n        return new FieldLinks(this);\n    }\n\n    /**\n     * Gets a value that specifies the collection of fields for the content type.\n     */\n    public get fields(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"fields\");\n    }\n\n    /**\n     * Gets the parent content type of the content type.\n     */\n    public get parent(): ContentType {\n        return new ContentType(this, \"parent\");\n    }\n\n    /**\n     * Gets a value that specifies the collection of workflow associations for the content type.\n     */\n    public get workflowAssociations(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"workflowAssociations\");\n    }\n\n    /**\n     * Delete this content type\n     */\n    public delete = this._delete;\n}\n\nexport interface ContentTypeAddResult {\n    contentType: ContentType;\n    data: any;\n}\n\n/**\n * Represents a collection of field link instances\n */\n@defaultPath(\"fieldlinks\")\nexport class FieldLinks extends SharePointQueryableCollection {\n    /**\t\n     * Gets a FieldLink by GUID id\t\n     *\t\n     * @param id The GUID id of the field link\t\n     */\n    public getById(id: string) {\n        const fl = new FieldLink(this);\n        fl.concat(`(guid'${id}')`);\n        return fl;\n    }\n}\n\n/**\n * Represents a field link instance\n */\nexport class FieldLink extends SharePointQueryableInstance { }\n","import { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { TextParser, BlobParser, JSONParser, BufferParser, ODataParser } from \"@pnp/odata\";\n\nexport interface AttachmentFileInfo {\n    name: string;\n    content: string | Blob | ArrayBuffer;\n}\n\n/**\n * Describes a collection of Item objects\n *\n */\n@defaultPath(\"AttachmentFiles\")\nexport class AttachmentFiles extends SharePointQueryableCollection {\n\n    /**\n     * Gets a Attachment File by filename\n     *\n     * @param name The name of the file, including extension.\n     */\n    public getByName(name: string): AttachmentFile {\n        const f = new AttachmentFile(this);\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Adds a new attachment to the collection. Not supported for batching.\n     *\n     * @param name The name of the file, including extension.\n     * @param content The Base64 file content.\n     */\n    public add(name: string, content: string | Blob | ArrayBuffer): Promise<AttachmentFileAddResult> {\n        return this.clone(AttachmentFiles, `add(FileName='${name}')`, false).postCore({\n            body: content,\n        }).then((response) => {\n            return {\n                data: response,\n                file: this.getByName(name),\n            };\n        });\n    }\n\n    /**\n     * Adds multiple new attachment to the collection. Not supported for batching.\n     *\n     * @param files The collection of files to add\n     */\n    public addMultiple(files: AttachmentFileInfo[]): Promise<void> {\n\n        // add the files in series so we don't get update conflicts\n        return files.reduce((chain, file) => chain.then(() => this.clone(AttachmentFiles, `add(FileName='${file.name}')`, false).postCore({\n            body: file.content,\n        })), Promise.resolve());\n    }\n\n    /**\n     * Delete multiple attachments from the collection. Not supported for batching.\n     *\n     * @param files The collection of files to delete\n     */\n    public deleteMultiple(...files: string[]): Promise<void> {\n        return files.reduce((chain, file) => chain.then(() => this.getByName(file).delete()), Promise.resolve());\n    }\n\n    /**\n     * Delete multiple attachments from the collection and send to recycle bin. Not supported for batching.\n     *\n     * @param files The collection of files to be deleted and sent to recycle bin\n     */\n    public recycleMultiple(...files: string[]): Promise<void> {\n        return files.reduce((chain, file) => chain.then(() => this.getByName(file).recycle()), Promise.resolve());\n    }\n}\n\n/**\n * Describes a single attachment file instance\n *\n */\nexport class AttachmentFile extends SharePointQueryableInstance {\n\n    public delete = this._deleteWithETag;\n\n    /**\n     * Gets the contents of the file as text\n     *\n     */\n    public getText(): Promise<string> {\n        return this.getParsed(new TextParser());\n    }\n\n    /**\n     * Gets the contents of the file as a blob, does not work in Node.js\n     *\n     */\n    public getBlob(): Promise<Blob> {\n        return this.getParsed(new BlobParser());\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n        return this.getParsed(new BufferParser());\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\n     */\n    public getJSON(): Promise<any> {\n        return this.getParsed(new JSONParser());\n    }\n\n    /**\n     * Sets the content of a file. Not supported for batching\n     *\n     * @param content The value to set for the file contents\n     */\n    public setContent(content: string | ArrayBuffer | Blob): Promise<AttachmentFile> {\n\n        return this.clone(AttachmentFile, \"$value\", false).postCore({\n            body: content,\n            headers: {\n                \"X-HTTP-Method\": \"PUT\",\n            },\n        }).then(_ => new AttachmentFile(this));\n    }\n\n    /**\n     * Delete this attachment file and send it to recycle bin\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public recycle(eTag = \"*\"): Promise<void> {\n        return this.clone(AttachmentFile, \"recycleObject\").postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    // /**\n    //  * Delete this attachment file\n    //  *\n    //  * @param eTag Value used in the IF-Match header, by default \"*\"\n    //  */\n    // public delete(eTag = \"*\"): Promise<void> {\n    //     return this.postCore({\n    //         headers: {\n    //             \"IF-Match\": eTag,\n    //             \"X-HTTP-Method\": \"DELETE\",\n    //         },\n    //     });\n    // }\n\n    private getParsed<T>(parser: ODataParser<T>): Promise<T> {\n        return this.clone(AttachmentFile, \"$value\", false).get(parser);\n    }\n}\n\nexport interface AttachmentFileAddResult {\n    file: AttachmentFile;\n    data: any;\n}\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { TypedHash, jsS } from \"@pnp/common\";\nimport { metadata } from \"./utils/metadata\";\n\n/**\n * Describes the views available in the current context\n *\n */\n@defaultPath(\"views\")\nexport class Views extends SharePointQueryableCollection {\n\n    /**\t  \n     * Gets a view by guid id\t    \n     *\t   \n     * @param id The GUID id of the view\t    \n     */\n    public getById(id: string): View {\n        const v = new View(this);\n        v.concat(`('${id}')`);\n        return v;\n    }\n\n    /**\n     * Gets a view by title (case-sensitive)\n     *\n     * @param title The case-sensitive title of the view\n     */\n    public getByTitle(title: string): View {\n        return new View(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Adds a new view to the collection\n     *\n     * @param title The new views's title\n     * @param personalView True if this is a personal view, otherwise false, default = false\n     * @param additionalSettings Will be passed as part of the view creation body\n     */\n    public add(title: string, personalView = false, additionalSettings: TypedHash<any> = {}): Promise<ViewAddResult> {\n\n        const postBody = jsS(Object.assign(metadata(\"SP.View\"), {\n            \"PersonalView\": personalView,\n            \"Title\": title,\n        }, additionalSettings));\n\n        return this.clone(Views, null).postCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                view: this.getById(data.Id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a single View instance\n *\n */\nexport class View extends SharePointQueryableInstance {\n\n    public get fields(): ViewFields {\n        return new ViewFields(this);\n    }\n\n    /**\n     * Updates this view intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the view\n     */\n    public update = this._update<ViewUpdateResult, TypedHash<any>>(\"SP.View\", data => ({ data, view: this }));\n\n    /**\n     * Delete this view\n     *\n     */\n    public delete = this._delete;\n\n    /**\n     * Returns the list view as HTML.\n     *\n     */\n    public renderAsHtml(): Promise<string> {\n        return this.clone(SharePointQueryable, \"renderashtml\").get();\n    }\n\n    /**\n     * Sets the view schema\n     * \n     * @param viewXml The view XML to set\n     */\n    public setViewXml(viewXml: string): Promise<void> {\n\n        return this.clone(View, \"SetViewXml\").postCore({\n            body: jsS({\n                viewXml,\n            }),\n        });\n    }\n}\n\n@defaultPath(\"viewfields\")\nexport class ViewFields extends SharePointQueryableCollection {\n    /**\n     * Gets a value that specifies the XML schema that represents the collection.\n     */\n    public getSchemaXml(): Promise<string> {\n        return this.clone(SharePointQueryable, \"schemaxml\").get();\n    }\n\n    /**\n     * Adds the field with the specified field internal name or display name to the collection.\n     *\n     * @param fieldTitleOrInternalName The case-sensitive internal name or display name of the field to add.\n     */\n    public add(fieldTitleOrInternalName: string): Promise<void> {\n        return this.clone(ViewFields, `addviewfield('${fieldTitleOrInternalName}')`).postCore();\n    }\n\n    /**\n     * Moves the field with the specified field internal name to the specified position in the collection.\n     *\n     * @param fieldInternalName The case-sensitive internal name of the field to move.\n     * @param index The zero-based index of the new position for the field.\n     */\n    public move(fieldInternalName: string, index: number): Promise<void> {\n        return this.clone(ViewFields, \"moveviewfieldto\").postCore({\n            body: jsS({ \"field\": fieldInternalName, \"index\": index }),\n        });\n    }\n\n    /**\n     * Removes all the fields from the collection.\n     */\n    public removeAll(): Promise<void> {\n        return this.clone(ViewFields, \"removeallviewfields\").postCore();\n    }\n\n    /**\n     * Removes the field with the specified field internal name from the collection.\n     *\n     * @param fieldInternalName The case-sensitive internal name of the field to remove from the view.\n     */\n    public remove(fieldInternalName: string): Promise<void> {\n        return this.clone(ViewFields, `removeviewfield('${fieldInternalName}')`).postCore();\n    }\n}\n\nexport interface ViewAddResult {\n    view: View;\n    data: any;\n}\n\nexport interface ViewUpdateResult {\n    view: View;\n    data: any;\n}\n","import { SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { extend, TypedHash, jsS } from \"@pnp/common\";\nimport {\n    XmlSchemaFieldCreationInformation,\n    DateTimeFieldFormatType,\n    DateTimeFieldFriendlyFormatType,\n    FieldTypes,\n    CalendarType,\n    UrlFieldFormatType,\n    FieldUserSelectionMode,\n    FieldCreationProperties,\n    ChoiceFieldFormatType,\n} from \"./types\";\nimport { metadata } from \"./utils/metadata\";\n\n/**\n * Describes a collection of Field objects\n *\n */\n@defaultPath(\"fields\")\nexport class Fields extends SharePointQueryableCollection {\n\n    /**\t\n     * Gets a field from the collection by id\t\n     *\t\n     * @param id The Id of the list\t\n     */\n    public getById(id: string): Field {\n        const f: Field = new Field(this);\n        f.concat(`('${id}')`);\n        return f;\n    }\n\n    /**\n     * Gets a field from the collection by title\n     *\n     * @param title The case-sensitive title of the field\n     */\n    public getByTitle(title: string): Field {\n        return new Field(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Gets a field from the collection by using internal name or title\n     *\n     * @param name The case-sensitive internal name or title of the field\n     */\n    public getByInternalNameOrTitle(name: string): Field {\n        return new Field(this, `getByInternalNameOrTitle('${name}')`);\n    }\n\n    /**\n     * Creates a field based on the specified schema\n     */\n    public createFieldAsXml(xml: string | XmlSchemaFieldCreationInformation): Promise<FieldAddResult> {\n\n        let info: XmlSchemaFieldCreationInformation;\n        if (typeof xml === \"string\") {\n            info = { SchemaXml: xml };\n        } else {\n            info = xml as XmlSchemaFieldCreationInformation;\n        }\n\n        const postBody: string = jsS({\n            \"parameters\":\n                extend(metadata(\"SP.XmlSchemaFieldCreationInformation\"), info),\n        });\n\n        return this.clone(Fields, \"createfieldasxml\").postCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                field: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Adds a new field to the collection\n     *\n     * @param title The new field's title\n     * @param fieldType The new field's type (ex: SP.FieldText)\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public add(title: string, fieldType: string, properties: FieldCreationProperties & { FieldTypeKind: number }): Promise<FieldAddResult> {\n\n        const postBody: string = jsS(Object.assign(metadata(fieldType), {\n            \"Title\": title,\n        }, properties));\n\n        return this.clone(Fields, null).postCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                field: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Adds a new SP.FieldText to the collection\n     *\n     * @param title The field title\n     * @param maxLength The maximum number of characters allowed in the value of the field.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addText(title: string, maxLength = 255, properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props: { FieldTypeKind: number, MaxLength: number } = {\n            FieldTypeKind: 2,\n            MaxLength: maxLength,\n        };\n\n        return this.add(title, \"SP.FieldText\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldCalculated to the collection\n     *\n     * @param title The field title.\n     * @param formula The formula for the field.\n     * @param dateFormat The date and time format that is displayed in the field.\n     * @param outputType Specifies the output format for the field. Represents a FieldType value.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addCalculated(\n        title: string,\n        formula: string,\n        dateFormat: DateTimeFieldFormatType,\n        outputType: FieldTypes = FieldTypes.Text,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props: {\n            DateFormat: DateTimeFieldFormatType;\n            FieldTypeKind: number;\n            Formula: string;\n            OutputType: FieldTypes;\n        } = {\n            DateFormat: dateFormat,\n            FieldTypeKind: 17,\n            Formula: formula,\n            OutputType: outputType,\n        };\n\n        return this.add(title, \"SP.FieldCalculated\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldDateTime to the collection\n     *\n     * @param title The field title\n     * @param displayFormat The format of the date and time that is displayed in the field.\n     * @param calendarType Specifies the calendar type of the field.\n     * @param friendlyDisplayFormat The type of friendly display format that is used in the field.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addDateTime(\n        title: string,\n        displayFormat: DateTimeFieldFormatType = DateTimeFieldFormatType.DateOnly,\n        calendarType: CalendarType = CalendarType.Gregorian,\n        friendlyDisplayFormat: DateTimeFieldFriendlyFormatType = DateTimeFieldFriendlyFormatType.Unspecified,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            DateTimeCalendarType: calendarType,\n            DisplayFormat: displayFormat,\n            FieldTypeKind: 4,\n            FriendlyDisplayFormat: friendlyDisplayFormat,\n        };\n\n        return this.add(title, \"SP.FieldDateTime\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldNumber to the collection\n     *\n     * @param title The field title\n     * @param minValue The field's minimum value\n     * @param maxValue The field's maximum value\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addNumber(\n        title: string,\n        minValue?: number,\n        maxValue?: number,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        let props: { FieldTypeKind: number } = { FieldTypeKind: 9 };\n\n        if (minValue !== undefined) {\n            props = extend({ MinimumValue: minValue }, props);\n        }\n\n        if (maxValue !== undefined) {\n            props = extend({ MaximumValue: maxValue }, props);\n        }\n\n        return this.add(title, \"SP.FieldNumber\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldCurrency to the collection\n     *\n     * @param title The field title\n     * @param minValue The field's minimum value\n     * @param maxValue The field's maximum value\n     * @param currencyLocalId Specifies the language code identifier (LCID) used to format the value of the field\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addCurrency(\n        title: string,\n        minValue?: number,\n        maxValue?: number,\n        currencyLocalId = 1033,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        let props: { CurrencyLocaleId: number; FieldTypeKind: number; } = {\n            CurrencyLocaleId: currencyLocalId,\n            FieldTypeKind: 10,\n        };\n\n        if (minValue !== undefined) {\n            props = extend({ MinimumValue: minValue }, props);\n        }\n\n        if (maxValue !== undefined) {\n            props = extend({ MaximumValue: maxValue }, props);\n        }\n\n        return this.add(title, \"SP.FieldCurrency\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldMultiLineText to the collection\n     *\n     * @param title The field title\n     * @param numberOfLines Specifies the number of lines of text to display for the field.\n     * @param richText Specifies whether the field supports rich formatting.\n     * @param restrictedMode Specifies whether the field supports a subset of rich formatting.\n     * @param appendOnly Specifies whether all changes to the value of the field are displayed in list forms.\n     * @param allowHyperlink Specifies whether a hyperlink is allowed as a value of the field.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     *\n     */\n    public addMultilineText(\n        title: string,\n        numberOfLines = 6,\n        richText = true,\n        restrictedMode = false,\n        appendOnly = false,\n        allowHyperlink = true,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            AllowHyperlink: allowHyperlink,\n            AppendOnly: appendOnly,\n            FieldTypeKind: 3,\n            NumberOfLines: numberOfLines,\n            RestrictedMode: restrictedMode,\n            RichText: richText,\n        };\n\n        return this.add(title, \"SP.FieldMultiLineText\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldUrl to the collection\n     *\n     * @param title The field title\n     */\n    public addUrl(\n        title: string,\n        displayFormat: UrlFieldFormatType = UrlFieldFormatType.Hyperlink,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            DisplayFormat: displayFormat,\n            FieldTypeKind: 11,\n        };\n\n        return this.add(title, \"SP.FieldUrl\", extend(props, properties));\n    }\n\n    /** Adds a user field to the colleciton\n    * \n    * @param title The new field's title\n    * @param selectionMode The selection mode of the field\n    * @param selectionGroup Value that specifies the identifier of the SharePoint group whose members can be selected as values of the field\n    * @param properties\n    */\n    public addUser(title: string,\n        selectionMode: FieldUserSelectionMode,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            FieldTypeKind: 20,\n            SelectionMode: selectionMode,\n        };\n\n        return this.add(title, \"SP.FieldUser\", extend(props, properties));\n    }\n\n    /**\n     * Adds a SP.FieldLookup to the collection\n     *\n     * @param title The new field's title\n     * @param lookupListId The guid id of the list where the source of the lookup is found\n     * @param lookupFieldName The internal name of the field in the source list\n     * @param properties Set of additional properties to set on the new field\n     */\n    public addLookup(\n        title: string,\n        lookupListId: string,\n        lookupFieldName: string,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = extend({\n            FieldTypeKind: 7,\n            LookupFieldName: lookupFieldName,\n            LookupListId: lookupListId,\n            Title: title,\n        }, properties);\n\n        const postBody: string = jsS({\n            \"parameters\":\n                extend(metadata(\"SP.FieldCreationInformation\"), props),\n        });\n\n        return this.clone(Fields, \"addfield\").postCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                field: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Adds a new SP.FieldChoice to the collection\n     *\n     * @param title The field title.\n     * @param choices The choices for the field.\n     * @param format The display format of the available options for the field.\n     * @param fillIn Specifies whether the field allows fill-in values.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addChoice(\n        title: string,\n        choices: string[],\n        format: ChoiceFieldFormatType = ChoiceFieldFormatType.Dropdown,\n        fillIn?: boolean,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            Choices: {\n                results: choices,\n            },\n            EditFormat: format,\n            FieldTypeKind: 6,\n            FillInChoice: fillIn,\n        };\n\n        return this.add(title, \"SP.FieldChoice\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldMultiChoice to the collection\n     *\n     * @param title The field title.\n     * @param choices The choices for the field.\n     * @param fillIn Specifies whether the field allows fill-in values.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addMultiChoice(\n        title: string,\n        choices: string[],\n        fillIn?: boolean,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            Choices: {\n                results: choices,\n            },\n            FieldTypeKind: 15,\n            FillInChoice: fillIn,\n        };\n\n        return this.add(title, \"SP.FieldMultiChoice\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldBoolean to the collection\n     *\n     * @param title The field title.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addBoolean(\n        title: string,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            FieldTypeKind: 8,\n        };\n\n        return this.add(title, \"SP.Field\", extend(props, properties));\n    }\n\n    /**\n    * Creates a secondary (dependent) lookup field, based on the Id of the primary lookup field.\n    * \n    * @param displayName The display name of the new field.\n    * @param primaryLookupFieldId The guid of the primary Lookup Field.\n    * @param showField Which field to show from the lookup list.\n    */\n    public addDependentLookupField(\n        displayName: string,\n        primaryLookupFieldId: string,\n        showField: string,\n    ): Promise<FieldAddResult> {\n        return this.clone(\n            Fields,\n            `adddependentlookupfield(displayName='${displayName}', primarylookupfieldid='${primaryLookupFieldId}', showfield='${showField}')`,\n        )\n            .postCore<{ Id: string }>()\n            .then(data => {\n                return {\n                    data,\n                    field: this.getById(data.Id),\n                };\n            });\n    }\n\n    /**\n     * Adds a new SP.FieldLocation to the collection\n     *\n     * @param title The field title.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addLocation(\n        title: string,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props: { FieldTypeKind: number } = { FieldTypeKind: 33 };\n\n        return this.add(title, \"SP.FieldLocation\", extend(props, properties));\n    }\n}\n\n/**\n * Describes a single of Field instance\n *\n */\nexport class Field extends SharePointQueryableInstance {\n\n    /**\n     * Delete this fields\n     *\n     */\n    public delete = this._delete;\n\n    /**\n     * Updates this field intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param fieldType The type value, required to update child field type properties\n     */\n    public update(properties: TypedHash<string | number | boolean>, fieldType = \"SP.Field\"): Promise<FieldUpdateResult> {\n\n        const postBody: string = jsS(extend(metadata(fieldType), properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data,\n                field: this,\n            };\n        });\n    }\n\n    /**\n     * Sets the value of the ShowInDisplayForm property for this field.\n     */\n    public setShowInDisplayForm(show: boolean): Promise<void> {\n        return this.clone(Field, `setshowindisplayform(${show})`).postCore();\n    }\n\n    /**\n     * Sets the value of the ShowInEditForm property for this field.\n     */\n    public setShowInEditForm(show: boolean): Promise<void> {\n        return this.clone(Field, `setshowineditform(${show})`).postCore();\n    }\n\n    /**\n     * Sets the value of the ShowInNewForm property for this field.\n     */\n    public setShowInNewForm(show: boolean): Promise<void> {\n        return this.clone(Field, `setshowinnewform(${show})`).postCore();\n    }\n}\n\n/**\n * This interface defines the result of adding a field\n */\nexport interface FieldAddResult {\n    data: any;\n    field: Field;\n}\n\nexport interface FieldUpdateResult {\n    data: any;\n    field: Field;\n}\n","import { SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\n\n/**\n * Describes a collection of Field objects\n *\n */\n@defaultPath(\"forms\")\nexport class Forms extends SharePointQueryableCollection {\n    /**\t\n     * Gets a form by id\t\n     *\t\n     * @param id The guid id of the item to retrieve\t\n     */\n    public getById(id: string): Form {\n        const i = new Form(this);\n        i.concat(`('${id}')`);\n        return i;\n    }\n}\n\n/**\n * Describes a single of Form instance\n *\n */\nexport class Form extends SharePointQueryableInstance { }\n","import { SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { jsS } from \"@pnp/common\";\n\n/**\n * Describes a collection of webhook subscriptions\n *\n */\n@defaultPath(\"subscriptions\")\nexport class Subscriptions extends SharePointQueryableCollection {\n\n    /**\n     * Returns all the webhook subscriptions or the specified webhook subscription\n     *\n     * @param subscriptionId The id of a specific webhook subscription to retrieve, omit to retrieve all the webhook subscriptions\n     */\n    public getById(subscriptionId: string): Subscription {\n        const s = new Subscription(this);\n        s.concat(`('${subscriptionId}')`);\n        return s;\n    }\n\n    /**\n     * Creates a new webhook subscription\n     *\n     * @param notificationUrl The url to receive the notifications\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months)\n     * @param clientState A client specific string (optional)\n     */\n    public add(notificationUrl: string, expirationDate: string, clientState?: string): Promise<SubscriptionAddResult> {\n\n        const postBody: any = {\n            \"expirationDateTime\": expirationDate,\n            \"notificationUrl\": notificationUrl,\n            \"resource\": this.toUrl(),\n        };\n\n        if (clientState) {\n            postBody.clientState = clientState;\n        }\n\n        return this.postCore({ body: jsS(postBody), headers: { \"Content-Type\": \"application/json\" } }).then(result => {\n\n            return { data: result, subscription: this.getById(result.id) };\n        });\n    }\n}\n\n/**\n * Describes a single webhook subscription instance\n *\n */\nexport class Subscription extends SharePointQueryableInstance {\n\n    /**\n     * Renews this webhook subscription\n     *\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months, optional)\n     * @param notificationUrl The url to receive the notifications (optional)\n     * @param clientState A client specific string (optional)\n     */\n    public update(expirationDate?: string, notificationUrl?: string, clientState?: string): Promise<SubscriptionUpdateResult> {\n\n      const postBody: any = {\n      };\n\n      if (expirationDate) {\n        postBody.expirationDateTime = expirationDate;\n      }\n\n      if (notificationUrl) {\n        postBody.notificationUrl = notificationUrl;\n      }\n\n      if (clientState) {\n        postBody.clientState = clientState;\n      }\n\n      return this.patchCore({ body: jsS(postBody), headers: { \"Content-Type\": \"application/json\" } }).then(data => {\n          return { data: data, subscription: this };\n      });\n  }\n\n    /**\n     * Removes this webhook subscription\n     *\n     */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n}\n\nexport interface SubscriptionAddResult {\n    subscription: Subscription;\n    data: any;\n}\n\nexport interface SubscriptionUpdateResult {\n    subscription: Subscription;\n    data: any;\n}\n","import { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { extend, TypedHash, jsS } from \"@pnp/common\";\n\n/**\n * Describes a collection of user custom actions\n *\n */\n@defaultPath(\"usercustomactions\")\nexport class UserCustomActions extends SharePointQueryableCollection {\n\n    /**\t   \n     * Returns the user custom action with the specified id\t     \n     *\t    \n     * @param id The GUID id of the user custom action to retrieve\t     \n     */\n    public getById(id: string): UserCustomAction {\n        const uca = new UserCustomAction(this);\n        uca.concat(`('${id}')`);\n        return uca;\n    }\n\n    /**\n     * Creates a user custom action\n     *\n     * @param properties The information object of property names and values which define the new user custom action\n     *\n     */\n    public add(properties: TypedHash<any>): Promise<UserCustomActionAddResult> {\n\n        const postBody = jsS(extend({ __metadata: { \"type\": \"SP.UserCustomAction\" } }, properties));\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return {\n                action: this.getById(data.Id),\n                data: data,\n            };\n        });\n    }\n\n    /**\n     * Deletes all user custom actions in the collection\n     *\n     */\n    public clear(): Promise<void> {\n        return this.clone(UserCustomActions, \"clear\").postCore();\n    }\n}\n\n/**\n * Describes a single user custom action\n *\n */\nexport class UserCustomAction extends SharePointQueryableInstance {\n\n    /**\n    * Updates this user custom action with the supplied properties\n    *\n    * @param properties An information object of property names and values to update for this user custom action\n    */\n    public update = this._update<UserCustomActionUpdateResult, TypedHash<any>>(\"SP.UserCustomAction\", (data) => ({ data, action: this }));\n\n    /**\n    * Removes this user custom action\n    *\n    */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n}\n\n/**\n * Result from adding a user custom action\n *\n */\nexport interface UserCustomActionAddResult {\n    data: any;\n    action: UserCustomAction;\n}\n\n/**\n * Result from udating a user custom action\n *\n */\nexport interface UserCustomActionUpdateResult {\n    data: any;\n    action: UserCustomAction;\n}\n","import { Items } from \"./items\";\nimport { Views, View } from \"./views\";\nimport { ContentTypes } from \"./contenttypes\";\nimport { Fields } from \"./fields\";\nimport { Forms } from \"./forms\";\nimport { Subscriptions } from \"./subscriptions\";\nimport { SharePointQueryable, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { SharePointQueryableSecurable } from \"./sharepointqueryablesecurable\";\nimport { extend, TypedHash, hOP, jsS, isArray } from \"@pnp/common\";\nimport { ControlMode, RenderListData, ChangeQuery, CamlQuery, ChangeLogitemQuery, ListFormData, RenderListDataParameters, ListItemFormUpdateValue, RenderListDataOptions } from \"./types\";\nimport { UserCustomActions } from \"./usercustomactions\";\nimport { odataUrlFrom } from \"./odata\";\nimport { Folder } from \"./folders\";\nimport { metadata } from \"./utils/metadata\";\nimport { SiteScripts } from \"..\";\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\n\n/**\n * Describes a collection of List objects\n *\n */\n@defaultPath(\"lists\")\nexport class Lists extends SharePointQueryableCollection {\n\n    /**\n     * Gets a list from the collection by guid id\n     *\n     * @param id The Id of the list (GUID)\n     */\n    public getById(id: string): List {\n        const list = new List(this);\n        list.concat(`('${id}')`);\n        return list;\n    }\n\n    /**\n     * Gets a list from the collection by title\n     *\n     * @param title The title of the list\n     */\n    public getByTitle(title: string): List {\n        return new List(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Adds a new list to the collection\n     *\n     * @param title The new list's title\n     * @param description The new list's description\n     * @param template The list template value\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\n     * @param additionalSettings Will be passed as part of the list creation body\n     */\n    public add(title: string, description = \"\", template = 100, enableContentTypes = false, additionalSettings: TypedHash<string | number | boolean> = {}): Promise<ListAddResult> {\n\n        const addSettings = extend({\n            \"AllowContentTypes\": enableContentTypes,\n            \"BaseTemplate\": template,\n            \"ContentTypesEnabled\": enableContentTypes,\n            \"Description\": description,\n            \"Title\": title,\n            \"__metadata\": { \"type\": \"SP.List\" },\n        }, additionalSettings);\n\n        return this.postCore({ body: jsS(addSettings) }).then((data) => {\n            return { data: data, list: this.getByTitle(addSettings.Title) };\n        });\n    }\n\n    /**\n     * Ensures that the specified list exists in the collection (note: this method not supported for batching)\n     *\n     * @param title The new list's title\n     * @param description The new list's description\n     * @param template The list template value\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\n     * @param additionalSettings Will be passed as part of the list creation body or used to update an existing list\n     */\n    public ensure(\n        title: string,\n        description = \"\",\n        template = 100,\n        enableContentTypes = false,\n        additionalSettings: TypedHash<string | number | boolean> = {}): Promise<ListEnsureResult> {\n\n        if (this.hasBatch) {\n            throw Error(\"The ensure list method is not supported for use in a batch.\");\n        }\n\n        return new Promise((resolve, reject) => {\n\n            const addOrUpdateSettings = extend(additionalSettings, { Title: title, Description: description, ContentTypesEnabled: enableContentTypes }, true);\n\n            const list: List = this.getByTitle(addOrUpdateSettings.Title);\n\n            list.get().then(_ => {\n\n                list.update(addOrUpdateSettings).then(d => {\n                    resolve({ created: false, data: d, list: this.getByTitle(addOrUpdateSettings.Title) });\n                }).catch(e => reject(e));\n\n            }).catch(_ => {\n\n                this.add(title, description, template, enableContentTypes, addOrUpdateSettings).then((r) => {\n                    resolve({ created: true, data: r.data, list: this.getByTitle(addOrUpdateSettings.Title) });\n                }).catch((e) => reject(e));\n            });\n        });\n    }\n\n    /**\n     * Gets a list that is the default asset location for images or other files, which the users upload to their wiki pages.\n     */\n    public ensureSiteAssetsLibrary(): Promise<List> {\n        return this.clone(Lists, \"ensuresiteassetslibrary\").postCore().then((json) => {\n            return new List(odataUrlFrom(json));\n        });\n    }\n\n    /**\n     * Gets a list that is the default location for wiki pages.\n     */\n    public ensureSitePagesLibrary(): Promise<List> {\n        return this.clone(Lists, \"ensuresitepageslibrary\").postCore().then((json) => {\n            return new List(odataUrlFrom(json));\n        });\n    }\n}\n\n/**\n * Describes a single List instance\n *\n */\nexport class List extends SharePointQueryableSecurable {\n\n    /**\n     * Gets the content types in this list\n     *\n     */\n    public get contentTypes(): ContentTypes {\n        return new ContentTypes(this);\n    }\n\n    /**\n     * Gets the items in this list\n     *\n     */\n    public get items(): Items {\n        return new Items(this);\n    }\n\n    /**\n     * Gets the views in this list\n     *\n     */\n    public get views(): Views {\n        return new Views(this);\n    }\n\n    /**\n     * Gets the fields in this list\n     *\n     */\n    public get fields(): Fields {\n        return new Fields(this);\n    }\n\n    /**\n     * Gets the forms in this list\n     *\n     */\n    public get forms(): Forms {\n        return new Forms(this);\n    }\n\n    /**\n     * Gets the default view of this list\n     *\n     */\n    public get defaultView(): View {\n        return new View(this, \"DefaultView\");\n    }\n\n    /**\n     * Get all custom actions on a site collection\n     *\n     */\n    public get userCustomActions(): UserCustomActions {\n        return new UserCustomActions(this);\n    }\n\n    /**\n     * Gets the effective base permissions of this list\n     *\n     */\n    public get effectiveBasePermissions(): SharePointQueryable {\n        return new SharePointQueryable(this, \"EffectiveBasePermissions\");\n    }\n\n    /**\n     * Gets the event receivers attached to this list\n     *\n     */\n    public get eventReceivers(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"EventReceivers\");\n    }\n\n    /**\n     * Gets the related fields of this list\n     *\n     */\n    public get relatedFields(): SharePointQueryable {\n        return new SharePointQueryable(this, \"getRelatedFields\");\n    }\n\n    /**\n     * Gets the IRM settings for this list\n     *\n     */\n    public get informationRightsManagementSettings(): SharePointQueryable {\n        return new SharePointQueryable(this, \"InformationRightsManagementSettings\");\n    }\n\n    /**\n     * Gets the webhook subscriptions of this list\n     *\n     */\n    public get subscriptions(): Subscriptions {\n        return new Subscriptions(this);\n    }\n\n    /**\n     * The root folder of the list\n     */\n    public get rootFolder(): Folder {\n        return new Folder(this, \"rootFolder\");\n    }\n\n    /**\n     * Gets a view by view guid id\n     *\n     */\n    public getView(viewId: string): View {\n        return new View(this, `getView('${viewId}')`);\n    }\n\n    /**\n     * Updates this list intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    /* tslint:disable no-string-literal */\n    public update(properties: TypedHash<string | number | boolean>, eTag = \"*\"): Promise<ListUpdateResult> {\n\n        const postBody = jsS(extend({\n            \"__metadata\": { \"type\": \"SP.List\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n\n            let retList: List = this;\n\n            if (hOP(properties, \"Title\")) {\n                retList = this.getParent(List, this.parentUrl, `getByTitle('${properties[\"Title\"]}')`);\n            }\n\n            return {\n                data: data,\n                list: retList,\n            };\n        });\n    }\n    /* tslint:enable */\n\n    /**\n     * Delete this list\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query.\n     */\n    public getChanges(query: ChangeQuery): Promise<any> {\n\n        return this.clone(List, \"getchanges\").postCore({\n            body: jsS({ \"query\": extend(metadata(\"SP.ChangeQuery\"), query) }),\n        });\n    }\n\n    /**\n     * Returns a collection of items from the list based on the specified query.\n     *\n     * @param CamlQuery The Query schema of Collaborative Application Markup\n     * Language (CAML) is used in various ways within the context of Microsoft SharePoint Foundation\n     * to define queries against list data.\n     * see:\n     *\n     * https://msdn.microsoft.com/en-us/library/office/ms467521.aspx\n     *\n     * @param expands A URI with a $expand System Query Option indicates that Entries associated with\n     * the Entry or Collection of Entries identified by the Resource Path\n     * section of the URI must be represented inline (i.e. eagerly loaded).\n     * see:\n     *\n     * https://msdn.microsoft.com/en-us/library/office/fp142385.aspx\n     *\n     * http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#ExpandSystemQueryOption\n     */\n    public getItemsByCAMLQuery(query: CamlQuery, ...expands: string[]): Promise<any> {\n\n        const q = this.clone(List, \"getitems\");\n        return q.expand.apply(q, expands).postCore({\n            body: jsS({ \"query\": extend({ \"__metadata\": { \"type\": \"SP.CamlQuery\" } }, query) }),\n        });\n    }\n\n    /**\n     * See: https://msdn.microsoft.com/en-us/library/office/dn292554.aspx\n     */\n    public getListItemChangesSinceToken(query: ChangeLogitemQuery): Promise<string> {\n\n        return this.clone(List, \"getlistitemchangessincetoken\").postCore({\n            body: jsS({ \"query\": extend({ \"__metadata\": { \"type\": \"SP.ChangeLogItemQuery\" } }, query) }),\n        }, { parse(r) { return r.text(); } });\n    }\n\n    /**\n     * Moves the list to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(List, \"recycle\").postCore().then(data => {\n            if (hOP(data, \"Recycle\")) {\n                return data.Recycle;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Renders list data based on the view xml provided\n     */\n    public renderListData(viewXml: string): Promise<RenderListData> {\n\n        const q = this.clone(List, \"renderlistdata(@viewXml)\");\n        q.query.set(\"@viewXml\", `'${viewXml}'`);\n        return q.postCore().then(data => {\n            // data will be a string, so we parse it again\n            return JSON.parse(hOP(data, \"RenderListData\") ? data.RenderListData : data);\n        });\n    }\n\n    /**\n     * Returns the data for the specified query view\n     *\n     * @param parameters The parameters to be used to render list data as JSON string.\n     * @param overrideParameters The parameters that are used to override and extend the regular SPRenderListDataParameters.\n     * @param queryParams Allows setting of query parameters\n     */\n    public renderListDataAsStream(parameters: RenderListDataParameters, overrideParameters: any = null, queryParams = new Map<string, string>()): Promise<any> {\n\n        if (hOP(parameters, \"RenderOptions\") && isArray(parameters.RenderOptions)) {\n            parameters.RenderOptions = (<RenderListDataOptions[]>parameters.RenderOptions).reduce((v, c) => v + c);\n        }\n\n        const postBody = {\n            overrideParameters: extend(metadata(\"SP.RenderListDataOverrideParameters\"), overrideParameters),\n            parameters: extend(metadata(\"SP.RenderListDataParameters\"), parameters),\n        };\n\n        const clone = this.clone(List, \"RenderListDataAsStream\", true);\n\n        if (queryParams && queryParams.size > 0) {\n            queryParams.forEach((v, k) => clone.query.set(k, v));\n        }\n\n        return clone.postCore({\n            body: jsS(postBody),\n        });\n    }\n\n    /**\n     * Gets the field values and field schema attributes for a list item.\n     */\n    public renderListFormData(itemId: number, formId: string, mode: ControlMode): Promise<ListFormData> {\n        return this.clone(List, `renderlistformdata(itemid=${itemId}, formid='${formId}', mode='${mode}')`).postCore().then(data => {\n            // data will be a string, so we parse it again\n            return JSON.parse(hOP(data, \"RenderListFormData\") ? data.RenderListFormData : data);\n        });\n    }\n\n    /**\n     * Reserves a list item ID for idempotent list item creation.\n     */\n    public reserveListItemId(): Promise<number> {\n        return this.clone(List, \"reservelistitemid\").postCore().then(data => {\n            if (hOP(data, \"ReserveListItemId\")) {\n                return data.ReserveListItemId;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Returns the ListItemEntityTypeFullName for this list, used when adding/updating list items. Does not support batching.\n     *\n     */\n    public getListItemEntityTypeFullName(): Promise<string> {\n        return this.clone(List, null, false).select(\"ListItemEntityTypeFullName\").get<{ ListItemEntityTypeFullName: string }>().then(o => o.ListItemEntityTypeFullName);\n    }\n\n    /**\n     * Creates an item using path (in a folder), validates and sets its field values.\n     *\n     * @param formValues The fields to change and their new values.\n     * @param decodedUrl Path decoded url; folder's server relative path.\n     * @param bNewDocumentUpdate true if the list item is a document being updated after upload; otherwise false.\n     * @param checkInComment Optional check in comment.\n     */\n    public addValidateUpdateItemUsingPath(\n        formValues: ListItemFormUpdateValue[],\n        decodedUrl: string,\n        bNewDocumentUpdate = false,\n        checkInComment?: string,\n    ): Promise<ListItemFormUpdateValue[]> {\n        return this.clone(List, \"AddValidateUpdateItemUsingPath()\").postCore({\n            body: jsS({\n                bNewDocumentUpdate,\n                checkInComment,\n                formValues,\n                listItemCreateInfo: {\n                    FolderPath: {\n                        DecodedUrl: decodedUrl,\n                        __metadata: { type: \"SP.ResourcePath\" },\n                    },\n                    __metadata: { type: \"SP.ListItemCreationInformationUsingPath\" },\n                },\n            }),\n        }).then(res => {\n            if (typeof res.AddValidateUpdateItemUsingPath !== \"undefined\") {\n                return res.AddValidateUpdateItemUsingPath.results;\n            }\n            return res;\n        });\n    }\n\n    /**\n    * Gets the site script syntax (JSON) for the current list\n    */\n    public async getSiteScript(): Promise<string> {\n        const rootFolder = await this.clone(List).rootFolder.select(\"ServerRelativeUrl\").get();\n        const absoluteListUrl = await toAbsoluteUrl(rootFolder.ServerRelativeUrl);\n        return new SiteScripts(this, \"\").getSiteScriptFromList(absoluteListUrl);\n    }\n}\n\nexport interface ListAddResult {\n    list: List;\n    data: any;\n}\n\nexport interface ListUpdateResult {\n    list: List;\n    data: any;\n}\n\nexport interface ListEnsureResult {\n    list: List;\n    created: boolean;\n    data: any;\n}\n","import { SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { extend, jsS } from \"@pnp/common\";\nimport { odataUrlFrom } from \"./odata\";\nimport { metadata } from \"./utils/metadata\";\n\nexport interface CommentAuthorData {\n    email: string;\n    id: number;\n    isActive: boolean;\n    isExternal: boolean;\n    jobTitle: string | null;\n    loginName: string;\n    name: string;\n    principalType: number;\n    userId: any | null;\n}\n\nexport interface CommentData {\n    author: CommentAuthorData;\n    createdDate: string;\n    id: string;\n    isLikedByUser: boolean;\n    isReply: boolean;\n    itemId: number;\n    likeCount: number;\n    listId: string;\n    mentions: any | null;\n    parentId: string;\n    replyCount: number;\n    text: string;\n}\n\nexport interface Identity {\n    loginName: string;\n    email: string;\n    name: string;\n}\n\nexport interface CommentInfo {\n    text: string;\n    mentions?: Identity[];\n}\n\n/**\n * Represents a Collection of comments\n */\n@defaultPath(\"comments\")\nexport class Comments extends SharePointQueryableCollection<CommentData[]> {\n\n    /**\n     * Adds a new comment to this collection\n     * \n     * @param info Comment information to add\n     */\n    public add(info: string | CommentInfo): Promise<Comment & CommentData> {\n\n        if (typeof info === \"string\") {\n            info = { text: info };\n        }\n\n        const postBody = jsS(extend(metadata(\"Microsoft.SharePoint.Comments.comment\"), info));\n\n        return this.clone(Comments, null).postCore<CommentData>({ body: postBody }).then(d => {\n            return extend(this.getById(d.id), d);\n        });\n    }\n\n    /**\n     * Gets a comment by id\n     * \n     * @param id Id of the comment to load\n     */\n    public getById(id: string | number): Comment {\n        const c = new Comment(this);\n        c.concat(`(${id})`);\n        return c;\n    }\n\n    /**\n     * Deletes all the comments in this collection\n     */\n    public clear(): Promise<boolean> {\n        return this.clone(Comments, \"DeleteAll\").postCore<boolean>();\n    }\n}\n\n/**\n * Represents a comment\n */\nexport class Comment extends SharePointQueryableInstance {\n\n    public get replies(): Replies {\n        return new Replies(this);\n    }\n\n    /**\n     * Likes the comment as the current user\n     */\n    public like(): Promise<void> {\n        return this.clone(Comment, \"Like\").postCore<void>();\n    }\n\n    /**\n     * Unlikes the comment as the current user\n     */\n    public unlike(): Promise<void> {\n        return this.clone(Comment, \"Unlike\").postCore<void>();\n    }\n\n    /**\n     * Deletes this comment\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\n/**\n * Represents a Collection of comments\n */\n@defaultPath(\"replies\")\nexport class Replies extends SharePointQueryableCollection<CommentData[]> {\n\n    /**\n     * Adds a new reply to this collection\n     * \n     * @param info Comment information to add\n     */\n    public add(info: string | CommentInfo): Promise<Comment & CommentData> {\n\n        if (typeof info === \"string\") {\n            info = { text: info };\n        }\n\n        const postBody = jsS(extend(metadata(\"Microsoft.SharePoint.Comments.comment\"), info));\n\n        return this.clone(Replies, null).postCore<CommentData>({ body: postBody }).then(d => {\n            return extend(new Comment(odataUrlFrom(d)), d);\n        });\n    }\n}\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { SharePointQueryableShareableItem } from \"./sharepointqueryableshareable\";\nimport { Folder } from \"./folders\";\nimport { File } from \"./files\";\nimport { ContentType } from \"./contenttypes\";\nimport { extend, TypedHash, jsS, hOP } from \"@pnp/common\";\nimport { ListItemFormUpdateValue, LikeData } from \"./types\";\nimport { ODataParserBase, ODataDefaultParser, ODataParser } from \"@pnp/odata\";\nimport { AttachmentFiles } from \"./attachmentfiles\";\nimport { List } from \"./lists\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { Comments } from \"./comments\";\nimport { metadata } from \"./utils/metadata\";\n\n/**\n * Describes a collection of Item objects\n *\n */\n@defaultPath(\"items\")\nexport class Items extends SharePointQueryableCollection {\n\n    /**\t\n    * Gets an Item by id\t\n    *\t\n    * @param id The integer id of the item to retrieve\t\n    */\n    public getById(id: number): Item {\n        const i = new Item(this);\n        i.concat(`(${id})`);\n        return i;\n    }\n\n    /**\n     * Gets BCS Item by string id\n     *\n     * @param stringId The string id of the BCS item to retrieve\n     */\n    public getItemByStringId(stringId: string): Item {\n        // creates an item with the parent list path and append out method call\n        return new Item(this.parentUrl, `getItemByStringId('${stringId}')`);\n    }\n\n    /**\n     * Skips the specified number of items (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#sectionSection6)\n     *\n     * @param skip The starting id where the page should start, use with top to specify pages\n     * @param reverse It true the PagedPrev=true parameter is added allowing backwards navigation in the collection\n     */\n    public skip(skip: number, reverse = false): this {\n        if (reverse) {\n            this.query.set(\"$skiptoken\", encodeURIComponent(`Paged=TRUE&PagedPrev=TRUE&p_ID=${skip}`));\n        } else {\n            this.query.set(\"$skiptoken\", encodeURIComponent(`Paged=TRUE&p_ID=${skip}`));\n        }\n        return this;\n    }\n\n    /**\n     * Gets a collection designed to aid in paging through data\n     *\n     */\n    public getPaged<T = any[]>(parser: ODataParser<any> = new ODataDefaultParser()): Promise<PagedItemCollection<T>> {\n\n        return this.get(new PagedItemCollectionParser<any>(this, parser));\n    }\n\n    /**\n     * Gets all the items in a list, regardless of count. Does not support batching or caching\n     *\n     *  @param requestSize Number of items to return in each request (Default: 2000)\n     *  @param acceptHeader Allows for setting the value of the Accept header for SP 2013 support\n     */\n    public getAll(requestSize = 2000, acceptHeader = \"application/json;odata=nometadata\"): Promise<any[]> {\n\n        Logger.write(\"Calling items.getAll should be done sparingly. Ensure this is the correct choice. If you are unsure, it is not.\", LogLevel.Warning);\n\n        // this will be used for the actual query\n        // and we set no metadata here to try and reduce traffic\n        const items = new Items(this, \"\").top(requestSize).configure({\n            headers: {\n                \"Accept\": acceptHeader,\n            },\n        });\n\n        // let's copy over the odata query params that can be applied\n        // $top - allow setting the page size this way (override what we did above)\n        // $select - allow picking the return fields (good behavior)\n        // $filter - allow setting a filter, though this may fail due for large lists\n        this.query.forEach((v: string, k: string) => {\n            if (/^\\$select|filter|top|expand$/i.test(k)) {\n                items.query.set(k, v);\n            }\n        });\n\n        // give back the promise\n        return new Promise((resolve, reject) => {\n\n            // this will eventually hold the items we return\n            const itemsCollector: any[] = [];\n\n            // action that will gather up our results recursively\n            const gatherer = (last: PagedItemCollection<any>) => {\n\n                // collect that set of results\n                [].push.apply(itemsCollector, last.results);\n\n                // if we have more, repeat - otherwise resolve with the collected items\n                if (last.hasNext) {\n                    last.getNext().then(gatherer).catch(reject);\n                } else {\n                    resolve(itemsCollector);\n                }\n            };\n\n            // start the cycle\n            items.getPaged().then(gatherer).catch(reject);\n        });\n    }\n\n    /**\n     * Adds a new item to the collection\n     *\n     * @param properties The new items's properties\n     * @param listItemEntityTypeFullName The type name of the list's entities\n     */\n    public add(properties: TypedHash<any> = {}, listItemEntityTypeFullName: string = null): Promise<ItemAddResult> {\n\n        const removeDependency = this.addBatchDependency();\n\n        return this.ensureListItemEntityTypeName(listItemEntityTypeFullName).then(listItemEntityType => {\n\n            const postBody = jsS(extend(metadata(listItemEntityType), properties));\n\n            const promise = this.clone(Items, \"\").postCore<{ Id: number }>({ body: postBody }).then((data) => {\n                return {\n                    data: data,\n                    item: this.getById(data.Id),\n                };\n            });\n\n            removeDependency();\n\n            return promise;\n        });\n    }\n\n    /**\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\n     *\n     * @param candidatelistItemEntityTypeFullName The potential type name\n     */\n    private ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName: string): Promise<string> {\n\n        return candidatelistItemEntityTypeFullName ?\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\n            this.getParent(List).getListItemEntityTypeFullName();\n    }\n}\n\n/**\n * Descrines a single Item instance\n *\n */\nexport class Item extends SharePointQueryableShareableItem {\n\n    /**\n     * Delete this item\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete = this._deleteWithETag;\n\n    /**\n     * Gets the set of attachments for this item\n     *\n     */\n    public get attachmentFiles(): AttachmentFiles {\n        return new AttachmentFiles(this);\n    }\n\n    /**\n     * Gets the content type for this item\n     *\n     */\n    public get contentType(): ContentType {\n        return new ContentType(this, \"ContentType\");\n    }\n\n    /**\n     * Gets the collection of comments associated with this list item\n     */\n    public get comments(): Comments {\n        return new Comments(this);\n    }\n\n    /**\n     * Gets the effective base permissions for the item\n     *\n     */\n    public get effectiveBasePermissions(): SharePointQueryable {\n        return new SharePointQueryable(this, \"EffectiveBasePermissions\");\n    }\n\n    /**\n     * Gets the effective base permissions for the item in a UI context\n     *\n     */\n    public get effectiveBasePermissionsForUI(): SharePointQueryable {\n        return new SharePointQueryable(this, \"EffectiveBasePermissionsForUI\");\n    }\n\n    /**\n     * Gets the field values for this list item in their HTML representation\n     *\n     */\n    public get fieldValuesAsHTML(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FieldValuesAsHTML\");\n    }\n\n    /**\n     * Gets the field values for this list item in their text representation\n     *\n     */\n    public get fieldValuesAsText(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FieldValuesAsText\");\n    }\n\n    /**\n     * Gets the field values for this list item for use in editing controls\n     *\n     */\n    public get fieldValuesForEdit(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FieldValuesForEdit\");\n    }\n\n    /**\n     * Gets the folder associated with this list item (if this item represents a folder)\n     *\n     */\n    public get folder(): Folder {\n        return new Folder(this, \"folder\");\n    }\n\n    /**\n     * Gets the folder associated with this list item (if this item represents a folder)\n     *\n     */\n    public get file(): File {\n        return new File(this, \"file\");\n    }\n\n    /**\n     * Gets the collection of versions associated with this item\n     */\n    public get versions(): ItemVersions {\n        return new ItemVersions(this);\n    }\n\n    public get list(): List {\n        return this.getParent(List, this.parentUrl.substr(0, this.parentUrl.lastIndexOf(\"/\")));\n    }\n\n    /**\n     * Updates this list intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     * @param listItemEntityTypeFullName The type name of the list's entities\n     */\n    public update(properties: TypedHash<any>, eTag = \"*\", listItemEntityTypeFullName: string = null): Promise<ItemUpdateResult> {\n\n        return new Promise<ItemUpdateResult>((resolve, reject) => {\n\n            const removeDependency = this.addBatchDependency();\n\n            return this.ensureListItemEntityTypeName(listItemEntityTypeFullName).then(listItemEntityType => {\n\n                const postBody = jsS(extend(metadata(listItemEntityType), properties));\n\n                removeDependency();\n\n                return this.postCore({\n                    body: postBody,\n                    headers: {\n                        \"IF-Match\": eTag,\n                        \"X-HTTP-Method\": \"MERGE\",\n                    },\n                }, new ItemUpdatedParser()).then((data) => {\n                    resolve({\n                        data: data,\n                        item: this,\n                    });\n                });\n            }).catch(e => reject(e));\n        });\n    }\n\n    /**\n     * Gets the collection of people who have liked this item\n     */\n    public getLikedBy(): Promise<LikeData[]> {\n        return this.clone(Item, \"likedBy\").postCore<LikeData[]>();\n    }\n\n    /**\n     * Likes this item as the current user\n     */\n    public like(): Promise<void> {\n        return this.clone(Item, \"like\").postCore<void>();\n    }\n\n    /**\n     * Unlikes this item as the current user\n     */\n    public unlike(): Promise<void> {\n        return this.clone(Item, \"unlike\").postCore<void>();\n    }\n\n    /**\n     * Moves the list item to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(Item, \"recycle\").postCore();\n    }\n\n    /**\n     * Gets a string representation of the full URL to the WOPI frame.\n     * If there is no associated WOPI application, or no associated action, an empty string is returned.\n     *\n     * @param action Display mode: 0: view, 1: edit, 2: mobileView, 3: interactivePreview\n     */\n    public getWopiFrameUrl(action = 0): Promise<string> {\n        const i = this.clone(Item, \"getWOPIFrameUrl(@action)\");\n        i.query.set(\"@action\", <any>action);\n        return i.postCore().then((data: any) => {\n\n            // handle verbose mode\n            if (hOP(data, \"GetWOPIFrameUrl\")) {\n                return data.GetWOPIFrameUrl;\n            }\n\n            return data;\n        });\n    }\n\n    /**\n     * Validates and sets the values of the specified collection of fields for the list item.\n     *\n     * @param formValues The fields to change and their new values.\n     * @param newDocumentUpdate true if the list item is a document being updated after upload; otherwise false.\n     */\n    public validateUpdateListItem(formValues: ListItemFormUpdateValue[], newDocumentUpdate = false): Promise<ListItemFormUpdateValue[]> {\n        return this.clone(Item, \"validateupdatelistitem\").postCore({\n            body: jsS({ \"formValues\": formValues, bNewDocumentUpdate: newDocumentUpdate }),\n        });\n    }\n\n    /**\n     * Get the like by information for a modern site page     \n     */\n    public getLikedByInformation(): Promise<void> {\n        return this.clone(Item, \"likedByInformation\").expand(\"likedby\").getCore<void>();\n    }\n\n    /**\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\n     *\n     * @param candidatelistItemEntityTypeFullName The potential type name\n     */\n    private ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName: string): Promise<string> {\n\n        return candidatelistItemEntityTypeFullName ?\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\n            this.list.getListItemEntityTypeFullName();\n    }\n}\n\nexport interface ItemAddResult {\n    item: Item;\n    data: any;\n}\n\nexport interface ItemUpdateResult {\n    item: Item;\n    data: ItemUpdateResultData;\n}\n\nexport interface ItemUpdateResultData {\n    \"odata.etag\": string;\n}\n\n/**\n * Describes a collection of Version objects\n *\n */\n@defaultPath(\"versions\")\nexport class ItemVersions extends SharePointQueryableCollection {\n    /**\t\n     * Gets a version by id\t\n     *\t\n     * @param versionId The id of the version to retrieve\t\n     */\n    public getById(versionId: number): ItemVersion {\n        const v = new ItemVersion(this);\n        v.concat(`(${versionId})`);\n        return v;\n    }\n}\n\n/**\n * Describes a single Version instance\n *\n */\nexport class ItemVersion extends SharePointQueryableInstance {\n\n    /**\n    * Delete a specific version of a file.\n    *\n    * @param eTag Value used in the IF-Match header, by default \"*\"\n    */\n    public delete = this._deleteWithETag;\n}\n\n/**\n * Provides paging functionality for list items\n */\nexport class PagedItemCollection<T> {\n\n    constructor(private parent: Items, private nextUrl: string, public results: T, private innerParser: ODataParser<T>) { }\n\n    /**\n     * If true there are more results available in the set, otherwise there are not\n     */\n    public get hasNext(): boolean {\n        return typeof this.nextUrl === \"string\" && this.nextUrl.length > 0;\n    }\n\n    /**\n     * Gets the next set of results, or resolves to null if no results are available\n     */\n    public getNext(): Promise<PagedItemCollection<T>> {\n\n        if (this.hasNext) {\n            const items = new Items(this.nextUrl, null).configureFrom(this.parent);\n            return items.getPaged<T>(this.innerParser);\n        }\n\n        return new Promise<any>(r => r(null));\n    }\n}\n\nclass PagedItemCollectionParser<T> extends ODataParserBase<PagedItemCollection<T>> {\n\n    constructor(private _parent: Items, private innerParser: ODataParser<T>) {\n        super();\n    }\n\n    public parse(r: Response): Promise<PagedItemCollection<T>> {\n\n        return this.innerParser.parse(r).then(async items => {\n\n            const json = (<any>this.innerParser).rawJson;\n\n            const nextUrl = hOP(json, \"d\") && hOP(json.d, \"__next\") ? json.d.__next : json[\"odata.nextLink\"];\n\n            return new PagedItemCollection(this._parent, nextUrl, items, this.innerParser);\n        });\n    }\n}\n\nclass ItemUpdatedParser extends ODataParserBase<ItemUpdateResultData> {\n    public async parse(r: Response): Promise<ItemUpdateResultData> {\n        return new Promise<ItemUpdateResultData>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                resolve({\n                    \"odata.etag\": r.headers.get(\"etag\"),\n                });\n            }\n        });\n    }\n}\n","import { SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { TextParser, BlobParser, JSONParser, BufferParser } from \"@pnp/odata\";\nimport { extend, getGUID, stringIsNullOrEmpty } from \"@pnp/common\";\nimport { LimitedWebPartManager } from \"./webparts\";\nimport { Item } from \"./items\";\nimport { SharePointQueryableShareableFile } from \"./sharepointqueryableshareable\";\nimport { odataUrlFrom } from \"./odata\";\n\nexport interface ChunkedFileUploadProgressData {\n    uploadId: string;\n    stage: \"starting\" | \"continue\" | \"finishing\";\n    blockNumber: number;\n    totalBlocks: number;\n    chunkSize: number;\n    currentPointer: number;\n    fileSize: number;\n}\n\nexport interface AddUsingPathProps {\n    /**\n     * Overwrite the file if it exists\n     */\n    Overwrite: boolean;\n    /**\n     * specifies whether to auto checkout on invalid Data. It'll be useful if the list contains validation whose requirements upload will not be able to meet.\n     */\n    AutoCheckoutOnInvalidData?: boolean;\n    /**\n     * Specifies a XOR hash of the file data which should be used to ensure end-2-end data integrity, base64 representation\n     */\n    XorHash?: string;\n}\n\n/**\n * Describes a collection of File objects\n *\n */\n@defaultPath(\"files\")\nexport class Files extends SharePointQueryableCollection {\n\n    /**\n     * Gets a File by filename\n     *\n     * @param name The name of the file, including extension.\n     */\n    public getByName(name: string): File {\n        const f = new File(this);\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Uploads a file. Not supported for batching\n     *\n     * @param url The folder-relative url of the file.\n     * @param content The file contents blob.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\n     * @returns The new File and the raw response.\n     */\n    public add(url: string, content: string | ArrayBuffer | Blob, shouldOverWrite = true): Promise<FileAddResult> {\n        return new Files(this, `add(overwrite=${shouldOverWrite},url='${url}')`)\n            .postCore({\n                body: content,\n            }).then((response) => {\n                return {\n                    data: response,\n                    file: this.getByName(url),\n                };\n            });\n    }\n\n    /**\n     * Adds a file using the pound percent safe methods\n     * \n     * @param url Excoded url of the file\n     * @param content The file content\n     * @param parameters Additional parameters to control method behavior\n     */\n    public addUsingPath(url: string, content: string | ArrayBuffer | Blob, parameters: AddUsingPathProps = { Overwrite: false }): Promise<FileAddResult> {\n\n        const path = [`AddUsingPath(decodedurl='${url}'`];\n\n        if (parameters) {\n            if (parameters.Overwrite) {\n                path.push(\",Overwrite=true\");\n            }\n            if (parameters.AutoCheckoutOnInvalidData) {\n                path.push(\",AutoCheckoutOnInvalidData=true\");\n            }\n            if (!stringIsNullOrEmpty(parameters.XorHash)) {\n                path.push(`,XorHash=${parameters.XorHash}`);\n            }\n        }\n\n        path.push(\")\");\n\n        return new Files(this, path.join(\"\"))\n            .postCore({\n                body: content,\n            }).then((response) => {\n                return {\n                    data: response,\n                    file: this.getByName(url),\n                };\n            });\n    }\n\n    /**\n     * Uploads a file. Not supported for batching\n     *\n     * @param url The folder-relative url of the file.\n     * @param content The Blob file content to add\n     * @param progress A callback function which can be used to track the progress of the upload\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\n     * @returns The new File and the raw response.\n     */\n    public addChunked(\n        url: string,\n        content: Blob,\n        progress?: (data: ChunkedFileUploadProgressData) => void,\n        shouldOverWrite = true,\n        chunkSize = 10485760,\n    ): Promise<FileAddResult> {\n        const adder = this.clone(Files, `add(overwrite = ${ shouldOverWrite }, url = '${url}')`, false);\n        return adder.postCore()\n            .then(() => this.getByName(url))\n            .then(file => file.setContentChunked(content, progress, chunkSize));\n    }\n\n    /**\n     * Adds a ghosted file to an existing list or document library. Not supported for batching.\n     *\n     * @param fileUrl The server-relative url where you want to save the file.\n     * @param templateFileType The type of use to create the file.\n     * @returns The template file that was added and the raw response.\n     */\n    public addTemplateFile(fileUrl: string, templateFileType: TemplateFileType): Promise<FileAddResult> {\n        return this.clone(Files, `addTemplateFile(urloffile = '${fileUrl}', templatefiletype = ${ templateFileType })`, false)\n            .postCore().then((response) => {\n                return {\n                    data: response,\n                    file: this.getByName(fileUrl),\n                };\n            });\n    }\n}\n\n/**\n * Describes a single File instance\n *\n */\nexport class File extends SharePointQueryableShareableFile {\n\n    /**\n     * Gets a value that specifies the list item field values for the list item corresponding to the file.\n     *\n     */\n    public get listItemAllFields(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"listItemAllFields\");\n    }\n\n    /**\n     * Gets a collection of versions\n     *\n     */\n    public get versions(): Versions {\n        return new Versions(this);\n    }\n\n    /**\n     * Approves the file submitted for content approval with the specified comment.\n     * Only documents in lists that are enabled for content approval can be approved.\n     *\n     * @param comment The comment for the approval.\n     */\n    public approve(comment = \"\"): Promise<void> {\n        return this.clone(File, `approve(comment = '${comment}')`).postCore();\n    }\n\n    /**\n     * Stops the chunk upload session without saving the uploaded data. Does not support batching.\n     * If the file doesn’t already exist in the library, the partially uploaded file will be deleted.\n     * Use this in response to user action (as in a request to cancel an upload) or an error or exception.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     */\n    public cancelUpload(uploadId: string): Promise<void> {\n        return this.clone(File, `cancelUpload(uploadId = guid'${uploadId}')`, false).postCore();\n    }\n\n    /**\n     * Checks the file in to a document library based on the check-in type.\n     *\n     * @param comment A comment for the check-in. Its length must be <= 1023.\n     * @param checkinType The check-in type for the file.\n     */\n    public checkin(comment = \"\", checkinType = CheckinType.Major): Promise<void> {\n\n        if (comment.length > 1023) {\n            throw Error(\"The maximum comment length is 1023 characters.\");\n        }\n\n        return this.clone(File, `checkin(comment = '${comment}', checkintype = ${ checkinType })`).postCore();\n    }\n\n    /**\n     * Checks out the file from a document library.\n     */\n    public checkout(): Promise<void> {\n        return this.clone(File, \"checkout\").postCore();\n    }\n\n    /**\n     * Copies the file to the destination url.\n     *\n     * @param url The absolute url or server relative url of the destination file path to copy to.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten?\n     */\n    public copyTo(url: string, shouldOverWrite = true): Promise<void> {\n        return this.clone(File, `copyTo(strnewurl = '${url}', boverwrite = ${ shouldOverWrite })`).postCore();\n    }\n\n    /**\n     * Delete this file.\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.clone(File, null).postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Denies approval for a file that was submitted for content approval.\n     * Only documents in lists that are enabled for content approval can be denied.\n     *\n     * @param comment The comment for the denial.\n     */\n    public deny(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw Error(\"The maximum comment length is 1023 characters.\");\n        }\n        return this.clone(File, `deny(comment = '${comment}')`).postCore();\n    }\n\n    /**\n     * Specifies the control set used to access, modify, or add Web Parts associated with this Web Part Page and view.\n     * An exception is thrown if the file is not an ASPX page.\n     *\n     * @param scope The WebPartsPersonalizationScope view on the Web Parts page.\n     */\n    public getLimitedWebPartManager(scope = WebPartsPersonalizationScope.Shared): LimitedWebPartManager {\n        return new LimitedWebPartManager(this, `getLimitedWebPartManager(scope = ${ scope })`);\n    }\n\n    /**\n     * Moves the file to the specified destination url.\n     *\n     * @param url The absolute url or server relative url of the destination file path to move to.\n     * @param moveOperations The bitwise MoveOperations value for how to move the file.\n     */\n    public moveTo(url: string, moveOperations = MoveOperations.Overwrite): Promise<void> {\n        return this.clone(File, `moveTo(newurl = '${url}', flags = ${ moveOperations })`).postCore();\n    }\n\n    /**\n     * Submits the file for content approval with the specified comment.\n     *\n     * @param comment The comment for the published file. Its length must be <= 1023.\n     */\n    public publish(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw Error(\"The maximum comment length is 1023 characters.\");\n        }\n        return this.clone(File, `publish(comment = '${comment}')`).postCore();\n    }\n\n    /**\n     * Moves the file to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     *\n     * @returns The GUID of the recycled file.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(File, \"recycle\").postCore();\n    }\n\n    /**\n     * Reverts an existing checkout for the file.\n     *\n     */\n    public undoCheckout(): Promise<void> {\n        return this.clone(File, \"undoCheckout\").postCore();\n    }\n\n    /**\n     * Removes the file from content approval or unpublish a major version.\n     *\n     * @param comment The comment for the unpublish operation. Its length must be <= 1023.\n     */\n    public unpublish(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw Error(\"The maximum comment length is 1023 characters.\");\n        }\n        return this.clone(File, `unpublish(comment = '${comment}')`).postCore();\n    }\n\n    /**\n     * Gets the contents of the file as text. Not supported in batching.\n     *\n     */\n    public getText(): Promise<string> {\n\n        return this.clone(File, \"$value\", false).get(new TextParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Gets the contents of the file as a blob, does not work in Node.js. Not supported in batching.\n     *\n     */\n    public getBlob(): Promise<Blob> {\n\n        return this.clone(File, \"$value\", false).get(new BlobParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n\n        return this.clone(File, \"$value\", false).get(new BufferParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\n     */\n    public getJSON(): Promise<any> {\n\n        return this.clone(File, \"$value\", false).get(new JSONParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Sets the content of a file, for large files use setContentChunked. Not supported in batching.\n     *\n     * @param content The file content\n     *\n     */\n    public setContent(content: string | ArrayBuffer | Blob): Promise<File> {\n\n        return this.clone(File, \"$value\", false).postCore({\n            body: content,\n            headers: {\n                \"X-HTTP-Method\": \"PUT\",\n            },\n        }).then(_ => new File(this));\n    }\n\n    /**\n     * Gets the associated list item for this folder, loading the default properties\n     */\n    public getItem<T>(...selects: string[]): Promise<Item & T> {\n\n        const q = this.listItemAllFields;\n        return q.select.apply(q, selects).get().then((d: any) => {\n\n            return extend((new Item(odataUrlFrom(d))).configureFrom(this), d);\n        });\n    }\n\n    /**\n     * Sets the contents of a file using a chunked upload approach. Not supported in batching.\n     *\n     * @param file The file to upload\n     * @param progress A callback function which can be used to track the progress of the upload\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\n     */\n    public setContentChunked(file: Blob, progress?: (data: ChunkedFileUploadProgressData) => void, chunkSize = 10485760): Promise<FileAddResult> {\n\n        if (progress === undefined) {\n            progress = () => null;\n        }\n\n        const fileSize = file.size;\n        const blockCount = parseInt((file.size / chunkSize).toString(), 10) + ((file.size % chunkSize === 0) ? 1 : 0);\n        const uploadId = getGUID();\n\n        // start the chain with the first fragment\n        progress({ uploadId, blockNumber: 1, chunkSize, currentPointer: 0, fileSize, stage: \"starting\", totalBlocks: blockCount });\n\n        let chain = this.startUpload(uploadId, file.slice(0, chunkSize));\n\n        // skip the first and last blocks\n        for (let i = 2; i < blockCount; i++) {\n            chain = chain.then(pointer => {\n                progress({ uploadId, blockNumber: i, chunkSize, currentPointer: pointer, fileSize, stage: \"continue\", totalBlocks: blockCount });\n                return this.continueUpload(uploadId, pointer, file.slice(pointer, pointer + chunkSize));\n            });\n        }\n\n        return chain.then(pointer => {\n            progress({ uploadId, blockNumber: blockCount, chunkSize, currentPointer: pointer, fileSize, stage: \"finishing\", totalBlocks: blockCount });\n            return this.finishUpload(uploadId, pointer, file.slice(pointer));\n        });\n    }\n\n    /**\n     * Starts a new chunk upload session and uploads the first fragment.\n     * The current file content is not changed when this method completes.\n     * The method is idempotent (and therefore does not change the result) as long as you use the same values for uploadId and stream.\n     * The upload session ends either when you use the CancelUpload method or when you successfully\n     * complete the upload session by passing the rest of the file contents through the ContinueUpload and FinishUpload methods.\n     * The StartUpload and ContinueUpload methods return the size of the running total of uploaded data in bytes,\n     * so you can pass those return values to subsequent uses of ContinueUpload and FinishUpload.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fragment The file contents.\n     * @returns The size of the total uploaded data in bytes.\n     */\n    protected startUpload(uploadId: string, fragment: ArrayBuffer | Blob): Promise<number> {\n        return this.clone(File, `startUpload(uploadId = guid'${uploadId}')`, false)\n            .postCore<string>({ body: fragment })\n            .then(n => {\n                // When OData=verbose the payload has the following shape:\n                // { StartUpload: \"10485760\" }\n                if (typeof n === \"object\") {\n                    n = (n as any).StartUpload;\n                }\n                return parseFloat(n);\n            });\n    }\n\n    /**\n     * Continues the chunk upload session with an additional fragment.\n     * The current file content is not changed.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fileOffset The size of the offset into the file where the fragment starts.\n     * @param fragment The file contents.\n     * @returns The size of the total uploaded data in bytes.\n     */\n    protected continueUpload(uploadId: string, fileOffset: number, fragment: ArrayBuffer | Blob): Promise<number> {\n        return this.clone(File, `continueUpload(uploadId = guid'${uploadId}', fileOffset = ${ fileOffset })`, false)\n            .postCore<string>({ body: fragment })\n            .then(n => {\n                // When OData=verbose the payload has the following shape:\n                // { ContinueUpload: \"20971520\" }\n                if (typeof n === \"object\") {\n                    n = (n as any).ContinueUpload;\n                }\n                return parseFloat(n);\n            });\n    }\n\n    /**\n     * Uploads the last file fragment and commits the file. The current file content is changed when this method completes.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fileOffset The size of the offset into the file where the fragment starts.\n     * @param fragment The file contents.\n     * @returns The newly uploaded file.\n     */\n    protected finishUpload(uploadId: string, fileOffset: number, fragment: ArrayBuffer | Blob): Promise<FileAddResult> {\n        return this.clone(File, `finishUpload(uploadId = guid'${uploadId}', fileOffset = ${ fileOffset })`, false)\n            .postCore<{ ServerRelativeUrl: string }>({ body: fragment })\n            .then(response => {\n                return {\n                    data: response,\n                    file: new File(odataUrlFrom(response)),\n                };\n            });\n    }\n}\n\n/**\n * Describes a collection of Version objects\n *\n */\n@defaultPath(\"versions\")\nexport class Versions extends SharePointQueryableCollection {\n\n    /**\t\n     * Gets a version by id\t\n     *\t\n     * @param versionId The id of the version to retrieve\t\n     */\n    public getById(versionId: number): Version {\n        const v = new Version(this);\n        v.concat(`(${ versionId })`);\n        return v;\n    }\n\n    /**\n     * Deletes all the file version objects in the collection.\n     *\n     */\n    public deleteAll(): Promise<void> {\n        return new Versions(this, \"deleteAll\").postCore();\n    }\n\n    /**\n     * Deletes the specified version of the file.\n     *\n     * @param versionId The ID of the file version to delete.\n     */\n    public deleteById(versionId: number): Promise<void> {\n        return this.clone(Versions, `deleteById(vid = ${ versionId })`).postCore();\n    }\n\n    /**\n     * Recycles the specified version of the file.\n     *\n     * @param versionId The ID of the file version to delete.\n     */\n    public recycleByID(versionId: number): Promise<void> {\n        return this.clone(Versions, `recycleByID(vid = ${ versionId })`).postCore();\n    }\n\n    /**\n     * Deletes the file version object with the specified version label.\n     *\n     * @param label The version label of the file version to delete, for example: 1.2\n     */\n    public deleteByLabel(label: string): Promise<void> {\n        return this.clone(Versions, `deleteByLabel(versionlabel = '${label}')`).postCore();\n    }\n\n    /**\n     * Recycles the file version object with the specified version label.\n     *\n     * @param label The version label of the file version to delete, for example: 1.2\n     */\n    public recycleByLabel(label: string): Promise<void> {\n        return this.clone(Versions, `recycleByLabel(versionlabel = '${label}')`).postCore();\n    }\n\n    /**\n     * Creates a new file version from the file specified by the version label.\n     *\n     * @param label The version label of the file version to restore, for example: 1.2\n     */\n    public restoreByLabel(label: string): Promise<void> {\n        return this.clone(Versions, `restoreByLabel(versionlabel = '${label}')`).postCore();\n    }\n}\n\n/**\n * Describes a single Version instance\n *\n */\nexport class Version extends SharePointQueryableInstance {\n\n    /**\n    * Delete a specific version of a file.\n    *\n    * @param eTag Value used in the IF-Match header, by default \"*\"\n    */\n    public delete = this._deleteWithETag;\n\n    // /**\n    // * Delete a specific version of a file.\n    // *\n    // * @param eTag Value used in the IF-Match header, by default \"*\"\n    // */\n    // public delete(eTag = \"*\"): Promise<void> {\n    //     return this.postCore({\n    //         headers: {\n    //             \"IF-Match\": eTag,\n    //             \"X-HTTP-Method\": \"DELETE\",\n    //         },\n    //     });\n    // }\n}\n\nexport enum CheckinType {\n    Minor = 0,\n    Major = 1,\n    Overwrite = 2,\n}\n\nexport interface FileAddResult {\n    file: File;\n    data: any;\n}\n\nexport enum WebPartsPersonalizationScope {\n    User = 0,\n    Shared = 1,\n}\n\nexport enum MoveOperations {\n    Overwrite = 1,\n    AllowBrokenThickets = 8,\n}\n\nexport enum TemplateFileType {\n    StandardPage = 0,\n    WikiPage = 1,\n    FormPage = 2,\n    ClientSidePage = 3,\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { File } from \"./files\";\nimport { odataUrlFrom } from \"./odata\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\n\n/**\n * Represents an app catalog\n */\nexport class AppCatalog extends SharePointQueryableCollection {\n\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/web/tenantappcatalog/AvailableApps\") {\n        super(extractWebUrl(typeof baseUrl === \"string\" ? baseUrl : baseUrl.toUrl()), path);\n    }\n\n    /**\n     * Get details of specific app from the app catalog\n     * @param id - Specify the guid of the app\n     */\n    public getAppById(id: string): App {\n        return new App(this, `getById('${id}')`);\n    }\n\n    /**\n     * Uploads an app package. Not supported for batching\n     *\n     * @param filename Filename to create.\n     * @param content app package data (eg: the .app or .sppkg file).\n     * @param shouldOverWrite Should an app with the same name in the same location be overwritten? (default: true)\n     * @returns Promise<AppAddResult>\n     */\n    public add(filename: string, content: string | ArrayBuffer | Blob, shouldOverWrite = true): Promise<AppAddResult> {\n\n        const catalog = this.toUrl().indexOf(\"tenantappcatalog\") > 0 ? \"tenantappcatalog\" : \"sitecollectionappcatalog\";\n\n        // you don't add to the availableapps collection\n        const adder = new AppCatalog(extractWebUrl(this.toUrl()), `_api/web/${catalog}/add(overwrite=${shouldOverWrite},url='${filename}')`);\n\n        return adder.postCore({\n            body: content,\n        }).then(r => {\n            return {\n                data: r,\n                file: new File(odataUrlFrom(r)),\n            };\n        });\n    }\n}\n\n/**\n * Represents the actions you can preform on a given app within the catalog\n */\nexport class App extends SharePointQueryableInstance {\n\n    /**\n     * This method deploys an app on the app catalog.  It must be called in the context\n     * of the tenant app catalog web or it will fail.\n     * \n     * @param skipFeatureDeployment Deploy the app to the entire tenant\n     */\n    public deploy(skipFeatureDeployment = false): Promise<void> {\n        return this.clone(App, `Deploy(${skipFeatureDeployment})`).postCore();\n    }\n\n    /**\n     * This method retracts a deployed app on the app catalog.  It must be called in the context\n     * of the tenant app catalog web or it will fail.\n     */\n    public retract(): Promise<void> {\n        return this.clone(App, \"Retract\").postCore();\n    }\n\n    /**\n     * This method allows an app which is already deployed to be installed on a web\n     */\n    public install(): Promise<void> {\n        return this.clone(App, \"Install\").postCore();\n    }\n\n    /**\n     * This method allows an app which is already insatlled to be uninstalled on a web\n     */\n    public uninstall(): Promise<void> {\n        return this.clone(App, \"Uninstall\").postCore();\n    }\n\n    /**\n     * This method allows an app which is already insatlled to be upgraded on a web\n     */\n    public upgrade(): Promise<void> {\n        return this.clone(App, \"Upgrade\").postCore();\n    }\n\n    /**\n     * This method removes an app from the app catalog.  It must be called in the context\n     * of the tenant app catalog web or it will fail.\n     */\n    public remove(): Promise<void> {\n        return this.clone(App, \"Remove\").postCore();\n    }\n}\n\nexport interface AppAddResult {\n    data: any;\n    file: File;\n}\n","import { ODataBatch } from \"@pnp/odata\";\nimport { getGUID, isUrlAbsolute, combine, mergeHeaders, hOP } from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { SPHttpClient } from \"./net/sphttpclient\";\nimport { SPRuntimeConfig } from \"./config/splibconfig\";\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\n\n/**\n * Manages a batch of OData operations\n */\nexport class SPBatch extends ODataBatch {\n\n    constructor(private baseUrl: string) {\n        super();\n    }\n\n    /**\n     * Parses the response from a batch request into an array of Response instances\n     *\n     * @param body Text body of the response from the batch request\n     */\n    public static ParseResponse(body: string): Promise<Response[]> {\n        return new Promise((resolve, reject) => {\n            const responses: Response[] = [];\n            const header = \"--batchresponse_\";\n            // Ex. \"HTTP/1.1 500 Internal Server Error\"\n            const statusRegExp = new RegExp(\"^HTTP/[0-9.]+ +([0-9]+) +(.*)\", \"i\");\n            const lines = body.split(\"\\n\");\n            let state = \"batch\";\n            let status: number;\n            let statusText: string;\n            for (let i = 0; i < lines.length; ++i) {\n                const line = lines[i];\n                switch (state) {\n                    case \"batch\":\n                        if (line.substr(0, header.length) === header) {\n                            state = \"batchHeaders\";\n                        } else {\n                            if (line.trim() !== \"\") {\n                                throw Error(`Invalid response, line ${i}`);\n                            }\n                        }\n                        break;\n                    case \"batchHeaders\":\n                        if (line.trim() === \"\") {\n                            state = \"status\";\n                        }\n                        break;\n                    case \"status\":\n                        const parts = statusRegExp.exec(line);\n                        if (parts.length !== 3) {\n                            throw Error(`Invalid status, line ${i}`);\n                        }\n                        status = parseInt(parts[1], 10);\n                        statusText = parts[2];\n                        state = \"statusHeaders\";\n                        break;\n                    case \"statusHeaders\":\n                        if (line.trim() === \"\") {\n                            state = \"body\";\n                        }\n                        break;\n                    case \"body\":\n                        responses.push((status === 204) ? new Response() : new Response(line, { status: status, statusText: statusText }));\n                        state = \"batch\";\n                        break;\n                }\n            }\n            if (state !== \"status\") {\n                reject(Error(\"Unexpected end of input\"));\n            }\n            resolve(responses);\n        });\n    }\n\n    protected executeImpl(): Promise<void> {\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\n\n        // if we don't have any requests, don't bother sending anything\n        // this could be due to caching further upstream, or just an empty batch\n        if (this.requests.length < 1) {\n            Logger.write(`Resolving empty batch.`, LogLevel.Info);\n            return Promise.resolve();\n        }\n\n        // creating the client here allows the url to be populated for nodejs client as well as potentially\n        // any other hacks needed for other types of clients. Essentially allows the absoluteRequestUrl\n        // below to be correct\n        const client = new SPHttpClient();\n\n        // due to timing we need to get the absolute url here so we can use it for all the individual requests\n        // and for sending the entire batch\n        return toAbsoluteUrl(this.baseUrl).then(absoluteRequestUrl => {\n\n            // build all the requests, send them, pipe results in order to parsers\n            const batchBody: string[] = [];\n\n            let currentChangeSetId = \"\";\n\n            for (let i = 0; i < this.requests.length; i++) {\n                const reqInfo = this.requests[i];\n\n                if (reqInfo.method === \"GET\") {\n\n                    if (currentChangeSetId.length > 0) {\n                        // end an existing change set\n                        batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\n                        currentChangeSetId = \"\";\n                    }\n\n                    batchBody.push(`--batch_${this.batchId}\\n`);\n\n                } else {\n\n                    if (currentChangeSetId.length < 1) {\n                        // start new change set\n                        currentChangeSetId = getGUID();\n                        batchBody.push(`--batch_${this.batchId}\\n`);\n                        batchBody.push(`Content-Type: multipart/mixed; boundary=\"changeset_${currentChangeSetId}\"\\n\\n`);\n                    }\n\n                    batchBody.push(`--changeset_${currentChangeSetId}\\n`);\n                }\n\n                // common batch part prefix\n                batchBody.push(`Content-Type: application/http\\n`);\n                batchBody.push(`Content-Transfer-Encoding: binary\\n\\n`);\n\n                const headers = new Headers();\n\n                // this is the url of the individual request within the batch\n                const url = isUrlAbsolute(reqInfo.url) ? reqInfo.url : combine(absoluteRequestUrl, reqInfo.url);\n\n                Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Adding request ${reqInfo.method} ${url} to batch.`, LogLevel.Verbose);\n\n                if (reqInfo.method !== \"GET\") {\n\n                    let method = reqInfo.method;\n\n                    const castHeaders: any = reqInfo.options.headers;\n                    if (hOP(reqInfo, \"options\") && hOP(reqInfo.options, \"headers\") && castHeaders[\"X-HTTP-Method\"] !== undefined) {\n\n                        method = castHeaders[\"X-HTTP-Method\"];\n                        delete castHeaders[\"X-HTTP-Method\"];\n                    }\n\n                    batchBody.push(`${method} ${url} HTTP/1.1\\n`);\n\n                    headers.set(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n\n                } else {\n                    batchBody.push(`${reqInfo.method} ${url} HTTP/1.1\\n`);\n                }\n\n                // merge global config headers\n                mergeHeaders(headers, SPRuntimeConfig.headers);\n\n                // merge per-request headers\n                if (reqInfo.options) {\n                    mergeHeaders(headers, reqInfo.options.headers);\n                }\n\n                // lastly we apply any default headers we need that may not exist\n                if (!headers.has(\"Accept\")) {\n                    headers.append(\"Accept\", \"application/json\");\n                }\n\n                if (!headers.has(\"Content-Type\")) {\n                    headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n                }\n\n                if (!headers.has(\"X-ClientService-ClientTag\")) {\n                    headers.append(\"X-ClientService-ClientTag\", \"PnPCoreJS:@pnp-$$Version$$\");\n                }\n\n                // write headers into batch body\n                headers.forEach((value: string, name: string) => {\n                    batchBody.push(`${name}: ${value}\\n`);\n                });\n\n                batchBody.push(\"\\n\");\n\n                if (reqInfo.options.body) {\n                    batchBody.push(`${reqInfo.options.body}\\n\\n`);\n                }\n            }\n\n            if (currentChangeSetId.length > 0) {\n                // Close the changeset\n                batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\n                currentChangeSetId = \"\";\n            }\n\n            batchBody.push(`--batch_${this.batchId}--\\n`);\n\n            const batchOptions = {\n                \"body\": batchBody.join(\"\"),\n                \"headers\": {\n                    \"Content-Type\": `multipart/mixed; boundary=batch_${this.batchId}`,\n                },\n                \"method\": \"POST\",\n            };\n\n            Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\n\n            return client.fetch(combine(absoluteRequestUrl, \"/_api/$batch\"), batchOptions)\n                .then(r => r.text())\n                .then(SPBatch.ParseResponse)\n                .then((responses: Response[]) => {\n\n                    if (responses.length !== this.requests.length) {\n                        throw Error(\"Could not properly parse responses to match requests in batch.\");\n                    }\n\n                    Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\n\n                    return responses.reduce((chain, response, index) => {\n\n                        const request = this.requests[index];\n\n                        Logger.write(`[${request.id}] (${(new Date()).getTime()}) Resolving request in batch ${this.batchId}.`, LogLevel.Info);\n\n                        return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\n\n                    }, Promise.resolve());\n                });\n        });\n    }\n}\n","import { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { jsS } from \"@pnp/common\";\n\n/**\n * Describes a collection of List objects\n *\n */\n@defaultPath(\"features\")\nexport class Features extends SharePointQueryableCollection {\n\n    /**\n     * Adds a new list to the collection\n     *\n     * @param id The Id of the feature (GUID)\n     * @param force If true the feature activation will be forced\n     */\n    public add(id: string, force = false): Promise<FeatureAddResult> {\n\n        return this.clone(Features, \"add\").postCore({\n            body: jsS({\n                featdefScope: 0,\n                featureId: id,\n                force: force,\n            }),\n        }).then(data => {\n            return {\n                data: data,\n                feature: this.getById(id),\n            };\n        });\n    }\n\n    /**\t    \n     * Gets a list from the collection by guid id\t     \n     *\t    \n     * @param id The Id of the feature (GUID)\t    \n     */\n    public getById(id: string): Feature {\n        const feature = new Feature(this);\n        feature.concat(`('${id}')`);\n        return feature;\n    }\n\n    /**\n     * Removes (deactivates) a feature from the collection\n     *\n     * @param id The Id of the feature (GUID)\n     * @param force If true the feature deactivation will be forced\n     */\n    public remove(id: string, force = false): Promise<any> {\n\n        return this.clone(Features, \"remove\").postCore({\n            body: jsS({\n                featureId: id,\n                force: force,\n            }),\n        });\n    }\n}\n\nexport class Feature extends SharePointQueryableInstance {\n\n    /**\n     * Removes (deactivates) a feature from the collection\n     *\n     * @param force If true the feature deactivation will be forced\n     */\n    public deactivate(force = false): Promise<any> {\n\n        const removeDependency = this.addBatchDependency();\n\n        const idGet = new Feature(this).select(\"DefinitionId\");\n\n        return idGet.get<{ DefinitionId: string }>().then(feature => {\n\n            const promise = this.getParent(Features, this.parentUrl, \"\", this.batch).remove(feature.DefinitionId, force);\n\n            removeDependency();\n\n            return promise;\n        });\n    }\n}\n\nexport interface FeatureAddResult {\n    data: any;\n    feature: Feature;\n}\n","import { SharePointQueryable, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { Web } from \"./webs\";\nimport { UserCustomActions } from \"./usercustomactions\";\nimport { ContextInfo, DocumentLibraryInformation, ChangeQuery } from \"./types\";\nimport { SPBatch } from \"./batch\";\nimport { Features } from \"./features\";\nimport { hOP, jsS, extend } from \"@pnp/common\";\nimport { SPHttpClient } from \"./net/sphttpclient\";\n\n/**\n * Describes a site collection\n *\n */\n@defaultPath(\"_api/site\")\nexport class Site extends SharePointQueryableInstance {\n\n    /**\n     * Gets the root web of the site collection\n     *\n     */\n    public get rootWeb(): Web {\n        return new Web(this, \"rootweb\");\n    }\n\n    /**\n     * Gets the active features for this site collection\n     *\n     */\n    public get features(): Features {\n        return new Features(this);\n    }\n\n    /**\n     * Gets all custom actions for this site collection\n     *\n     */\n    public get userCustomActions(): UserCustomActions {\n        return new UserCustomActions(this);\n    }\n\n    /**\n     * Gets a Web instance representing the root web of the site collection\n     * correctly setup for chaining within the library\n     */\n    public getRootWeb(): Promise<Web> {\n        return this.rootWeb.select(\"Url\").get().then(web => new Web(web.Url));\n    }\n\n    /**\n     * Gets the context information for this site collection\n     */\n    public getContextInfo(): Promise<ContextInfo> {\n        const q = new Site(this.parentUrl, \"_api/contextinfo\");\n        return q.postCore().then(data => {\n            if (hOP(data, \"GetContextWebInformation\")) {\n                const info = data.GetContextWebInformation;\n                info.SupportedSchemaVersions = info.SupportedSchemaVersions.results;\n                return info;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Gets the document libraries on a site. Static method. (SharePoint Online only)\n     *\n     * @param absoluteWebUrl The absolute url of the web whose document libraries should be returned\n     */\n    public getDocumentLibraries(absoluteWebUrl: string): Promise<DocumentLibraryInformation[]> {\n        const q = new SharePointQueryable(\"\", \"_api/sp.web.getdocumentlibraries(@v)\");\n        q.query.set(\"@v\", \"'\" + absoluteWebUrl + \"'\");\n        return q.get().then(data => {\n            if (hOP(data, \"GetDocumentLibraries\")) {\n                return data.GetDocumentLibraries;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Gets the site url from a page url\n     *\n     * @param absolutePageUrl The absolute url of the page\n     */\n    public getWebUrlFromPageUrl(absolutePageUrl: string): Promise<string> {\n        const q = new SharePointQueryable(\"\", \"_api/sp.web.getweburlfrompageurl(@v)\");\n        q.query.set(\"@v\", `'${absolutePageUrl}'`);\n        return q.get().then(data => {\n            if (hOP(data, \"GetWebUrlFromPageUrl\")) {\n                return data.GetWebUrlFromPageUrl;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Returns the collection of changes from the change log that have occurred within the site, based on the specified query\n     *\n     * @param query The change query\n     */\n    public getChanges(query: ChangeQuery): Promise<any> {\n\n        const postBody = jsS({ \"query\": extend({ \"__metadata\": { \"type\": \"SP.ChangeQuery\" } }, query) });\n        return this.clone(Site, \"getchanges\").postCore({ body: postBody });\n    }\n\n    /**\n     * Deletes the current site\n     *\n     */\n    public async delete(): Promise<void> {\n        const site = await this.clone(Site, \"\").select(\"Id\").get<{ Id: string }>();\n\n        const q = new Site(this.parentUrl, \"_api/SPSiteManager/Delete\");\n        await q.postCore({\n            body: jsS({\n                siteId: site.Id,\n            }),\n        });\n    }\n\n    /**\n     * Creates a new batch for requests within the context of this site collection\n     *\n     */\n    public createBatch(): SPBatch {\n        return new SPBatch(this.parentUrl);\n    }\n\n    /**\n     * Opens a web by id (using POST)\n     *\n     * @param webId The GUID id of the web to open\n     */\n    public openWebById(webId: string): Promise<OpenWebByIdResult> {\n\n        return this.clone(Site, `openWebById('${webId}')`).postCore().then(d => ({\n            data: d,\n            web: Web.fromUrl(d[\"odata.id\"] || d.__metadata.uri),\n        }));\n    }\n\n    /**\n     * Associates a site collection to a hub site.\n     * \n     * @param siteId Id of the hub site collection you want to join.\n     * If you want to disassociate the site collection from hub site, then\n     * pass the siteId as 00000000-0000-0000-0000-000000000000\n     */\n    public joinHubSite(siteId: string): Promise<void> {\n        return this.clone(Site, `joinHubSite('${siteId}')`).postCore();\n    }\n\n    /**\n     * Registers the current site collection as hub site collection\n     */\n    public registerHubSite(): Promise<void> {\n        return this.clone(Site, `registerHubSite`).postCore();\n    }\n\n    /**\n     * Unregisters the current site collection as hub site collection.\n     */\n    public unRegisterHubSite(): Promise<void> {\n        return this.clone(Site, `unRegisterHubSite`).postCore();\n    }\n\n    /**\n     * Creates a Modern communication site.\n     * \n     * @param title The title of the site to create\n     * @param lcid The language to use for the site. If not specified will default to 1033 (English).\n     * @param shareByEmailEnabled If set to true, it will enable sharing files via Email. By default it is set to false\n     * @param url The fully qualified URL (e.g. https://yourtenant.sharepoint.com/sites/mysitecollection) of the site.\n     * @param description The description of the communication site.\n     * @param classification The Site classification to use. For instance 'Contoso Classified'. See https://www.youtube.com/watch?v=E-8Z2ggHcS0 for more information\n     * @param siteDesignId The Guid of the site design to be used.\n     *                     You can use the below default OOTB GUIDs:\n     *                     Topic: 00000000-0000-0000-0000-000000000000\n     *                     Showcase: 6142d2a0-63a5-4ba0-aede-d9fefca2c767\n     *                     Blank: f6cc5403-0d63-442e-96c0-285923709ffc\n     * @param hubSiteId The Guid of the already existing Hub site\n     * @param owner Required when creating the site using app-only context\n     */\n\n    public createCommunicationSite(\n        title: string,\n        lcid = 1033,\n        shareByEmailEnabled = false,\n        url: string,\n        description = \"\",\n        classification = \"\",\n        siteDesignId = \"00000000-0000-0000-0000-000000000000\",\n        hubSiteId = \"00000000-0000-0000-0000-000000000000\",\n        owner?: string,\n    ): Promise<ISPSiteCreationResponse> {\n\n        const props = {\n            Classification: classification,\n            Description: description,\n            HubSiteId: hubSiteId,\n            Lcid: lcid,\n            Owner: owner,\n            ShareByEmailEnabled: shareByEmailEnabled,\n            SiteDesignId: siteDesignId,\n            Title: title,\n            Url: url,\n            WebTemplate: \"SITEPAGEPUBLISHING#0\",\n            WebTemplateExtensionId: \"00000000-0000-0000-0000-000000000000\",\n        };\n\n        const postBody = jsS({\n            \"request\":\n                extend({\n                    \"__metadata\": { \"type\": \"Microsoft.SharePoint.Portal.SPSiteCreationRequest\" },\n                }, props),\n        });\n\n        return this.getRootWeb().then(async (d: any) => {\n\n            const client = new SPHttpClient();\n            const methodUrl = `${d.parentUrl}/_api/SPSiteManager/Create`;\n            return client.post(methodUrl, {\n                body: postBody,\n                headers: {\n                    \"Accept\": \"application/json;odata=verbose\",\n                    \"Content-Type\": \"application/json;odata=verbose;charset=utf-8\",\n                },\n            }).then(r => r.json()).then((n: any) => {\n\n                if (hOP(n, \"error\")) {\n                    throw n;\n                }\n\n                if (hOP(n, \"d\") && hOP(n.d, \"Create\")) {\n                    return n.d.Create;\n                }\n\n                return n;\n            });\n        });\n    }\n\n    /**\n     * Creates a Modern team site backed by Office 365 group. For use in SP Online only. This will not work with App-only tokens\n     * \n     * @param displayName The title or display name of the Modern team site to be created\n     * @param alias Alias of the underlying Office 365 Group\n     * @param isPublic Defines whether the Office 365 Group will be public (default), or private.\n     * @param lcid The language to use for the site. If not specified will default to English (1033).\n     * @param description The description of the site to be created.\n     * @param classification The Site classification to use. For instance 'Contoso Classified'. See https://www.youtube.com/watch?v=E-8Z2ggHcS0 for more information\n     * @param owners The Owners of the site to be created    \n     * @param siteDesignId The ID of the site design to apply to the new site \n     */\n\n    public createModernTeamSite(\n        displayName: string,\n        alias: string,\n        isPublic = true,\n        lcid = 1033,\n        description = \"\",\n        classification = \"\",\n        owners?: string[],\n        hubSiteId = \"00000000-0000-0000-0000-000000000000\",\n        siteDesignId?: string,\n    ): Promise<void> {\n\n        const postBody = {\n            alias: alias,\n            displayName: displayName,\n            isPublic: isPublic,\n            optionalParams: {\n                Classification: classification,\n                CreationOptions: {\n                    \"results\": [`SPSiteLanguage:${lcid}`, `HubSiteId:${hubSiteId}`],\n                },\n                Description: description,\n                Owners: {\n                    \"results\": owners ? owners : [],\n                },\n            },\n        };\n\n        if (siteDesignId) {\n            postBody.optionalParams.CreationOptions.results.push(`implicit_formula_292aa8a00786498a87a5ca52d9f4214a_${siteDesignId}`);\n        }\n\n        return this.getRootWeb().then(async (d: any) => {\n\n            const client = new SPHttpClient();\n            const methodUrl = `${d.parentUrl}/_api/GroupSiteManager/CreateGroupEx`;\n            return client.post(methodUrl, {\n                body: jsS(postBody),\n                headers: {\n                    \"Accept\": \"application/json;odata=verbose\",\n                    \"Content-Type\": \"application/json;odata=verbose;charset=utf-8\",\n                },\n            }).then(r => r.json());\n        });\n    }\n}\n\n/**\n * The result of opening a web by id: contains the data returned as well as a chainable web instance\n */\nexport interface OpenWebByIdResult {\n    data: any;\n    web: Web;\n}\n\n/**\n * The result of creating a site collection\n */\nexport interface ISPSiteCreationResponse {\n    SiteId: string;\n    SiteStatus: number;\n    SiteUrl: string;\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { MenuNodeCollection } from \"./types\";\nimport { jsS, extend, TypedHash } from \"@pnp/common\";\nimport { metadata } from \"./utils/metadata\";\n\n/**\n * Result from adding a navigation node\n *\n */\nexport interface NavigationNodeAddResult {\n    data: any;\n    node: NavigationNode;\n}\n\n/**\n * Represents a collection of navigation nodes\n *\n */\nexport class NavigationNodes extends SharePointQueryableCollection {\n\n    /**\t    \n     * Gets a navigation node by id\t\n     *\t\n     * @param id The id of the node\t\n     */\n    public getById(id: number): NavigationNode {\n        const node = new NavigationNode(this);\n        node.concat(`(${id})`);\n        return node;\n    }\n\n    /**\n     * Adds a new node to the collection\n     *\n     * @param title Display name of the node\n     * @param url The url of the node\n     * @param visible If true the node is visible, otherwise it is hidden (default: true)\n     */\n    public add(title: string, url: string, visible = true): Promise<NavigationNodeAddResult> {\n\n        const postBody = jsS(extend(metadata(\"SP.NavigationNode\"), {\n            IsVisible: visible,\n            Title: title,\n            Url: url,\n        }));\n\n        return this.clone(NavigationNodes, null).postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                node: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Moves a node to be after another node in the navigation\n     *\n     * @param nodeId Id of the node to move\n     * @param previousNodeId Id of the node after which we move the node specified by nodeId\n     */\n    public moveAfter(nodeId: number, previousNodeId: number): Promise<void> {\n\n        const postBody = jsS({\n            nodeId: nodeId,\n            previousNodeId: previousNodeId,\n        });\n\n        return this.clone(NavigationNodes, \"MoveAfter\").postCore({ body: postBody });\n    }\n}\n\n/**\n * Represents an instance of a navigation node\n *\n */\nexport class NavigationNode extends SharePointQueryableInstance {\n\n    /**\n     * Represents the child nodes of this node\n     */\n    public get children(): NavigationNodes {\n        return new NavigationNodes(this, \"Children\");\n    }\n\n    /**\n     * Deletes this node and any child nodes\n     */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n\n    /**\n     * Updates this node\n     * \n     * @param properties Properties used to update this node\n     */\n    public update(properties: TypedHash<string | number | boolean>): Promise<NavNodeUpdateResult> {\n\n        const postBody = jsS(extend({\n            \"__metadata\": { \"type\": \"SP.NavigationNode\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                node: this,\n            };\n        });\n    }\n}\n\nexport interface NavNodeUpdateResult {\n    data: any;\n    node: NavigationNode;\n}\n\n/**\n * Exposes the navigation components\n *\n */\n@defaultPath(\"navigation\")\nexport class Navigation extends SharePointQueryable {\n\n    /**\n     * Gets the quicklaunch navigation nodes for the current context\n     *\n     */\n    public get quicklaunch(): NavigationNodes {\n        return new NavigationNodes(this, \"quicklaunch\");\n    }\n\n    /**\n     * Gets the top bar navigation nodes for the current context\n     *\n     */\n    public get topNavigationBar(): NavigationNodes {\n        return new NavigationNodes(this, \"topnavigationbar\");\n    }\n}\n\nexport interface INavigationService {\n    getMenuState(menuNodeKey?: string, depth?: number, mapProviderName?: string, customProperties?: string): Promise<MenuNodeCollection>;\n    getMenuNodeKey(currentUrl: string, mapProviderName?: string): Promise<string>;\n}\n\n/**\n * Represents the top level navigation service\n */\nexport class NavigationService extends SharePointQueryable implements INavigationService {\n\n    constructor(baseUrl: string | SharePointQueryable, path: string = null) {\n        super(baseUrl, path);\n    }\n\n    /**\n     * The MenuState service operation returns a Menu-State (dump) of a SiteMapProvider on a site.\n     * \n     * @param menuNodeKey MenuNode.Key of the start node within the SiteMapProvider If no key is provided the SiteMapProvider.RootNode will be the root of the menu state.\n     * @param depth Depth of the dump. If no value is provided a dump with the depth of 10 is returned\n     * @param mapProviderName The name identifying the SiteMapProvider to be used\n     * @param customProperties comma seperated list of custom properties to be returned.\n     */\n    public getMenuState(menuNodeKey: string = null, depth = 10, mapProviderName: string = null, customProperties: string = null): Promise<MenuNodeCollection> {\n\n        return (new NavigationService(this, \"_api/navigation/MenuState\")).postCore({\n            body: jsS({\n                customProperties: customProperties,\n                depth: depth,\n                mapProviderName: mapProviderName,\n                menuNodeKey: menuNodeKey,\n            }),\n        });\n    }\n\n    /**\n     * Tries to get a SiteMapNode.Key for a given URL within a site collection.\n     * \n     * @param currentUrl A url representing the SiteMapNode\n     * @param mapProviderName The name identifying the SiteMapProvider to be used\n     */\n    public getMenuNodeKey(currentUrl: string, mapProviderName: string = null): Promise<string> {\n\n        return (new NavigationService(this, \"_api/navigation/MenuNodeKey\")).postCore({\n            body: jsS({\n                currentUrl: currentUrl,\n                mapProviderName: mapProviderName,\n            }),\n        });\n    }\n}\n","import { SharePointQueryable, defaultPath } from \"./sharepointqueryable\";\nimport { jsS } from \"@pnp/common\";\n\nexport interface RelatedItem {\n    ListId: string;\n    ItemId: number;\n    Url: string;\n    Title: string;\n    WebId: string;\n    IconUrl: string;\n}\n\nexport interface RelatedItemManger {\n\n    getRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]>;\n\n    getPageOneRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]>;\n\n    addSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemID: number,\n        targetWebUrl: string,\n        tryAddReverseLink?: boolean): Promise<void>;\n\n    /**\n     * Adds a related item link from an item specified by list name and item id, to an item specified by url\n     *\n     * @param sourceListName The source list name or list id\n     * @param sourceItemId The source item id\n     * @param targetItemUrl The target item url\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    addSingleLinkToUrl(sourceListName: string, sourceItemId: number, targetItemUrl: string, tryAddReverseLink?: boolean): Promise<void>;\n\n    /**\n     * Adds a related item link from an item specified by url, to an item specified by list name and item id\n     *\n     * @param sourceItemUrl The source item url\n     * @param targetListName The target list name or list id\n     * @param targetItemId The target item id\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    addSingleLinkFromUrl(sourceItemUrl: string, targetListName: string, targetItemId: number, tryAddReverseLink?: boolean): Promise<void>;\n\n    deleteSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemId: number,\n        targetWebUrl: string,\n        tryDeleteReverseLink?: boolean): Promise<void>;\n}\n\n@defaultPath(\"_api/SP.RelatedItemManager\")\nexport class RelatedItemManagerImpl extends SharePointQueryable implements RelatedItemManger {\n\n    public static FromUrl(url: string): RelatedItemManagerImpl {\n\n        if (url === null) {\n            return new RelatedItemManagerImpl(\"\");\n        }\n\n        const index = url.indexOf(\"_api/\");\n\n        if (index > -1) {\n            return new RelatedItemManagerImpl(url.substr(0, index));\n        }\n\n        return new RelatedItemManagerImpl(url);\n    }\n\n    public getRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".GetRelatedItems\");\n\n        return query.postCore({\n            body: jsS({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n            }),\n        });\n    }\n\n    public getPageOneRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".GetPageOneRelatedItems\");\n\n        return query.postCore({\n            body: jsS({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n            }),\n        });\n    }\n\n    public addSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemID: number,\n        targetWebUrl: string,\n        tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".AddSingleLink\");\n\n        return query.postCore({\n            body: jsS({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n                SourceWebUrl: sourceWebUrl,\n                TargetItemID: targetItemID,\n                TargetListName: targetListName,\n                TargetWebUrl: targetWebUrl,\n                TryAddReverseLink: tryAddReverseLink,\n            }),\n        });\n    }\n\n    /**\n     * Adds a related item link from an item specified by list name and item id, to an item specified by url\n     *\n     * @param sourceListName The source list name or list id\n     * @param sourceItemId The source item id\n     * @param targetItemUrl The target item url\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    public addSingleLinkToUrl(sourceListName: string, sourceItemId: number, targetItemUrl: string, tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".AddSingleLinkToUrl\");\n\n        return query.postCore({\n            body: jsS({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n                TargetItemUrl: targetItemUrl,\n                TryAddReverseLink: tryAddReverseLink,\n            }),\n        });\n    }\n\n    /**\n     * Adds a related item link from an item specified by url, to an item specified by list name and item id\n     *\n     * @param sourceItemUrl The source item url\n     * @param targetListName The target list name or list id\n     * @param targetItemId The target item id\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    public addSingleLinkFromUrl(sourceItemUrl: string, targetListName: string, targetItemId: number, tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".AddSingleLinkFromUrl\");\n\n        return query.postCore({\n            body: jsS({\n                SourceItemUrl: sourceItemUrl,\n                TargetItemID: targetItemId,\n                TargetListName: targetListName,\n                TryAddReverseLink: tryAddReverseLink,\n            }),\n        });\n    }\n\n    public deleteSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemId: number,\n        targetWebUrl: string,\n        tryDeleteReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".DeleteSingleLink\");\n\n        return query.postCore({\n            body: jsS({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n                SourceWebUrl: sourceWebUrl,\n                TargetItemID: targetItemId,\n                TargetListName: targetListName,\n                TargetWebUrl: targetWebUrl,\n                TryDeleteReverseLink: tryDeleteReverseLink,\n            }),\n        });\n    }\n}\n","import {\n    SharePointQueryableInstance,\n    SharePointQueryableCollection,\n    defaultPath,\n} from \"./sharepointqueryable\";\n\nimport {\n    spODataEntity,\n} from \"./odata\";\n\nimport {\n    dateAdd, hOP,\n} from \"@pnp/common\";\n\n/**\n * Describes regional settings ODada object\n */\n@defaultPath(\"regionalsettings\")\nexport class RegionalSettings extends SharePointQueryableInstance {\n    /**\n     * Gets the collection of languages used in a server farm.\n     */\n    public get installedLanguages(): InstalledLanguages {\n        return new InstalledLanguages(this);\n    }\n\n    /**\n     * Gets the collection of language packs that are installed on the server.\n     */\n    public get globalInstalledLanguages(): InstalledLanguages {\n        return new InstalledLanguages(this, \"globalinstalledlanguages\");\n    }\n\n    /**\n     * Gets time zone\n     */\n    public get timeZone(): TimeZone {\n        return new TimeZone(this);\n    }\n\n    /**\n     * Gets time zones\n     */\n    public get timeZones(): TimeZones {\n        return new TimeZones(this);\n    }\n}\n\n/**\n * Describes installed languages ODada queriable collection\n */\n@defaultPath(\"installedlanguages\")\nexport class InstalledLanguages extends SharePointQueryableCollection {}\n\n/**\n * Describes TimeZone ODada object\n */\n@defaultPath(\"timezone\")\nexport class TimeZone extends SharePointQueryableInstance {\n    /**\n     * Gets an Local Time by UTC Time\n     *\n     * @param utcTime UTC Time as Date or ISO String\n     */\n    public utcToLocalTime(utcTime: string | Date): Promise<string> {\n        let dateIsoString: string;\n        if (typeof utcTime === \"string\") {\n            dateIsoString = utcTime;\n        } else {\n            dateIsoString = utcTime.toISOString();\n        }\n\n        return this.clone(TimeZone, `utctolocaltime('${dateIsoString}')`)\n            .postCore()\n            .then(res => hOP(res, \"UTCToLocalTime\") ? res.UTCToLocalTime : res);\n    }\n\n    /**\n     * Gets an UTC Time by Local Time\n     *\n     * @param localTime Local Time as Date or ISO String\n     */\n    public localTimeToUTC(localTime: string | Date): Promise<string> {\n        let dateIsoString: string;\n\n        if (typeof localTime === \"string\") {\n            dateIsoString = localTime;\n        } else {\n            dateIsoString = dateAdd(localTime, \"minute\", localTime.getTimezoneOffset() * -1).toISOString();\n        }\n\n        return this.clone(TimeZone, `localtimetoutc('${dateIsoString}')`)\n            .postCore()\n            .then(res => hOP(res, \"LocalTimeToUTC\") ? res.LocalTimeToUTC : res);\n    }\n}\n\n/**\n * Describes time zones queriable collection\n */\n@defaultPath(\"timezones\")\nexport class TimeZones extends SharePointQueryableCollection {\n    // https://msdn.microsoft.com/en-us/library/office/jj247008.aspx - timezones ids\n    /**\n     * Gets an TimeZone by id\n     *\n     * @param id The integer id of the timezone to retrieve\n     */\n    public getById(id: number): Promise<TimeZone> {\n        // do the post and merge the result into a TimeZone instance so the data and methods are available\n        return this.clone(TimeZones, `GetById(${id})`).postCore({}, spODataEntity(TimeZone));\n    }\n}\n","import { SharePointQueryable } from \"./sharepointqueryable\";\nimport { hOP } from \"@pnp/common\";\n\nexport interface SiteDesignInfo {\n    /**\n     * The ID of the site design to apply.\n     */\n    Id: string;\n    /**\n     * The display name of the site design.\n     */\n    Title: string;\n    /**\n     * Identifies which base template to add the design to. Use the value 64 for the Team site template, and the value 68 for the Communication site template.\n     */\n    WebTemplate: string;\n    /**\n     * An array of one or more site scripts. Each is identified by an ID. The scripts will run in the order listed.\n     */\n    SiteScriptIds: string[];\n    /**\n     * The display description of site design.\n     */\n    Description: string;\n    /**\n     * The URL of a preview image. If none is specified, SharePoint uses a generic image.\n     */\n    PreviewImageUrl: string;\n    /**\n     * The alt text description of the image for accessibility.\n     */\n    PreviewImageAltText: string;\n    /**\n     * True if the site design is applied as the default site design; otherwise, false. \n     * For more information see Customize a default site design https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/customize-default-site-design.\n     */\n    IsDefault: boolean;\n    Version: string;\n}\n\nexport interface SiteDesignCreationInfo {\n    /**\n     * The display name of the site design.\n     */\n    Title: string;\n    /**\n     * Identifies which base template to add the design to. Use the value 64 for the Team site template, and the value 68 for the Communication site template.\n     */\n    WebTemplate: string;\n    /**\n     * An array of one or more site scripts. Each is identified by an ID. The scripts will run in the order listed.\n     */\n    SiteScriptIds?: string[];\n    /**\n     * (Optional) The display description of site design.\n     */\n    Description?: string;\n    /**\n     * (Optional) The URL of a preview image. If none is specified, SharePoint uses a generic image.\n     */\n    PreviewImageUrl?: string;\n    /**\n     * (Optional) The alt text description of the image for accessibility.\n     */\n    PreviewImageAltText?: string;\n    /**\n     * (Optional) True if the site design is applied as the default site design; otherwise, false. \n     * For more information see Customize a default site design https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/customize-default-site-design.\n     */\n    IsDefault?: boolean;\n}\n\nexport interface SiteDesignUpdateInfo {\n    /**\n     * The ID of the site design to apply.\n     */\n    Id: string;\n    /**\n     * (Optional) The new display name of the updated site design.\n     */\n    Title?: string;\n    /**\n     * (Optional) The new template to add the site design to. Use the value 64 for the Team site template, and the value 68 for the Communication site template.\n     */\n    WebTemplate?: string;\n    /**\n     * (Optional) A new array of one or more site scripts. Each is identified by an ID. The scripts run in the order listed.\n     */\n    SiteScriptIds?: string[];\n    /**\n     * (Optional) The new display description of the updated site design.\n     */\n    Description?: string;\n    /**\n     * (Optional) The new URL of a preview image.\n     */\n    PreviewImageUrl?: string;\n    /**\n     * (Optional) The new alt text description of the image for accessibility.\n     */\n    PreviewImageAltText?: string;\n    /**\n     * (Optional) True if the site design is applied as the default site design; otherwise, false. \n     * For more information see Customize a default site design https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/customize-default-site-design. \n     * If you had previously set the IsDefault parameter to TRUE and wish it to remain true, you must pass in this parameter again (otherwise it will be reset to FALSE).\n     */\n    IsDefault?: boolean;\n}\n\nexport interface ISiteDesignTask {\n    /**\n     * The ID of the site design task\n     */\n    ID: string;\n    /**\n     * Logonname of the user who created the task\n     */\n    LogonName: string;\n    /**\n     * The ID of the site design the task is running on\n     */\n    SiteDesignID: string;\n    /**\n     * The ID of the site collection\n     */\n    SiteID: string;\n    /**\n     * The ID of the web\n     */\n    WebID: string;\n}\n\nexport interface ISiteScriptActionStatus {\n    ActionIndex: number;\n    ActionKey: string;\n    ActionTitle: string;\n    LastModified: number;\n    OrdinalIndex: string;\n    OutcomeCode: number;\n    OutcomeText: string;\n    SiteScriptID: string;\n    SiteScriptIndex: number;\n    SiteScriptTitle: string;\n}\n\nexport interface ISiteDesignRun {\n    /**\n     * The ID of the site design run\n     */\n    ID: string;\n    /**\n     * The ID of the site design that was applied\n     */\n    SiteDesignID: string;\n    /**\n     * The title of the site design that was applied\n     */\n    SiteDesignTitle: string;\n    /**\n     * The version of the site design that was applied\n     */\n    SiteDesignVersion: number;\n    /**\n     * The site id where the site design was applied\n     */\n    SiteID: string;\n    /**\n     * The start time when the site design was applied\n     */\n    StartTime: number;\n    /**\n     * The web id where the site design was applied\n     */\n    WebID: string;\n}\n\nexport interface SiteDesignPrincipals {\n    DisplayName: string;\n    PrincipalName: string;\n    Rights: number;\n}\n\nexport interface SiteDesignsUtilityMethods {\n    getSiteDesigns(): Promise<SiteDesignInfo[]>;\n    createSiteDesign(creationInfo: SiteDesignCreationInfo): Promise<SiteDesignInfo>;\n    applySiteDesign(siteDesignId: string, webUrl: string): Promise<void>;\n    getSiteDesignMetadata(id: string): Promise<SiteDesignInfo>;\n    updateSiteDesign(updateInfo: SiteDesignUpdateInfo): Promise<SiteDesignInfo>;\n    deleteSiteDesign(id: string): Promise<void>;\n    getSiteDesignRights(id: string): Promise<SiteDesignPrincipals[]>;\n    grantSiteDesignRights(id: string, principalNames: string[], grantedRights?: number): Promise<void>;\n    revokeSiteDesignRights(id: string, principalNames: string[]): Promise<void>;\n    addSiteDesignTask(webUrl: string, siteDesignId: string): Promise<ISiteDesignTask>;\n    addSiteDesignTaskToCurrentWeb(siteDesignId: string): Promise<ISiteDesignTask>;\n    getSiteDesignTask(id: string): Promise<ISiteDesignTask>;\n    getSiteDesignRun(webUrl: string, siteDesignId?: string): Promise<ISiteDesignRun[]>;\n    getSiteDesignRunStatus(webUrl: string, runId: string): Promise<ISiteScriptActionStatus[]>;\n}\n\n/**\n * Implements the site designs API REST methods\n *\n */\nexport class SiteDesigns extends SharePointQueryable implements SiteDesignsUtilityMethods {\n    /**\n     * Creates a new instance of the SiteDesigns method class\n     *\n     * @param baseUrl The parent url provider\n     * @param methodName The static method name to call on the utility class\n     */\n    constructor(baseUrl: string | SharePointQueryable, methodName: string) {\n        super(SiteDesigns.getBaseUrl(baseUrl), `_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.${methodName}`);\n    }\n\n    private static getBaseUrl(candidate: string | SharePointQueryable) {\n        if (typeof candidate === \"string\") {\n            return candidate;\n        }\n\n        const c = candidate as SharePointQueryable;\n        const url = c.toUrl();\n        const index = url.indexOf(\"_api/\");\n        if (index < 0) {\n            return url;\n        }\n\n        return url.substr(0, index);\n    }\n\n    public execute<T>(props: any): Promise<T> {\n        return this.postCore<T>({\n            body: JSON.stringify(props),\n            headers: {\n                \"Content-Type\": \"application/json;charset=utf-8\",\n            },\n        });\n    }\n\n    /**\n     * Creates a new site design available to users when they create a new site from the SharePoint home page.\n     * \n     * @param creationInfo A sitedesign creation information object\n     */\n    public async createSiteDesign(creationInfo: SiteDesignCreationInfo): Promise<SiteDesignInfo> {\n        return await this.clone(SiteDesigns, `CreateSiteDesign`).execute<SiteDesignInfo>({ info: creationInfo });\n    }\n\n    /**\n     * Applies a site design to an existing site collection.\n     *\n     * @param siteDesignId The ID of the site design to apply.\n     * @param webUrl The URL of the site collection where you want to apply the site design.\n     */\n    public async applySiteDesign(siteDesignId: string, webUrl: string): Promise<void> {\n        return await this.clone(SiteDesigns, `ApplySiteDesign`).execute<void>({ siteDesignId: siteDesignId, \"webUrl\": webUrl });\n    }\n\n    /**\n     * Gets a list of information about existing site designs.\n     */\n    public async getSiteDesigns(): Promise<SiteDesignInfo[]> {\n        return await this.clone(SiteDesigns, `GetSiteDesigns`).execute<SiteDesignInfo[]>({});\n    }\n\n    /**\n     * Gets information about a specific site design.\n     * @param id The ID of the site design to get information about.\n     */\n    public async getSiteDesignMetadata(id: string): Promise<SiteDesignInfo> {\n        return await this.clone(SiteDesigns, `GetSiteDesignMetadata`).execute<SiteDesignInfo>({ id: id });\n    }\n\n    /**\n     * Updates a site design with new values. In the REST call, all parameters are optional except the site script Id.\n     * If you had previously set the IsDefault parameter to TRUE and wish it to remain true, you must pass in this parameter again (otherwise it will be reset to FALSE). \n     * @param updateInfo A sitedesign update information object\n     */\n    public async updateSiteDesign(updateInfo: SiteDesignUpdateInfo): Promise<SiteDesignInfo> {\n        return await this.clone(SiteDesigns, `UpdateSiteDesign`).execute<SiteDesignInfo>({ updateInfo: updateInfo });\n    }\n\n    /**\n     * Deletes a site design.\n     * @param id The ID of the site design to delete.\n     */\n    public async deleteSiteDesign(id: string): Promise<void> {\n        return await this.clone(SiteDesigns, `DeleteSiteDesign`).execute<void>({ id: id });\n    }\n\n    /**\n     * Gets a list of principals that have access to a site design.\n     * @param id The ID of the site design to get rights information from.\n     */\n    public async getSiteDesignRights(id: string): Promise<SiteDesignPrincipals[]> {\n        return await this.clone(SiteDesigns, `GetSiteDesignRights`).execute<SiteDesignPrincipals[]>({ id: id });\n    }\n\n    /**\n     * Grants access to a site design for one or more principals.\n     * @param id The ID of the site design to grant rights on.\n     * @param principalNames An array of one or more principals to grant view rights. \n     *                       Principals can be users or mail-enabled security groups in the form of \"alias\" or \"alias@<domain name>.com\"\n     * @param grantedRights Always set to 1. This represents the View right.\n     */\n    public async grantSiteDesignRights(id: string, principalNames: string[], grantedRights = 1): Promise<void> {\n        return await this.clone(SiteDesigns, `GrantSiteDesignRights`)\n            .execute<void>({\n                \"grantedRights\": grantedRights.toString(),\n                \"id\": id,\n                \"principalNames\": principalNames,\n            });\n    }\n\n    /**\n     * Revokes access from a site design for one or more principals.\n     * @param id The ID of the site design to revoke rights from.\n     * @param principalNames An array of one or more principals to revoke view rights from. \n     *                       If all principals have rights revoked on the site design, the site design becomes viewable to everyone.\n     */\n    public async revokeSiteDesignRights(id: string, principalNames: string[]): Promise<void> {\n        return await this.clone(SiteDesigns, `RevokeSiteDesignRights`)\n            .execute<void>({\n                \"id\": id,\n                \"principalNames\": principalNames,\n            });\n    }\n\n    /**\n     * Adds a site design task on the specified web url to be invoked asynchronously.\n     * @param webUrl The absolute url of the web on where to create the task\n     * @param siteDesignId The ID of the site design to create a task for\n     */\n    public async addSiteDesignTask(webUrl: string, siteDesignId: string): Promise<ISiteDesignTask> {\n        return await this.clone(SiteDesigns, `AddSiteDesignTask`)\n            .execute<ISiteDesignTask>({ \"webUrl\": webUrl, \"siteDesignId\": siteDesignId });\n    }\n\n    /**\n     * Adds a site design task on the current web to be invoked asynchronously.\n     * @param siteDesignId The ID of the site design to create a task for\n     */\n    public async addSiteDesignTaskToCurrentWeb(siteDesignId: string): Promise<ISiteDesignTask> {\n        return await this.clone(SiteDesigns, `AddSiteDesignTaskToCurrentWeb`)\n            .execute<ISiteDesignTask>({ \"siteDesignId\": siteDesignId });\n    }\n\n    /**\n     * Retrieves the site design task, if the task has finished running null will be returned\n     * @param id The ID of the site design task\n     */\n    public async getSiteDesignTask(id: string): Promise<ISiteDesignTask> {\n        const task = await this.clone(SiteDesigns, `GetSiteDesignTask`)\n            .execute<ISiteDesignTask>({ \"taskId\": id });\n\n        return hOP(task, \"ID\") ? task : null;\n    }\n\n    /**\n     * Retrieves a list of site design that have run on a specific web\n     * @param webUrl The url of the web where the site design was applied\n     * @param siteDesignId (Optional) the site design ID, if not provided will return all site design runs\n     */\n    public async getSiteDesignRun(webUrl: string, siteDesignId?: string): Promise<ISiteDesignRun[]> {\n        return await this.clone(SiteDesigns, `GetSiteDesignRun`)\n            .execute<ISiteDesignRun[]>({ \"webUrl\": webUrl, siteDesignId: siteDesignId });\n    }\n\n    /**\n     * Retrieves the status of a site design that has been run or is still running\n     * @param webUrl The url of the web where the site design was applied\n     * @param runId the run ID\n     */\n    public async getSiteDesignRunStatus(webUrl: string, runId: string): Promise<ISiteScriptActionStatus[]> {\n        return await this.clone(SiteDesigns, `GetSiteDesignRunStatus`)\n            .execute<ISiteScriptActionStatus[]>({ \"webUrl\": webUrl, runId: runId });\n    }\n\n}\n","import { SharePointQueryable } from \"./sharepointqueryable\";\n\nexport interface SiteScriptInfo {\n    Id: string;\n    Title: string;\n    Description: string;\n    Content: string;\n    Version: string;\n}\n\nexport interface SiteScriptUpdateInfo {\n    Id: string;\n    Title?: string;\n    Description?: string;\n    Content?: string;\n    Version?: string;\n}\n\nexport interface SiteScriptUtilityMethods {\n    getSiteScripts(): Promise<SiteScriptInfo[]>;\n    createSiteScript(title: string, description: string, content: any): Promise<SiteScriptInfo>;\n    getSiteScriptMetadata(id: string): Promise<SiteScriptInfo>;\n    deleteSiteScript(id: string): Promise<void>;\n    updateSiteScript(siteScriptUpdateInfo: SiteScriptUpdateInfo, content?: any): Promise<SiteScriptInfo>;\n    getSiteScriptFromList(listUrl: string): Promise<string>;\n    getSiteScriptFromWeb(webUrl: string, info: ISiteScriptSerializationInfo): Promise<ISiteScriptSerializationResult>;\n}\n\nexport interface ISiteScriptSerializationInfo {\n    IncludeBranding?: boolean;\n    IncludedLists?: string[];\n    IncludeLinksToExportedItems?: boolean;\n    IncludeRegionalSettings?: boolean;\n    IncludeSiteExternalSharingCapability?: boolean;\n    IncludeTheme?: boolean;\n}\n\nexport interface ISiteScriptSerializationResult {\n    JSON: string;\n    Warnings: string[];\n}\n\n/**\n * Implements the site script API REST methods\n *\n */\nexport class SiteScripts extends SharePointQueryable implements SiteScriptUtilityMethods {\n    /**\n     * Creates a new instance of the SiteScripts method class\n     *\n     * @param baseUrl The parent url provider\n     * @param methodName The static method name to call on the utility class\n     */\n    constructor(baseUrl: string | SharePointQueryable, methodName: string) {\n        super(SiteScripts.getBaseUrl(baseUrl), `_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.${methodName}`);\n    }\n\n    private static getBaseUrl(candidate: string | SharePointQueryable) {\n        if (typeof candidate === \"string\") {\n            return candidate;\n        }\n\n        const c = candidate as SharePointQueryable;\n        const url = c.toUrl();\n        const index = url.indexOf(\"_api/\");\n        if (index < 0) {\n            return url;\n        }\n\n        return url.substr(0, index);\n    }\n\n    public execute<T>(props: any): Promise<T> {\n        return this.postCore<T>({\n            body: JSON.stringify(props),\n        });\n    }\n\n    /**\n     * Gets a list of information on all existing site scripts.\n     */\n    public getSiteScripts(): Promise<SiteScriptInfo[]> {\n        return this.clone(SiteScripts, \"GetSiteScripts\", true).execute<SiteScriptInfo[]>({});\n    }\n\n    /**\n     * Creates a new site script.\n     * \n     * @param title The display name of the site design.\n     * @param content JSON value that describes the script. For more information, see JSON reference.\n     */\n    public async createSiteScript(title: string, description: string, content: any): Promise<SiteScriptInfo> {\n        return await this.clone(SiteScripts,\n            `CreateSiteScript(Title=@title,Description=@desc)?@title='${encodeURIComponent(title)}'&@desc='${encodeURIComponent(description)}'`)\n            .execute<SiteScriptInfo>(content);\n    }\n\n    /**\n     * Gets information about a specific site script. It also returns the JSON of the script.\n     * \n     * @param id The ID of the site script to get information about.\n     */\n    public async getSiteScriptMetadata(id: string): Promise<SiteScriptInfo> {\n        return await this.clone(SiteScripts, \"GetSiteScriptMetadata\").execute<SiteScriptInfo>({ id: id });\n    }\n\n    /**\n     * Deletes a site script.\n     * \n     * @param id The ID of the site script to delete.\n     */\n    public async deleteSiteScript(id: string): Promise<void> {\n        await this.clone(SiteScripts, \"DeleteSiteScript\").execute<void>({ id: id });\n    }\n\n    /**\n     * Updates a site script with new values. In the REST call, all parameters are optional except the site script Id.\n     * \n     * @param siteScriptUpdateInfo Object that contains the information to update a site script. \n     *                             Make sure you stringify the content object or pass it in the second 'content' parameter\n     * @param content (Optional) A new JSON script defining the script actions. For more information, see Site design JSON schema.\n     */\n    public async updateSiteScript(siteScriptUpdateInfo: SiteScriptUpdateInfo, content?: any): Promise<SiteScriptInfo> {\n        if (content) {\n            siteScriptUpdateInfo.Content = JSON.stringify(content);\n        }\n\n        return await this.clone(SiteScripts, \"UpdateSiteScript\").execute<SiteScriptInfo>({ updateInfo: siteScriptUpdateInfo });\n    }\n\n    /**\n     * Gets the site script syntax (JSON) for a specific list\n     * @param listUrl The absolute url of the list to retrieve site script\n     */\n    public async getSiteScriptFromList(listUrl: string): Promise<string> {\n        return await this.clone(SiteScripts, `GetSiteScriptFromList`)\n            .execute<string>({ \"listUrl\": listUrl });\n    }\n\n    /**\n     * Gets the site script syntax (JSON) for a specific web\n     * @param webUrl The absolute url of the web to retrieve site script\n     * @param extractInfo configuration object to specify what to extract\n     */\n    public async getSiteScriptFromWeb(webUrl: string, extractInfo: ISiteScriptSerializationInfo): Promise<ISiteScriptSerializationResult> {\n        return await this.clone(SiteScripts, `getSiteScriptFromWeb`)\n            .execute<ISiteScriptSerializationResult>({ \"webUrl\": webUrl, info: extractInfo });\n    }\n\n}\n","import { extend, TypedHash, jsS } from \"@pnp/common\";\nimport { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { SharePointQueryableShareableWeb } from \"./sharepointqueryableshareable\";\nimport { Folders, Folder } from \"./folders\";\nimport { Lists, List } from \"./lists\";\nimport { Fields } from \"./fields\";\nimport { Site } from \"./site\";\nimport { Navigation } from \"./navigation\";\nimport { SiteGroups, SiteGroup } from \"./sitegroups\";\nimport { ContentTypes } from \"./contenttypes\";\nimport { RoleDefinitions } from \"./roles\";\nimport { File } from \"./files\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\nimport { ChangeQuery, StorageEntity, HubSiteData as IHubSiteData } from \"./types\";\nimport { SiteUsers, SiteUser, CurrentUser, SiteUserProps } from \"./siteusers\";\nimport { UserCustomActions } from \"./usercustomactions\";\nimport { odataUrlFrom } from \"./odata\";\nimport { SPBatch } from \"./batch\";\nimport { Features } from \"./features\";\nimport { RelatedItemManger, RelatedItemManagerImpl } from \"./relateditems\";\nimport { AppCatalog } from \"./appcatalog\";\nimport { RegionalSettings } from \"./regionalsettings\";\nimport { ClientSidePage, ClientSidePageComponent } from \"./clientsidepages\";\nimport { SiteDesigns, ISiteDesignRun, ISiteDesignTask, ISiteScriptActionStatus } from \"./sitedesigns\";\nimport { SiteScripts, ISiteScriptSerializationInfo, ISiteScriptSerializationResult } from \"./sitescripts\";\n\n/**\n * Describes a collection of webs\n *\n */\n@defaultPath(\"webs\")\nexport class Webs extends SharePointQueryableCollection {\n\n    /**\n     * Adds a new web to the collection\n     *\n     * @param title The new web's title\n     * @param url The new web's relative url\n     * @param description The new web's description\n     * @param template The new web's template internal name (default = STS)\n     * @param language The locale id that specifies the new web's language (default = 1033 [English, US])\n     * @param inheritPermissions When true, permissions will be inherited from the new web's parent (default = true)\n     */\n    public add(\n        title: string,\n        url: string,\n        description = \"\",\n        template = \"STS\",\n        language = 1033,\n        inheritPermissions = true): Promise<WebAddResult> {\n\n        const props = {\n            Description: description,\n            Language: language,\n            Title: title,\n            Url: url,\n            UseSamePermissionsAsParentSite: inheritPermissions,\n            WebTemplate: template,\n        };\n\n        const postBody = jsS({\n            \"parameters\":\n                extend({\n                    \"__metadata\": { \"type\": \"SP.WebCreationInformation\" },\n                }, props),\n        });\n\n        return this.clone(Webs, \"add\").postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                web: new Web(odataUrlFrom(data).replace(/_api\\/web\\/?/i, \"\")),\n            };\n        });\n    }\n}\n\n/**\n * Describes a collection of web infos\n *\n */\n@defaultPath(\"webinfos\")\nexport class WebInfos extends SharePointQueryableCollection { }\n\n/**\n * Describes a web\n *\n */\n@defaultPath(\"_api/web\")\nexport class Web extends SharePointQueryableShareableWeb {\n\n    /**\n     * Creates a new web instance from the given url by indexing the location of the /_api/\n     * segment. If this is not found the method creates a new web with the entire string as\n     * supplied.\n     *\n     * @param url\n     */\n    public static fromUrl(url: string, path?: string) {\n        return new Web(extractWebUrl(url), path);\n    }\n\n    /**\n     * Gets this web's subwebs\n     *\n     */\n    public get webs(): Webs {\n        return new Webs(this);\n    }\n\n    /**\n     * Gets this web's parent web and data\n     *\n     */\n    public getParentWeb(): Promise<{ data: any; web: Web }> {\n        return this.select(\"ParentWeb/Id\").expand(\"ParentWeb\").get()\n            .then(({ ParentWeb }) => ParentWeb ? new Site(this.parentUrl).openWebById(ParentWeb.Id) : null);\n    }\n\n    /**\n    * Returns a collection of objects that contain metadata about subsites of the current site in which the current user is a member.\n    *\n    * @param nWebTemplateFilter Specifies the site definition (default = -1)\n    * @param nConfigurationFilter A 16-bit integer that specifies the identifier of a configuration (default = -1)\n    */\n    public getSubwebsFilteredForCurrentUser(nWebTemplateFilter = -1, nConfigurationFilter = -1): Webs {\n        return this.clone(Webs, `getSubwebsFilteredForCurrentUser(nWebTemplateFilter=${nWebTemplateFilter},nConfigurationFilter=${nConfigurationFilter})`);\n    }\n\n    /**\n     * Allows access to the web's all properties collection\n     */\n    public get allProperties(): SharePointQueryableInstance {\n        return this.clone(SharePointQueryableInstance, \"allproperties\");\n    }\n\n    /**\n     * Gets a collection of WebInfos for this web's subwebs\n     *\n     */\n    public get webinfos(): WebInfos {\n        return new WebInfos(this);\n    }\n\n    /**\n     * Gets the content types available in this web\n     *\n     */\n    public get contentTypes(): ContentTypes {\n        return new ContentTypes(this);\n    }\n\n    /**\n     * Gets the lists in this web\n     *\n     */\n    public get lists(): Lists {\n        return new Lists(this);\n    }\n\n    /**\n     * Gets the fields in this web\n     *\n     */\n    public get fields(): Fields {\n        return new Fields(this);\n    }\n\n    /**\n     * Gets the active features for this web\n     *\n     */\n    public get features(): Features {\n        return new Features(this);\n    }\n\n    /**\n     * Gets the available fields in this web\n     *\n     */\n    public get availablefields(): Fields {\n        return new Fields(this, \"availablefields\");\n    }\n\n    /**\n     * Gets the navigation options in this web\n     *\n     */\n    public get navigation(): Navigation {\n        return new Navigation(this);\n    }\n\n    /**\n     * Gets the site users\n     *\n     */\n    public get siteUsers(): SiteUsers {\n        return new SiteUsers(this);\n    }\n\n    /**\n     * Gets the site groups\n     *\n     */\n    public get siteGroups(): SiteGroups {\n        return new SiteGroups(this);\n    }\n\n    /**\n     * Gets site user info list\n     *\n     */\n    public get siteUserInfoList(): List {\n        return new List(this, \"siteuserinfolist\");\n    }\n\n    /**\n     * Gets regional settings\n     *\n     */\n    public get regionalSettings(): RegionalSettings {\n        return new RegionalSettings(this);\n    }\n\n    /**\n     * Gets the current user\n     */\n    public get currentUser(): CurrentUser {\n        return new CurrentUser(this);\n    }\n\n    /**\n     * Gets the top-level folders in this web\n     *\n     */\n    public get folders(): Folders {\n        return new Folders(this);\n    }\n\n    /**\n     * Gets all user custom actions for this web\n     *\n     */\n    public get userCustomActions(): UserCustomActions {\n        return new UserCustomActions(this);\n    }\n\n    /**\n     * Gets the collection of RoleDefinition resources\n     *\n     */\n    public get roleDefinitions(): RoleDefinitions {\n        return new RoleDefinitions(this);\n    }\n\n    /**\n     * Provides an interface to manage related items\n     *\n     */\n    public get relatedItems(): RelatedItemManger {\n        return RelatedItemManagerImpl.FromUrl(this.toUrl());\n    }\n\n    /**\n     * Creates a new batch for requests within the context of this web\n     *\n     */\n    public createBatch(): SPBatch {\n        return new SPBatch(this.parentUrl);\n    }\n\n    /**\n     * Gets the root folder of this web\n     *\n     */\n    public get rootFolder(): Folder {\n        return new Folder(this, \"rootFolder\");\n    }\n\n    /**\n     * Gets the associated owner group for this web\n     *\n     */\n    public get associatedOwnerGroup(): SiteGroup {\n        return new SiteGroup(this, \"associatedownergroup\");\n    }\n\n    /**\n     * Gets the associated member group for this web\n     *\n     */\n    public get associatedMemberGroup(): SiteGroup {\n        return new SiteGroup(this, \"associatedmembergroup\");\n    }\n\n    /**\n     * Gets the associated visitor group for this web\n     *\n     */\n    public get associatedVisitorGroup(): SiteGroup {\n        return new SiteGroup(this, \"associatedvisitorgroup\");\n    }\n\n    /**\n     * Gets the default document library for this web\n     *\n     */\n    public get defaultDocumentLibrary(): List {\n        return new List(this, \"DefaultDocumentLibrary\");\n    }\n\n    /**\n     * Gets a folder by id\n     *\n     * @param uniqueId The uniqueId of the folder\n     */\n    public getFolderById(uniqueId: string): Folder {\n        return new Folder(this, `getFolderById('${uniqueId}')`);\n    }\n\n    /**\n     * Gets a folder by server relative url\n     *\n     * @param folderRelativeUrl The server relative path to the folder (including /sites/ if applicable)\n     */\n    public getFolderByServerRelativeUrl(folderRelativeUrl: string): Folder {\n        return new Folder(this, `getFolderByServerRelativeUrl('${folderRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a folder by server relative relative path if your folder name contains # and % characters\n     * you need to first encode the file name using encodeURIComponent() and then pass the url\n     * let url = \"/sites/test/Shared Documents/\" + encodeURIComponent(\"%123\");\n     * This works only in SharePoint online.\n     *\n     * @param folderRelativeUrl The server relative path to the folder (including /sites/ if applicable)\n     */\n    public getFolderByServerRelativePath(folderRelativeUrl: string): Folder {\n        return new Folder(this, `getFolderByServerRelativePath(decodedUrl='${folderRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a file by id\n     *\n     * @param uniqueId The uniqueId of the file\n     */\n    public getFileById(uniqueId: string): File {\n        return new File(this, `getFileById('${uniqueId}')`);\n    }\n\n    /**\n     * Gets a file by server relative url\n     *\n     * @param fileRelativeUrl The server relative path to the file (including /sites/ if applicable)\n     */\n    public getFileByServerRelativeUrl(fileRelativeUrl: string): File {\n        return new File(this, `getFileByServerRelativeUrl('${fileRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a file by server relative url if your file name contains # and % characters\n     * you need to first encode the file name using encodeURIComponent() and then pass the url\n     * let url = \"/sites/test/Shared Documents/\" + encodeURIComponent(\"%123.docx\");\n     *\n     * @param fileRelativeUrl The server relative path to the file (including /sites/ if applicable)\n     */\n    public getFileByServerRelativePath(fileRelativeUrl: string): File {\n        return new File(this, `getFileByServerRelativePath(decodedUrl='${fileRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a list by server relative url (list's root folder)\n     *\n     * @param listRelativeUrl The server relative path to the list's root folder (including /sites/ if applicable)\n     */\n    public getList(listRelativeUrl: string): List {\n        return new List(this, `getList('${listRelativeUrl}')`);\n    }\n\n    /**\n     * Updates this web instance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the web\n     */\n    public update(properties: TypedHash<string | number | boolean>): Promise<WebUpdateResult> {\n\n        const postBody = jsS(extend({\n            \"__metadata\": { \"type\": \"SP.Web\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                web: this,\n            };\n        });\n    }\n\n    /**\n     * Deletes this web\n     *\n     */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n\n    /**\n     * Applies the theme specified by the contents of each of the files specified in the arguments to the site\n     *\n     * @param colorPaletteUrl The server-relative URL of the color palette file\n     * @param fontSchemeUrl The server-relative URL of the font scheme\n     * @param backgroundImageUrl The server-relative URL of the background image\n     * @param shareGenerated When true, the generated theme files are stored in the root site. When false, they are stored in this web\n     */\n    public applyTheme(colorPaletteUrl: string, fontSchemeUrl: string, backgroundImageUrl: string, shareGenerated: boolean): Promise<void> {\n\n        const postBody = jsS({\n            backgroundImageUrl: backgroundImageUrl,\n            colorPaletteUrl: colorPaletteUrl,\n            fontSchemeUrl: fontSchemeUrl,\n            shareGenerated: shareGenerated,\n        });\n\n        return this.clone(Web, \"applytheme\").postCore({ body: postBody });\n    }\n\n    /**\n     * Applies the specified site definition or site template to the Web site that has no template applied to it\n     *\n     * @param template Name of the site definition or the name of the site template\n     */\n    public applyWebTemplate(template: string): Promise<void> {\n\n        const q = this.clone(Web, \"applywebtemplate\");\n        q.concat(`(@t)`);\n        q.query.set(\"@t\", template);\n        return q.postCore();\n    }\n\n    /**\n     * Checks whether the specified login name belongs to a valid user in the web. If the user doesn't exist, adds the user to the web.\n     *\n     * @param loginName The login name of the user (ex: i:0#.f|membership|user@domain.onmicrosoft.com)\n     */\n    public ensureUser(loginName: string): Promise<WebEnsureUserResult> {\n        const postBody = jsS({\n            logonName: loginName,\n        });\n\n        return this.clone(Web, \"ensureuser\").postCore({ body: postBody }).then((data: any) => {\n            return {\n                data: data,\n                user: new SiteUser(odataUrlFrom(data)),\n            };\n        });\n    }\n\n    /**\n     * Returns a collection of site templates available for the site\n     *\n     * @param language The locale id of the site templates to retrieve (default = 1033 [English, US])\n     * @param includeCrossLanguage When true, includes language-neutral site templates; otherwise false (default = true)\n     */\n    public availableWebTemplates(language = 1033, includeCrossLanugage = true): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, `getavailablewebtemplates(lcid=${language}, doincludecrosslanguage=${includeCrossLanugage})`);\n    }\n\n    /**\n     * Returns the list gallery on the site\n     *\n     * @param type The gallery type - WebTemplateCatalog = 111, WebPartCatalog = 113 ListTemplateCatalog = 114,\n     * MasterPageCatalog = 116, SolutionCatalog = 121, ThemeCatalog = 123, DesignCatalog = 124, AppDataCatalog = 125\n     */\n    public getCatalog(type: number): Promise<List> {\n        return this.clone(Web, `getcatalog(${type})`).select(\"Id\").get().then((data) => {\n            return new List(odataUrlFrom(data));\n        });\n    }\n\n    /**\n     * Returns the collection of changes from the change log that have occurred within the web, based on the specified query\n     *\n     * @param query The change query\n     */\n    public getChanges(query: ChangeQuery): Promise<any> {\n\n        const postBody = jsS({ \"query\": extend({ \"__metadata\": { \"type\": \"SP.ChangeQuery\" } }, query) });\n        return this.clone(Web, \"getchanges\").postCore({ body: postBody });\n    }\n\n    /**\n     * Gets the custom list templates for the site\n     *\n     */\n    public get customListTemplate(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"getcustomlisttemplates\");\n    }\n\n    /**\n     * Returns the user corresponding to the specified member identifier for the current site\n     *\n     * @param id The id of the user\n     */\n    public getUserById(id: number): SiteUser {\n        return new SiteUser(this, `getUserById(${id})`);\n    }\n\n    /**\n     * Returns the name of the image file for the icon that is used to represent the specified file\n     *\n     * @param filename The file name. If this parameter is empty, the server returns an empty string\n     * @param size The size of the icon: 16x16 pixels = 0, 32x32 pixels = 1 (default = 0)\n     * @param progId The ProgID of the application that was used to create the file, in the form OLEServerName.ObjectName\n     */\n    public mapToIcon(filename: string, size = 0, progId = \"\"): Promise<string> {\n        return this.clone(Web, `maptoicon(filename='${filename}', progid='${progId}', size=${size})`).get();\n    }\n\n    /**\n     * Returns the tenant property corresponding to the specified key in the app catalog site\n     *\n     * @param key Id of storage entity to be set\n     */\n    public getStorageEntity(key: string): Promise<StorageEntity> {\n        return this.clone(Web, `getStorageEntity('${key}')`).get();\n    }\n\n    /**\n     * This will set the storage entity identified by the given key (MUST be called in the context of the app catalog)\n     *\n     * @param key Id of storage entity to be set\n     * @param value Value of storage entity to be set\n     * @param description Description of storage entity to be set\n     * @param comments Comments of storage entity to be set\n     */\n    public setStorageEntity(key: string, value: string, description = \"\", comments = \"\"): Promise<void> {\n        return this.clone(Web, `setStorageEntity`).postCore({\n            body: jsS({\n                comments,\n                description,\n                key,\n                value,\n            }),\n        });\n    }\n\n    /**\n     * This will remove the storage entity identified by the given key\n     *\n     * @param key Id of storage entity to be removed\n     */\n    public removeStorageEntity(key: string): Promise<void> {\n        return this.clone(Web, `removeStorageEntity('${key}')`).postCore();\n    }\n\n    /**\n     * Gets the tenant app catalog for this web\n     *\n     * @param url Optional url or web containing the app catalog (default: current web)\n     */\n    public getAppCatalog(url?: string | Web) {\n        return new AppCatalog(url || this);\n    }\n\n    /**\n     * Gets the site collection app catalog for this web\n     *\n     * @param url Optional url or web containing the app catalog (default: current web)\n     */\n    public getSiteCollectionAppCatalog(url?: string | Web) {\n        return new AppCatalog(url || this, \"_api/web/sitecollectionappcatalog/AvailableApps\");\n    }\n\n    /**\n     * Gets the collection of available client side web parts for this web instance\n     */\n    public getClientSideWebParts(): Promise<ClientSidePageComponent[]> {\n        return this.clone(SharePointQueryableCollection, \"GetClientSideWebParts\").get();\n    }\n\n    /**\n     * Creates a new client side page\n     *\n     * @param pageName Name of the new page\n     * @param title Display title of the new page\n     */\n    public addClientSidePage(pageName: string, title = pageName.replace(/\\.[^/.]+$/, \"\")): Promise<ClientSidePage> {\n        return ClientSidePage.create(this, pageName, title);\n    }\n\n    /**\n     * Creates a new client side page using the library path\n     *\n     * @param pageName Name of the new page\n     * @param listRelativePath The server relative path to the list's root folder (including /sites/ if applicable)\n     * @param title Display title of the new page\n     */\n    public addClientSidePageByPath(pageName: string, title = pageName.replace(/\\.[^/.]+$/, \"\")): Promise<ClientSidePage> {\n        return ClientSidePage.create(this, pageName, title);\n    }\n\n    /**\n     * Creates the default associated groups (Members, Owners, Visitors) and gives them the default permissions on the site.\n     * The target site must have unique permissions and no associated members / owners / visitors groups\n     *\n     * @param siteOwner The user login name to be added to the site Owners group. Default is the current user\n     * @param siteOwner2 The second user login name to be added to the site Owners group. Default is empty\n     * @param groupNameSeed The base group name. E.g. 'TestSite' would produce 'TestSite Members' etc.\n     */\n    public createDefaultAssociatedGroups(siteOwner?: string, siteOwner2?: string, groupNameSeed?: string): Promise<void> {\n        const q = this.clone(Web, `createDefaultAssociatedGroups(userLogin=@u,userLogin2=@v,groupNameSeed=@s)`);\n        q.query.set(\"@u\", `'${encodeURIComponent(siteOwner || \"\")}'`);\n        q.query.set(\"@v\", `'${encodeURIComponent(siteOwner2 || \"\")}'`);\n        q.query.set(\"@s\", `'${encodeURIComponent(groupNameSeed || \"\")}'`);\n        return q.postCore();\n    }\n\n    /**\n     * Gets hub site data for the current web.\n     *\n     * @param forceRefresh Default value is false. When false, the data is returned from the server's cache.\n     * When true, the cache is refreshed with the latest updates and then returned.\n     * Use this if you just made changes and need to see those changes right away.\n     */\n    public async hubSiteData(forceRefresh = false): Promise<IHubSiteData> {\n        return this.clone(Web, `hubSiteData(${forceRefresh})`).get().then(r => JSON.parse(r));\n    }\n\n    /**\n     * Applies theme updates from the parent hub site collection.\n     */\n    public syncHubSiteTheme(): Promise<void> {\n        return this.clone(Web, `syncHubSiteTheme`).postCore();\n    }\n\n    /**\n     * Retrieves a list of site design that have run on the current web\n     * @param siteDesignId (Optional) the site design ID, if not provided will return all site design runs\n     */\n    public getSiteDesignRuns(siteDesignId?: string): Promise<ISiteDesignRun[]> {\n        return new SiteDesigns(this, \"\").getSiteDesignRun(undefined, siteDesignId);\n    }\n\n    /**\n     * Gets the site script syntax (JSON) for a specific web\n     * @param extractInfo configuration object to specify what to extract\n     */\n    public getSiteScript(extractInfo?: ISiteScriptSerializationInfo): Promise<ISiteScriptSerializationResult> {\n        return new SiteScripts(this, \"\").getSiteScriptFromWeb(undefined, extractInfo);\n    }\n\n    /**\n     * Adds a site design task on the current web to be invoked asynchronously.\n     * @param siteDesignId The ID of the site design to create a task for\n     */\n    public addSiteDesignTask(siteDesignId: string): Promise<ISiteDesignTask> {\n        return new SiteDesigns(this, \"\").addSiteDesignTaskToCurrentWeb(siteDesignId);\n    }\n\n    /**\n     * Retrieves the status of a site design that has been run or is still running\n     * @param runId the run ID\n     */\n    public getSiteDesignRunStatus(runId: string): Promise<ISiteScriptActionStatus[]> {\n        return new SiteDesigns(this, \"\").getSiteDesignRunStatus(undefined, runId);\n    }\n\n}\n\n/**\n * Result from adding a web\n *\n */\nexport interface WebAddResult {\n    data: any;\n    web: Web;\n}\n\n/**\n * Result from updating a web\n *\n */\nexport interface WebUpdateResult {\n    data: any;\n    web: Web;\n}\n\n/**\n * Result from retrieving a catalog\n *\n */\nexport interface GetCatalogResult {\n    data: any;\n    list: List;\n}\n\n/**\n * Result from ensuring a user\n *\n */\nexport interface WebEnsureUserResult {\n    data: SiteUserProps;\n    user: SiteUser;\n}\n","import { File } from \"./files\";\nimport { Item, ItemUpdateResult } from \"./items\";\nimport { TypedHash, extend, getGUID, jsS, hOP, stringIsNullOrEmpty, objectDefinedNotNull, combine, isUrlAbsolute } from \"@pnp/common\";\nimport { SharePointQueryable } from \"./sharepointqueryable\";\nimport { metadata } from \"./utils/metadata\";\nimport { List } from \"./lists\";\nimport { odataUrlFrom } from \"./odata\";\nimport { Web } from \"./webs\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\nimport { Site } from \"./site\";\n\n/**\n * Page promotion state\n */\nexport const enum PromotedState {\n    /**\n     * Regular client side page\n     */\n    NotPromoted = 0,\n    /**\n     * Page that will be promoted as news article after publishing\n     */\n    PromoteOnPublish = 1,\n    /**\n     * Page that is promoted as news article\n     */\n    Promoted = 2,\n}\n\n/**\n * Type describing the available page layout types for client side \"modern\" pages\n */\nexport type ClientSidePageLayoutType = \"Article\" | \"Home\" | \"SingleWebPartAppPage\" | \"RepostPage\";\n\n/**\n * Column size factor. Max value is 12 (= one column), other options are 8,6,4 or 0\n */\nexport type CanvasColumnFactor = 0 | 2 | 4 | 6 | 8 | 12;\n\n/**\n * Gets the next order value 1 based for the provided collection\n * \n * @param collection Collection of orderable things\n */\nfunction getNextOrder(collection: { order: number }[]): number {\n\n    if (collection.length < 1) {\n        return 1;\n    }\n\n    return Math.max.apply(null, collection.map(i => i.order)) + 1;\n}\n\n/**\n * Normalizes the order value for all the sections, columns, and controls to be 1 based and stepped (1, 2, 3...)\n * \n * @param collection The collection to normalize\n */\nfunction reindex(collection: { order: number, columns?: { order: number }[], controls?: { order: number }[] }[]): void {\n\n    for (let i = 0; i < collection.length; i++) {\n        collection[i].order = i + 1;\n        if (hOP(collection[i], \"columns\")) {\n            reindex(collection[i].columns);\n        } else if (hOP(collection[i], \"controls\")) {\n            reindex(collection[i].controls);\n        }\n    }\n}\n\n/**\n * Represents the data and methods associated with client side \"modern\" pages\n */\nexport class ClientSidePage extends SharePointQueryable {\n\n    private _pageSettings: IClientSidePageSettingsSlice;\n    private _layoutPart: ILayoutPartsContent;\n    private _bannerImageDirty: boolean;\n\n    /**\n     * PLEASE DON'T USE THIS CONSTRUCTOR DIRECTLY\n     * \n     */\n    constructor(\n        baseUrl: string | SharePointQueryable,\n        path?: string,\n        private json?: Partial<IPageData>,\n        noInit = false,\n        public sections: CanvasSection[] = [],\n        public commentsDisabled = false) {\n\n        super(baseUrl, path);\n\n        this._bannerImageDirty = false;\n\n        // ensure we have a good url to build on for the pages api\n        if (typeof baseUrl === \"string\") {\n            this._parentUrl = \"\";\n            this._url = combine(extractWebUrl(baseUrl), path);\n        } else {\n            this.extend(ClientSidePage.initFrom(baseUrl, null), path);\n        }\n\n        // set a default page settings slice\n        this._pageSettings = { controlType: 0, pageSettingsSlice: { isDefaultDescription: true, isDefaultThumbnail: true } };\n\n        // set a default layout part\n        this._layoutPart = ClientSidePage.getDefaultLayoutPart();\n\n        if (typeof json !== \"undefined\" && !noInit) {\n            this.fromJSON(json);\n        }\n    }\n\n    /**\n     * Creates a new blank page within the supplied library [does not work with batching]\n     * \n     * @param web Parent web in which we will create the page (we allow list here too matching the old api)\n     * @param pageName Filename of the page, such as \"page\"\n     * @param title The display title of the page\n     * @param pageLayoutType Layout type of the page to use\n     * @param promotedState Allows you to set the promoted state of a page when creating\n     */\n    public static async create(\n        web: Web | List,\n        pageName: string,\n        title: string,\n        pageLayoutType: ClientSidePageLayoutType = \"Article\",\n        promotedState: PromotedState = 0): Promise<ClientSidePage> {\n\n        // patched because previously we used the full page name with the .aspx at the end\n        // this allows folk's existing code to work after the re-write to the new API\n        pageName = pageName.replace(/\\.aspx$/i, \"\");\n\n        // this is the user data we will use to init the author field\n        // const currentUserLogin = await ClientSidePage.getPoster(\"/_api/web/currentuser\").select(\"UserPrincipalName\").get<{ UserPrincipalName: string }>();\n\n        // initialize the page, at this point a checked-out page with a junk filename will be created.\n        const pageInitData = await ClientSidePage.initFrom(web, \"_api/sitepages/pages\").postCore<IPageData>({\n            body: jsS(Object.assign(metadata(\"SP.Publishing.SitePage\"), {\n                PageLayoutType: pageLayoutType,\n                PromotedState: promotedState,\n            })),\n        });\n\n        // now we can init our page with the save data\n        const newPage = new ClientSidePage(web, \"\", pageInitData);\n        // newPage.authors = [currentUserLogin.UserPrincipalName];\n        newPage.title = pageName;\n        await newPage.save(false);\n        newPage.title = title;\n        return newPage;\n    }\n\n    /**\n     * Creates a new ClientSidePage instance from the provided html content string\n     * \n     * @param html HTML markup representing the page\n     */\n    public static fromFile(file: File): Promise<ClientSidePage> {\n\n        return file.getItem<{ Id: number }>().then(i => {\n            const page = new ClientSidePage(extractWebUrl(file.toUrl()), \"\", { Id: i.Id }, true);\n            return page.configureFrom(file).load();\n        });\n    }\n\n    private static getDefaultLayoutPart(): ILayoutPartsContent {\n        return {\n            dataVersion: \"1.4\",\n            description: \"Title Region Description\",\n            id: \"cbe7b0a9-3504-44dd-a3a3-0e5cacd07788\",\n            instanceId: \"cbe7b0a9-3504-44dd-a3a3-0e5cacd07788\",\n            properties: {\n                authors: [],\n                layoutType: \"FullWidthImage\",\n                showPublishDate: false,\n                showTopicHeader: false,\n                textAlignment: \"Left\",\n                title: \"\",\n                topicHeader: \"\",\n            },\n            serverProcessedContent: { htmlStrings: {}, searchablePlainTexts: {}, imageSources: {}, links: {} },\n            title: \"Title area\",\n        };\n    }\n\n    private static initFrom(o: SharePointQueryable, url: string): ClientSidePage {\n        return (new ClientSidePage(extractWebUrl(o.toUrl()), url)).configureFrom(o);\n    }\n\n    public get pageLayout(): ClientSidePageLayoutType {\n        return this.json.PageLayoutType;\n    }\n\n    public set pageLayout(value: ClientSidePageLayoutType) {\n        this.json.PageLayoutType = value;\n    }\n\n    public get bannerImageUrl(): string {\n        return this.json.BannerImageUrl;\n    }\n\n    public set bannerImageUrl(value: string) {\n        this.json.BannerImageUrl = value;\n        this._bannerImageDirty = true;\n    }\n\n    public get bannerImageSourceType(): number {\n        return this._layoutPart.properties.imageSourceType;\n    }\n\n    public set bannerImageSourceType(value: number) {\n        this._layoutPart.properties.imageSourceType = value;\n    }\n\n    public get topicHeader(): string {\n        return objectDefinedNotNull(this.json.TopicHeader) ? this.json.TopicHeader : \"\";\n    }\n\n    public set topicHeader(value: string) {\n        this.json.TopicHeader = value;\n        this._layoutPart.properties.topicHeader = value;\n        if (stringIsNullOrEmpty(value)) {\n            this.showTopicHeader = false;\n        }\n    }\n\n    // public get authors(): string[] {\n    //     return this._layoutPart.properties.authorByline;\n    // }\n\n    // public set authors(value: string[]) {\n    //     this.json.AuthorByline = value;\n    //     this._layoutPart.properties.authorByline = value;\n    //     this._layoutPart.properties.authors = null;\n    // }\n\n    public get title(): string {\n        return this._layoutPart.properties.title;\n    }\n\n    public set title(value: string) {\n        this.json.Title = value;\n        this._layoutPart.properties.title = value;\n    }\n\n    public get layoutType(): LayoutType {\n        return this._layoutPart.properties.layoutType;\n    }\n\n    public set layoutType(value: LayoutType) {\n        this._layoutPart.properties.layoutType = value;\n    }\n\n    public get headerTextAlignment(): TextAlignment {\n        return this._layoutPart.properties.textAlignment;\n    }\n\n    public set headerTextAlignment(value: TextAlignment) {\n        this._layoutPart.properties.textAlignment = value;\n    }\n\n    public get showTopicHeader(): boolean {\n        return this._layoutPart.properties.showTopicHeader;\n    }\n\n    public set showTopicHeader(value: boolean) {\n        this._layoutPart.properties.showTopicHeader = value;\n    }\n\n    public get showPublishDate(): boolean {\n        return this._layoutPart.properties.showPublishDate;\n    }\n\n    public set showPublishDate(value: boolean) {\n        this._layoutPart.properties.showPublishDate = value;\n    }\n\n    public get hasVerticalSection(): boolean {\n        return this.sections.findIndex(s => s.layoutIndex === 2) > -1;\n    }\n\n    public get verticalSection(): CanvasSection | null {\n        if (this.hasVerticalSection) {\n            return this.addVerticalSection();\n        }\n        return null;\n    }\n\n    /**\n     * Add a section to this page\n     */\n    public addSection(): CanvasSection {\n        const section = new CanvasSection(this, getNextOrder(this.sections), 1);\n        this.sections.push(section);\n        return section;\n    }\n\n    /**\n     * Add a section to this page\n     */\n    public addVerticalSection(): CanvasSection {\n\n        // we can only have one vertical section so we find it if it exists\n        const sectionIndex = this.sections.findIndex(s => s.layoutIndex === 2);\n        if (sectionIndex > -1) {\n            return this.sections[sectionIndex];\n        }\n\n        const section = new CanvasSection(this, getNextOrder(this.sections), 2);\n        this.sections.push(section);\n        return section;\n    }\n\n    public fromJSON(pageData: Partial<IPageData>): this {\n\n        this.json = pageData;\n\n        const canvasControls: IClientSideControlBaseData[] = JSON.parse(pageData.CanvasContent1);\n\n        const layouts = <ILayoutPartsContent[]>JSON.parse(pageData.LayoutWebpartsContent);\n        if (layouts && layouts.length > 0) {\n            this._layoutPart = layouts[0];\n        }\n\n        this.setControls(canvasControls);\n\n        return this;\n    }\n\n    /**\n     * Loads this page's content from the server\n     */\n    public load(): Promise<ClientSidePage> {\n\n        // load item id, then load page data from new pages api\n        return this.getItem<{ Id: number, CommentsDisabled: boolean }>(\"Id\", \"CommentsDisabled\").then(item => {\n            return (new SharePointQueryable(this, `_api/sitepages/pages(${item.Id})`)).get<IPageData>().then(pageData => {\n                this.commentsDisabled = item.CommentsDisabled;\n                return this.fromJSON(pageData);\n            });\n        });\n    }\n\n    /**\n     * Persists the content changes (sections, columns, and controls) [does not work with batching]\n     * \n     * @param publish If true the page is published, if false the changes are persisted to SharePoint but not published\n     */\n    public save(publish = true): Promise<boolean> {\n\n        if (this.json.Id === null) {\n            throw Error(\"The id for this page is null. If you want to create a new page, please use ClientSidePage.Create\");\n        }\n\n        // we will chain our work on this promise\n        let promise = Promise.resolve<any>({});\n\n        if (this._bannerImageDirty) {\n\n            // we have to do these gymnastics to set the banner image url\n            promise = promise.then(_ => new Promise((resolve, reject) => {\n\n                let origImgUrl = this.json.BannerImageUrl;\n\n                if (isUrlAbsolute(origImgUrl)) {\n                    // do our best to make this a server relative url by removing the x.sharepoint.com part\n                    origImgUrl = origImgUrl.replace(/^https?:\\/\\/[a-z0-9\\.]*?\\.[a-z]{2,3}\\//i, \"/\");\n                }\n\n                const site = new Site(extractWebUrl(this.toUrl()));\n                const web = new Web(extractWebUrl(this.toUrl()));\n                const imgFile = web.getFileByServerRelativePath(origImgUrl);\n\n                let siteId = \"\";\n                let webId = \"\";\n                let imgId = \"\";\n                let listId = \"\";\n                let webUrl = \"\";\n\n                Promise.all([\n                    site.select(\"Id\", \"Url\").get().then(r => siteId = r.Id),\n                    web.select(\"Id\", \"Url\").get().then(r => { webId = r.Id; webUrl = r.Url; }),\n                    imgFile.listItemAllFields.select(\"UniqueId\", \"ParentList/Id\").expand(\"ParentList\").get().then(r => { imgId = r.UniqueId; listId = r.ParentList.Id; }),\n                ]).then(() => {\n\n                    const f = new SharePointQueryable(webUrl, \"_layouts/15/getpreview.ashx\");\n                    f.query.set(\"guidSite\", `${siteId}`);\n                    f.query.set(\"guidWeb\", `${webId}`);\n                    f.query.set(\"guidFile\", `${imgId}`);\n                    this.bannerImageUrl = f.toUrlAndQuery();\n\n                    if (!objectDefinedNotNull(this._layoutPart.serverProcessedContent)) {\n                        this._layoutPart.serverProcessedContent = <any>{};\n                    }\n\n                    this._layoutPart.serverProcessedContent.imageSources = { imageSource: origImgUrl };\n\n                    if (!objectDefinedNotNull(this._layoutPart.serverProcessedContent.customMetadata)) {\n                        this._layoutPart.serverProcessedContent.customMetadata = <any>{};\n                    }\n\n                    this._layoutPart.serverProcessedContent.customMetadata.imageSource = {\n                        listId,\n                        siteId,\n                        uniqueId: imgId,\n                        webId,\n                    };\n                    this._layoutPart.properties.webId = webId;\n                    this._layoutPart.properties.siteId = siteId;\n                    this._layoutPart.properties.listId = listId;\n                    this._layoutPart.properties.uniqueId = imgId;\n                    resolve();\n                }).catch(reject);\n            }));\n        }\n\n        // we need to update our authors if they have changed\n        // if (this._layoutPart.properties.authors === null && this._layoutPart.properties.authorByline.length > 0) {\n\n        //     promise = promise.then(_ => new Promise(resolve => {\n\n        //         const collector: any[] = [];\n        //         const userResolver = ClientSidePage.getPoster(\"/_api/SP.UI.ApplicationPages.ClientPeoplePickerWebServiceInterface.ClientPeoplePickerResolveUser\");\n\n        //         this._layoutPart.properties.authorByline.forEach(async author => {\n        //             const userData = await userResolver.postCore({\n        //                 body: jsS({\n        //                     queryParams: {\n        //                         AllowEmailAddresses: false,\n        //                         MaximumEntitySuggestions: 1,\n        //                         PrincipalSource: 15,\n        //                         PrincipalType: 1,\n        //                         QueryString: author,\n        //                         SharePointGroupID: 0,\n        //                     },\n        //                 }),\n        //             });\n\n        //             collector.push({\n        //                 email: userData.EntityData.Email,\n        //                 id: userData.Key,\n        //                 name: userData.DisplayName,\n        //                 role: \"\",\n        //                 upn: userData.EntityData.Email,\n        //             });\n        //         });\n\n        //         this._layoutPart.properties.authors = collector;\n\n        //         resolve();\n        //     }));\n        // }\n\n        // we try and check out the page for the user\n        if (!this.json.IsPageCheckedOutToCurrentUser) {\n            promise = promise.then(_ => (ClientSidePage.initFrom(this, `_api/sitepages/pages(${this.json.Id})/checkoutpage`)).postCore<IPageData>());\n        }\n\n        promise = promise.then(_ => {\n\n            const saveBody = Object.assign(metadata(\"SP.Publishing.SitePage\"), {\n                AuthorByline: this.json.AuthorByline || [],\n                BannerImageUrl: this.bannerImageUrl,\n                CanvasContent1: this.getCanvasContent1(),\n                LayoutWebpartsContent: this.getLayoutWebpartsContent(),\n                Title: this.title,\n                TopicHeader: this.topicHeader,\n            });\n\n            const updater = ClientSidePage.initFrom(this, `_api/sitepages/pages(${this.json.Id})/savepage`);\n            updater.configure({\n                headers: {\n                    \"if-match\": \"*\",\n                },\n            });\n            return updater.postCore<boolean>({ body: jsS(saveBody) });\n        });\n\n        if (publish) {\n            promise = promise.then(_ => (ClientSidePage.initFrom(this, `_api/sitepages/pages(${this.json.Id})/publish`)).postCore<boolean>()).then(r => {\n                if (r) {\n                    this.json.IsPageCheckedOutToCurrentUser = false;\n                }\n            });\n        }\n\n        promise = promise.then(_ => {\n            // these are post-save actions\n            this._bannerImageDirty = false;\n        });\n\n        return promise;\n    }\n\n    public async discardPageCheckout(): Promise<void> {\n\n        if (this.json.Id === null) {\n            throw Error(\"The id for this page is null. If you want to create a new page, please use ClientSidePage.Create\");\n        }\n\n        const d = await ClientSidePage.initFrom(this, `_api/sitepages/pages(${this.json.Id})/discardPage`).postCore<IPageData>({\n            body: jsS(metadata(\"SP.Publishing.SitePage\")),\n        });\n\n        this.fromJSON(d);\n    }\n\n    public async promoteToNews(): Promise<boolean> {\n        return this.promoteNewsImpl(\"promoteToNews\");\n    }\n\n    // API is currently broken on server side\n    // public async demoteFromNews(): Promise<boolean> {\n    //     return this.promoteNewsImpl(\"demoteFromNews\");\n    // }\n\n    /**\n     * Enables comments on this page\n     */\n    public enableComments(): Promise<ItemUpdateResult> {\n        return this.setCommentsOn(true).then(r => {\n            this.commentsDisabled = false;\n            return r;\n        });\n    }\n\n    /**\n     * Disables comments on this page\n     */\n    public disableComments(): Promise<ItemUpdateResult> {\n        return this.setCommentsOn(false).then(r => {\n            this.commentsDisabled = true;\n            return r;\n        });\n    }\n\n    /**\n     * Finds a control by the specified instance id\n     *\n     * @param id Instance id of the control to find\n     */\n    public findControlById<T extends ColumnControl<any> = ColumnControl<any>>(id: string): T {\n        return this.findControl((c) => c.id === id);\n    }\n\n    /**\n     * Finds a control within this page's control tree using the supplied predicate\n     *\n     * @param predicate Takes a control and returns true or false, if true that control is returned by findControl\n     */\n    public findControl<T extends ColumnControl<any> = ColumnControl<any>>(predicate: (c: ColumnControl<any>) => boolean): T {\n        // check all sections\n        for (let i = 0; i < this.sections.length; i++) {\n            // check all columns\n            for (let j = 0; j < this.sections[i].columns.length; j++) {\n                // check all controls\n                for (let k = 0; k < this.sections[i].columns[j].controls.length; k++) {\n                    // check to see if the predicate likes this control\n                    if (predicate(this.sections[i].columns[j].controls[k])) {\n                        return <T>this.sections[i].columns[j].controls[k];\n                    }\n                }\n            }\n        }\n\n        // we found nothing so give nothing back\n        return null;\n    }\n\n    /**\n     * Like the modern site page\n     */\n    public like(): Promise<void> {\n        return this.getItem().then(i => {\n            return i.like();\n        });\n    }\n\n    /**\n     * Unlike the modern site page\n     */\n    public unlike(): Promise<void> {\n        return this.getItem().then(i => {\n            return i.unlike();\n        });\n    }\n\n    /**\n     * Get the liked by information for a modern site page     \n     */\n    public getLikedByInformation(): Promise<any> {\n        return this.getItem().then(i => {\n            return i.getLikedByInformation();\n        });\n    }\n\n    /**\n     * Creates a copy of this page\n     * \n     * @param web The web where we will create the copy\n     * @param pageName The file name of the new page\n     * @param title The title of the new page\n     * @param publish If true the page will be published\n     * @param promotedState Allows you to set the promoted state of a page when making a copy\n     */\n    public async copyPage(web: Web | List, pageName: string, title: string, publish = true, promotedState: PromotedState = 0): Promise<ClientSidePage> {\n\n        const page = await ClientSidePage.create(web, pageName, title, this.pageLayout, promotedState);\n\n        page.setControls(this.getControls());\n\n        await page.save(publish);\n\n        return page;\n    }\n\n    /**\n     * Sets the modern page banner image\n     * \n     * @param url Url of the image to display\n     * @param altText Alt text to describe the image\n     * @param bannerProps Additional properties to control display of the banner\n     */\n    public setBannerImage(url: string, props?: {\n        altText?: string;\n        imageSourceType?: number;\n        translateX?: number;\n        translateY?: number;\n    }): void {\n\n        this.bannerImageUrl = url;\n        this.bannerImageSourceType = 2; // this seems to always be true, so default?\n\n        if (objectDefinedNotNull(props)) {\n            if (hOP(props, \"translateX\")) {\n                this._layoutPart.properties.translateX = props.translateX;\n            }\n            if (hOP(props, \"translateY\")) {\n                this._layoutPart.properties.translateY = props.translateY;\n            }\n            if (hOP(props, \"imageSourceType\")) {\n                this.bannerImageSourceType = props.imageSourceType;\n            }\n            if (hOP(props, \"altText\")) {\n                this._layoutPart.properties.altText = props.altText;\n            }\n        }\n    }\n\n    protected getCanvasContent1(): string {\n        return JSON.stringify(this.getControls());\n    }\n\n    protected getLayoutWebpartsContent(): string {\n        if (this._layoutPart) {\n            return JSON.stringify([this._layoutPart]);\n        } else {\n            return JSON.stringify(null);\n        }\n    }\n\n    protected setControls(controls: IClientSideControlBaseData[]): void {\n\n        if (controls && controls.length) {\n\n            for (let i = 0; i < controls.length; i++) {\n\n                // if no control type is present this is a column which we give type 0 to let us process it\n                const controlType = hOP(controls[i], \"controlType\") ? controls[i].controlType : 0;\n\n                switch (controlType) {\n\n                    case 0:\n                        // empty canvas column or page settings\n                        if (hOP(controls[i], \"pageSettingsSlice\")) {\n                            this._pageSettings = <IClientSidePageSettingsSlice>controls[i];\n                        } else {\n                            // we have an empty column\n                            this.mergeColumnToTree(new CanvasColumn(<IClientSidePageColumnData>controls[i]));\n                        }\n                        break;\n                    case 3:\n                        const part = new ClientSideWebpart(<IClientSideWebPartData>controls[i]);\n                        this.mergePartToTree(part, part.data.position);\n                        break;\n                    case 4:\n                        const textData = <IClientSideTextData>controls[i];\n                        const text = new ClientSideText(textData.innerHTML, textData);\n                        this.mergePartToTree(text, text.data.position);\n                        break;\n                }\n            }\n\n            reindex(this.sections);\n        }\n    }\n\n    protected getControls(): IClientSideControlBaseData[] {\n\n        // reindex things\n        reindex(this.sections);\n\n        // rollup the control changes\n        const canvasData: any[] = [];\n\n        this.sections.forEach(section => {\n            section.columns.forEach(column => {\n                if (column.controls.length < 1) {\n                    // empty column\n                    canvasData.push({\n                        displayMode: column.data.displayMode,\n                        emphasis: this.getEmphasisObj(section.emphasis),\n                        position: column.data.position,\n                    });\n                } else {\n                    column.controls.forEach(control => {\n                        control.data.emphasis = this.getEmphasisObj(section.emphasis);\n                        canvasData.push(control.data);\n                    });\n                }\n            });\n        });\n\n        canvasData.push(this._pageSettings);\n\n        return canvasData;\n    }\n\n    private getEmphasisObj(value: 0 | 1 | 2 | 3): IClientControlEmphasis {\n        if (value < 1 || value > 3) {\n            return {};\n        }\n\n        return { zoneEmphasis: value };\n    }\n\n    /**\n     * Sets the comments flag for a page\n     * \n     * @param on If true comments are enabled, false they are disabled\n     */\n    private setCommentsOn(on: boolean): Promise<ItemUpdateResult> {\n        return this.getItem().then(i => {\n            const updater = new Item(i, `SetCommentsDisabled(${!on})`);\n            return updater.update({});\n        });\n    }\n\n    private async promoteNewsImpl(method: string): Promise<boolean> {\n\n        // per bug #858 if we promote before we have ever published the last published date will\n        // forever not be updated correctly in the modern news webpart. Because this will affect very\n        // few folks we just go ahead and publish for them here as that is likely what they intended.\n        if (stringIsNullOrEmpty(this.json.VersionInfo.LastVersionCreatedBy)) {\n            const lastPubData = new Date(this.json.VersionInfo.LastVersionCreated);\n            // no modern page should reasonable be published before the year 2000 :)\n            if (lastPubData.getFullYear() < 2000) {\n                await this.save(true);\n            }\n        }\n\n        if (this.json.Id === null) {\n            throw Error(\"The id for this page is null. If you want to create a new page, please use ClientSidePage.Create\");\n        }\n\n        const d = await ClientSidePage.initFrom(this, `_api/sitepages/pages(${this.json.Id})/${method}`).postCore<boolean>({\n            body: jsS(metadata(\"SP.Publishing.SitePage\")),\n        });\n\n        return d;\n    }\n\n    /**\n     * Merges the control into the tree of sections and columns for this page\n     * \n     * @param control The control to merge\n     */\n    private mergePartToTree(control: any, positionData: IPosition): void {\n\n        let column: CanvasColumn = null;\n        let sectionFactor: CanvasColumnFactor = 12;\n        let sectionIndex = 0;\n        let zoneIndex = 0;\n        let layoutIndex = 1;\n\n        // handle case where we don't have position data (shouldn't happen?)\n        if (positionData) {\n            if (hOP(positionData, \"zoneIndex\")) {\n                zoneIndex = positionData.zoneIndex;\n            }\n            if (hOP(positionData, \"sectionIndex\")) {\n                sectionIndex = positionData.sectionIndex;\n            }\n            if (hOP(positionData, \"sectionFactor\")) {\n                sectionFactor = positionData.sectionFactor;\n            }\n            if (hOP(positionData, \"layoutIndex\")) {\n                layoutIndex = positionData.layoutIndex;\n            }\n        }\n\n        const zoneEmphasis = (control.data && control.data.emphasis && control.data.emphasis.zoneEmphasis) ? control.data.emphasis.zoneEmphasis : 0;\n        const section = this.getOrCreateSection(zoneIndex, layoutIndex, zoneEmphasis);\n\n        const columns = section.columns.filter(c => c.order === sectionIndex);\n        if (columns.length < 1) {\n            column = section.addColumn(sectionFactor, layoutIndex);\n        } else {\n            column = columns[0];\n        }\n\n        control.column = column;\n        column.addControl(control);\n    }\n\n    /**\n     * Merges the supplied column into the tree\n     * \n     * @param column Column to merge\n     * @param position The position data for the column\n     */\n    private mergeColumnToTree(column: CanvasColumn): void {\n\n        const order = hOP(column.data, \"position\") && hOP(column.data.position, \"zoneIndex\") ? column.data.position.zoneIndex : 0;\n        const layoutIndex = hOP(column.data, \"position\") && hOP(column.data.position, \"layoutIndex\") ? column.data.position.layoutIndex : 1;\n        const section = this.getOrCreateSection(order, layoutIndex, column.data.emphasis.zoneEmphasis || 0);\n        column.section = section;\n        section.columns.push(column);\n    }\n\n    /**\n     * Handle the logic to get or create a section based on the supplied order and layoutIndex\n     * \n     * @param order Section order\n     * @param layoutIndex Layout Index (1 === normal, 2 === vertical section)\n     * @param emphasis The section emphasis\n     */\n    private getOrCreateSection(order: number, layoutIndex: number, emphasis: 0 | 1 | 2 | 3): CanvasSection {\n\n        let section: CanvasSection = null;\n        const sections = this.sections.filter(s => s.order === order && s.layoutIndex === layoutIndex);\n\n        if (sections.length < 1) {\n            section = layoutIndex === 2 ? this.addVerticalSection() : this.addSection();\n            section.order = order;\n            section.emphasis = emphasis;\n        } else {\n            section = sections[0];\n        }\n\n        return section;\n    }\n\n    private getItem<T>(...selects: string[]): Promise<Item & T> {\n\n        const initer = ClientSidePage.initFrom(this, \"/_api/lists/EnsureClientRenderedSitePagesLibrary\").select(\"EnableModeration\", \"EnableMinorVersions\", \"Id\");\n        return initer.postCore<{ Id: string, \"odata.id\": string }>().then(listData => {\n            const item = (new List(listData[\"odata.id\"])).configureFrom(this).items.getById(this.json.Id);\n\n            return item.select.apply(item, selects).get().then((d: T) => {\n                return extend((new Item(odataUrlFrom(d))).configureFrom(this), d);\n            });\n        });\n    }\n}\n\nexport class CanvasSection {\n\n    /**\n     * Used to track this object inside the collection at runtime\n     */\n    private _memId: string;\n\n    private _order: number;\n    private _layoutIndex: number;\n\n    constructor(protected page: ClientSidePage, order: number, layoutIndex: number, public columns: CanvasColumn[] = [], private _emphasis: 0 | 1 | 2 | 3 = 0) {\n        this._memId = getGUID();\n        this._order = order;\n        this._layoutIndex = layoutIndex;\n    }\n\n    public get order(): number {\n        return this._order;\n    }\n\n    public set order(value: number) {\n        this._order = value;\n        for (let i = 0; i < this.columns.length; i++) {\n            this.columns[i].data.position.zoneIndex = value;\n        }\n    }\n\n    public get layoutIndex(): number {\n        return this._layoutIndex;\n    }\n\n    public set layoutIndex(value: number) {\n        this._layoutIndex = value;\n        for (let i = 0; i < this.columns.length; i++) {\n            this.columns[i].data.position.layoutIndex = value;\n        }\n    }\n\n    /**\n     * Default column (this.columns[0]) for this section\n     */\n    public get defaultColumn(): CanvasColumn {\n\n        if (this.columns.length < 1) {\n            this.addColumn(12);\n        }\n\n        return this.columns[0];\n    }\n\n    /**\n     * Adds a new column to this section\n     */\n    public addColumn(factor: CanvasColumnFactor, layoutIndex = 1): CanvasColumn {\n        const column = new CanvasColumn();\n        column.section = this;\n        column.data.position.zoneIndex = this.order;\n        column.data.position.layoutIndex = layoutIndex;\n        column.data.position.sectionFactor = factor;\n        column.order = getNextOrder(this.columns);\n        this.columns.push(column);\n        return column;\n    }\n\n    /**\n     * Adds a control to the default column for this section\n     *\n     * @param control Control to add to the default column\n     */\n    public addControl(control: ColumnControl<any>): this {\n        this.defaultColumn.addControl(control);\n        return this;\n    }\n\n    public get emphasis(): 0 | 1 | 2 | 3 {\n        return this._emphasis;\n    }\n\n    public set emphasis(value: 0 | 1 | 2 | 3) {\n        this._emphasis = value;\n    }\n\n    /**\n     * Removes this section and all contained columns and controls from the collection\n     */\n    public remove(): void {\n        this.page.sections = this.page.sections.filter(section => section._memId !== this._memId);\n        reindex(this.page.sections);\n    }\n}\n\nexport class CanvasColumn {\n\n    public static Default: IClientSidePageColumnData = {\n        controlType: 0,\n        displayMode: 2,\n        emphasis: {},\n        position: {\n            layoutIndex: 1,\n            sectionFactor: 12,\n            sectionIndex: 1,\n            zoneIndex: 1,\n        },\n    };\n\n    private _section: CanvasSection | null;\n    private _memId: string;\n\n    constructor(protected json: IClientSidePageColumnData = JSON.parse(JSON.stringify(CanvasColumn.Default)), public controls: ColumnControl<any>[] = []) {\n        this._section = null;\n        this._memId = getGUID();\n    }\n\n    public get data(): IClientSidePageColumnData {\n        return this.json;\n    }\n\n    public get section(): CanvasSection {\n        return this._section;\n    }\n\n    public set section(section: CanvasSection) {\n        this._section = section;\n    }\n\n    public get order(): number {\n        return this.data.position.sectionIndex;\n    }\n\n    public set order(value: number) {\n        this.data.position.sectionIndex = value;\n        for (let i = 0; i < this.controls.length; i++) {\n            this.controls[i].data.position.zoneIndex = this.data.position.zoneIndex;\n            this.controls[i].data.position.layoutIndex = this.data.position.layoutIndex;\n            this.controls[i].data.position.sectionIndex = value;\n        }\n    }\n\n    public get factor(): CanvasColumnFactor {\n        return this.data.position.sectionFactor;\n    }\n\n    public set factor(value: CanvasColumnFactor) {\n        this.data.position.sectionFactor = value;\n    }\n\n    public addControl(control: ColumnControl<any>): this {\n        control.column = this;\n        this.controls.push(control);\n        return this;\n    }\n\n    public getControl<T extends ColumnControl<any>>(index: number): T {\n        return <T>this.controls[index];\n    }\n\n    public remove(): void {\n        this.section.columns = this.section.columns.filter(column => column._memId !== this._memId);\n        reindex(this.section.columns);\n    }\n}\n\nexport abstract class ColumnControl<T extends ICanvasControlBaseData> {\n\n    private _column: CanvasColumn | null;\n\n    constructor(protected json: T) { }\n\n    public abstract get order(): number;\n    public abstract set order(value: number);\n\n    public get id(): string {\n        return this.json.id;\n    }\n\n    public get data(): T {\n        return this.json;\n    }\n\n    public get column(): CanvasColumn | null {\n        return this._column;\n    }\n\n    public set column(value: CanvasColumn) {\n        this._column = value;\n        this.onColumnChange(this._column);\n    }\n\n    public remove(): void {\n        this.column.controls = this.column.controls.filter(control => control.id !== this.id);\n        reindex(this.column.controls);\n    }\n\n    protected setData(data: T) {\n        this.json = data;\n    }\n\n    protected abstract onColumnChange(col: CanvasColumn): void;\n}\n\nexport class ClientSideText extends ColumnControl<IClientSideTextData> {\n\n    public static Default: IClientSideTextData = {\n        addedFromPersistedData: false,\n        anchorComponentId: \"\",\n        controlType: 4,\n        displayMode: 2,\n        editorType: \"CKEditor\",\n        emphasis: {},\n        id: \"\",\n        innerHTML: \"\",\n        position: {\n            controlIndex: 1,\n            layoutIndex: 1,\n            sectionFactor: 12,\n            sectionIndex: 1,\n            zoneIndex: 1,\n        },\n    };\n\n    constructor(text: string, json: IClientSideTextData = JSON.parse(JSON.stringify(ClientSideText.Default))) {\n        if (stringIsNullOrEmpty(json.id)) {\n            json.id = getGUID();\n            json.anchorComponentId = json.id;\n        }\n        super(json);\n\n        this.text = text;\n    }\n\n    public get text(): string {\n        return this.data.innerHTML;\n    }\n\n    public set text(value: string) {\n        if (!value.startsWith(\"<p>\")) {\n            value = `<p>${value}</p>`;\n        }\n        this.data.innerHTML = value;\n    }\n\n    public get order(): number {\n        return this.data.position.controlIndex;\n    }\n\n    public set order(value: number) {\n        this.data.position.controlIndex = value;\n    }\n\n    protected onColumnChange(col: CanvasColumn): void {\n        this.data.position.sectionFactor = col.factor;\n        this.data.position.controlIndex = getNextOrder(col.controls);\n        this.data.position.zoneIndex = col.data.position.zoneIndex;\n        this.data.position.sectionIndex = col.order;\n        this.data.position.layoutIndex = col.data.position.layoutIndex;\n    }\n}\n\nexport class ClientSideWebpart extends ColumnControl<IClientSideWebPartData> {\n\n    public static Default: IClientSideWebPartData = {\n        addedFromPersistedData: false,\n        controlType: 3,\n        displayMode: 2,\n        emphasis: {},\n        id: null,\n        position: {\n            controlIndex: 1,\n            layoutIndex: 1,\n            sectionFactor: 12,\n            sectionIndex: 1,\n            zoneIndex: 1,\n        },\n        reservedHeight: 500,\n        reservedWidth: 500,\n        webPartData: null,\n        webPartId: null,\n    };\n\n    constructor(json: IClientSideWebPartData = JSON.parse(JSON.stringify(ClientSideWebpart.Default))) {\n        super(json);\n    }\n\n    public static fromComponentDef(definition: ClientSidePageComponent): ClientSideWebpart {\n        const part = new ClientSideWebpart();\n        part.import(definition);\n        return part;\n    }\n\n    public get title(): string {\n        return this.data.webPartData.title;\n    }\n\n    public set title(value: string) {\n        this.data.webPartData.title = value;\n    }\n\n    public get description(): string {\n        return this.data.webPartData.description;\n    }\n\n    public set description(value: string) {\n        this.data.webPartData.description = value;\n    }\n\n    public get order(): number {\n        return this.data.position.controlIndex;\n    }\n\n    public set order(value: number) {\n        this.data.position.controlIndex = value;\n    }\n\n    public get height(): number {\n        return this.data.reservedHeight;\n    }\n\n    public set height(value: number) {\n        this.data.reservedHeight = value;\n    }\n\n    public get width(): number {\n        return this.data.reservedWidth;\n    }\n\n    public set width(value: number) {\n        this.data.reservedWidth = value;\n    }\n\n    public get dataVersion(): string {\n        return this.data.webPartData.dataVersion;\n    }\n\n    public set dataVersion(value: string) {\n        this.data.webPartData.dataVersion = value;\n    }\n\n    public setProperties<T = any>(properties: T): this {\n        this.data.webPartData.properties = extend(this.data.webPartData.properties, properties);\n        return this;\n    }\n\n    public getProperties<T = any>(): T {\n        return <T>this.data.webPartData.properties;\n    }\n\n    protected onColumnChange(col: CanvasColumn): void {\n        this.data.position = {\n            controlIndex: getNextOrder(col.controls),\n            layoutIndex: col.data.position.layoutIndex,\n            sectionFactor: col.factor,\n            sectionIndex: col.data.position.sectionIndex,\n            zoneIndex: col.data.position.zoneIndex,\n        };\n    }\n\n    protected import(component: ClientSidePageComponent): void {\n\n        const id = getGUID();\n        const componendId = component.Id.replace(/^\\{|\\}$/g, \"\").toLowerCase();\n        const manifest: IClientSidePageComponentManifest = JSON.parse(component.Manifest);\n        const preconfiguredEntries = manifest.preconfiguredEntries[0];\n\n        this.setData(Object.assign({}, this.data, <IClientSideWebPartData>{\n            id,\n            webPartData: {\n                dataVersion: \"1.0\",\n                description: preconfiguredEntries.description.default,\n                id: componendId,\n                instanceId: id,\n                properties: preconfiguredEntries.properties,\n                title: preconfiguredEntries.title.default,\n            },\n            webPartId: componendId,\n        }));\n    }\n}\n\nexport interface IPageData {\n    readonly \"odata.metadata\": string;\n    readonly \"odata.type\": \"SP.Publishing.SitePage\";\n    readonly \"odata.id\": string;\n    readonly \"odata.editLink\": string;\n    AbsoluteUrl: string;\n    AuthorByline: string[] | null;\n    BannerImageUrl: string;\n    ContentTypeId: null | string;\n    Description: string;\n    DoesUserHaveEditPermission: boolean;\n    FileName: string;\n    readonly FirstPublished: string;\n    readonly Id: number;\n    IsPageCheckedOutToCurrentUser: boolean;\n    IsWebWelcomePage: boolean;\n    readonly Modified: string;\n    PageLayoutType: ClientSidePageLayoutType;\n    Path: {\n        DecodedUrl: string;\n    };\n    PromotedState: number;\n    Title: string;\n    TopicHeader: null | string;\n    readonly UniqueId: string;\n    Url: string;\n    readonly Version: string;\n    readonly VersionInfo: {\n        readonly LastVersionCreated: string;\n        readonly LastVersionCreatedBy: string;\n    };\n    AlternativeUrlMap: string;\n    CanvasContent1: string;\n    LayoutWebpartsContent: string;\n}\n\n/**\n * Client side webpart object (retrieved via the _api/web/GetClientSideWebParts REST call)\n */\nexport interface ClientSidePageComponent {\n    /**\n     * Component type for client side webpart object\n     */\n    ComponentType: number;\n    /**\n     * Id for client side webpart object\n     */\n    Id: string;\n    /**\n     * Manifest for client side webpart object\n     */\n    Manifest: string;\n    /**\n     * Manifest type for client side webpart object\n     */\n    ManifestType: number;\n    /**\n     * Name for client side webpart object\n     */\n    Name: string;\n    /**\n     * Status for client side webpart object\n     */\n    Status: number;\n}\n\ninterface IClientSidePageComponentManifest {\n    alias: string;\n    componentType: \"WebPart\" | \"\" | null;\n    disabledOnClassicSharepoint: boolean;\n    hiddenFromToolbox: boolean;\n    id: string;\n    imageLinkPropertyNames: any;\n    isInternal: boolean;\n    linkPropertyNames: boolean;\n    loaderConfig: any;\n    manifestVersion: number;\n    preconfiguredEntries: {\n        description: { default: string };\n        group: { default: string };\n        groupId: string;\n        iconImageUrl: string;\n        officeFabricIconFontName: string;\n        properties: TypedHash<any>;\n        title: { default: string };\n\n    }[];\n    preloadComponents: any | null;\n    requiredCapabilities: any | null;\n    searchablePropertyNames: any | null;\n    supportsFullBleed: boolean;\n    version: string;\n}\n\nexport interface IClientSideControlBaseData {\n    controlType: number;\n}\n\nexport interface ICanvasControlBaseData extends IClientSideControlBaseData {\n    id: string;\n    emphasis: IClientControlEmphasis;\n    displayMode: number;\n}\n\nexport interface IClientSidePageSettingsSlice extends IClientSideControlBaseData {\n    pageSettingsSlice: {\n        \"isDefaultDescription\": boolean;\n        \"isDefaultThumbnail\": boolean;\n    };\n}\n\nexport interface IClientSidePageColumnData extends IClientSideControlBaseData {\n    controlType: 0;\n    displayMode: number;\n    emphasis: IClientControlEmphasis;\n    position: IPosition;\n}\n\ninterface IPosition {\n    zoneIndex: number;\n    sectionIndex: number;\n    controlIndex?: number;\n    sectionFactor?: CanvasColumnFactor;\n    layoutIndex: number;\n}\n\nexport interface IClientSideTextData extends ICanvasControlBaseData {\n    controlType: 4;\n    position: IPosition;\n    anchorComponentId: string;\n    editorType: \"CKEditor\";\n    addedFromPersistedData: boolean;\n    innerHTML: string;\n}\n\nexport interface IClientSideWebPartData<PropertiesType = any> extends ICanvasControlBaseData {\n    controlType: 3;\n    position: IPosition;\n    webPartId: string;\n    reservedHeight: number;\n    reservedWidth: number;\n    addedFromPersistedData: boolean;\n    webPartData: {\n        id: string;\n        instanceId: string;\n        title: string;\n        description: string;\n        serverProcessedContent?: {\n            \"htmlStrings\": TypedHash<string>;\n            \"searchablePlainTexts\": TypedHash<string>;\n            \"imageSources\": TypedHash<string>;\n            \"links\": TypedHash<string>;\n        };\n        dataVersion: string;\n        properties: PropertiesType;\n    };\n}\n\nexport interface IClientControlEmphasis {\n    zoneEmphasis?: 0 | 1 | 2 | 3;\n}\n\nexport module ClientSideWebpartPropertyTypes {\n\n    /**\n     * Propereties for Embed (component id: 490d7c76-1824-45b2-9de3-676421c997fa)\n     */\n    export interface Embed {\n        embedCode: string;\n        cachedEmbedCode?: string;\n        shouldScaleWidth?: boolean;\n        tempState?: any;\n    }\n\n    /**\n     * Properties for Bing Map (component id: e377ea37-9047-43b9-8cdb-a761be2f8e09)\n     */\n    export interface BingMap {\n        center: {\n            altitude?: number;\n            altitudeReference?: number;\n            latitude: number;\n            longitude: number;\n        };\n        mapType: \"aerial\" | \"birdseye\" | \"road\" | \"streetside\";\n        maxNumberOfPushPins?: number;\n        pushPins?: {\n            location: {\n                latitude: number;\n                longitude: number;\n                altitude?: number;\n                altitudeReference?: number;\n            };\n            address?: string;\n            defaultAddress?: string;\n            defaultTitle?: string;\n            title?: string;\n        }[];\n        shouldShowPushPinTitle?: boolean;\n        zoomLevel?: number;\n    }\n}\n\nexport type LayoutType = \"FullWidthImage\" | \"NoImage\" | \"ColorBlock\" | \"CutInShape\";\nexport type TextAlignment = \"Left\" | \"Center\";\n\ninterface ILayoutPartsContent {\n    id: string;\n    instanceId: string;\n    title: string;\n    description: string;\n    serverProcessedContent: {\n        htmlStrings: TypedHash<string>;\n        searchablePlainTexts: TypedHash<string>;\n        imageSources: TypedHash<string>;\n        links: TypedHash<string>;\n        customMetadata?: {\n            imageSource?: {\n                siteId: string;\n                webId: string;\n                listId: string;\n                uniqueId: string;\n            },\n        }\n    };\n    dataVersion: string;\n    properties: {\n        title: string;\n        imageSourceType?: number;\n        layoutType: LayoutType;\n        textAlignment: TextAlignment;\n        showTopicHeader: boolean;\n        showPublishDate: boolean;\n        topicHeader: string;\n        authors: {\n            id: string,\n            email: string;\n            upn: string;\n            name: string;\n            role: string;\n        }[];\n        webId?: string;\n        siteId?: string;\n        listId?: string;\n        uniqueId?: string;\n        translateX?: number;\n        translateY?: number;\n        altText?: string;\n    };\n}\n","import { SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { extend, jsS, hOP, getHashCode, objectDefinedNotNull, isArray } from \"@pnp/common\";\nimport { metadata } from \"./utils/metadata\";\nimport { CachingOptions } from \"@pnp/odata\";\n\nexport interface ISearchQueryBuilder {\n    query: any;\n    readonly bypassResultTypes: this;\n    readonly enableStemming: this;\n    readonly enableInterleaving: this;\n    readonly enableFql: this;\n    readonly enableNicknames: this;\n    readonly enablePhonetic: this;\n    readonly trimDuplicates: this;\n    readonly processBestBets: this;\n    readonly enableQueryRules: this;\n    readonly enableSorting: this;\n    readonly generateBlockRankLog: this;\n    readonly processPersonalFavorites: this;\n    readonly enableOrderingHitHighlightedProperty: this;\n\n    culture(culture: number): this;\n    rowLimit(n: number): this;\n    startRow(n: number): this;\n    sourceId(id: string): this;\n    text(queryText: string): this;\n    template(template: string): this;\n    trimDuplicatesIncludeId(n: number): this;\n    rankingModelId(id: string): this;\n    rowsPerPage(n: number): this;\n    selectProperties(...properties: string[]): this;\n    timeZoneId(id: number): this;\n    refinementFilters(...filters: string[]): this;\n    refiners(refiners: string): this;\n    hiddenConstraints(constraints: string): this;\n    sortList(...sorts: Sort[]): this;\n    timeout(milliseconds: number): this;\n    hithighlightedProperties(...properties: string[]): this;\n    clientType(clientType: string): this;\n    personalizationData(data: string): this;\n    resultsURL(url: string): this;\n    queryTag(tags: string): this;\n    properties(...properties: SearchProperty[]): this;\n    queryTemplatePropertiesUrl(url: string): this;\n    reorderingRules(...rules: ReorderingRule[]): this;\n    hitHighlightedMultivaluePropertyLimit(limit: number): this;\n    collapseSpecification(spec: string): this;\n    uiLanguage(lang: number): this;\n    desiredSnippetLength(len: number): this;\n    maxSnippetLength(len: number): this;\n    summaryLength(len: number): this;\n\n    /* included method */\n    toSearchQuery(): SearchQuery;\n}\n\nconst funcs = new Map<string, string>([\n    [\"text\", \"Querytext\"],\n    [\"template\", \"QueryTemplate\"],\n    [\"sourceId\", \"SourceId\"],\n    [\"trimDuplicatesIncludeId\", \"\"],\n    [\"startRow\", \"\"],\n    [\"rowLimit\", \"\"],\n    [\"rankingModelId\", \"\"],\n    [\"rowsPerPage\", \"\"],\n    [\"selectProperties\", \"\"],\n    [\"culture\", \"\"],\n    [\"timeZoneId\", \"\"],\n    [\"refinementFilters\", \"\"],\n    [\"refiners\", \"\"],\n    [\"hiddenConstraints\", \"\"],\n    [\"sortList\", \"\"],\n    [\"timeout\", \"\"],\n    [\"hithighlightedProperties\", \"\"],\n    [\"clientType\", \"\"],\n    [\"personalizationData\", \"\"],\n    [\"resultsURL\", \"\"],\n    [\"queryTag\", \"\"],\n    [\"properties\", \"\"],\n    [\"queryTemplatePropertiesUrl\", \"\"],\n    [\"reorderingRules\", \"\"],\n    [\"hitHighlightedMultivaluePropertyLimit\", \"\"],\n    [\"collapseSpecification\", \"\"],\n    [\"uiLanguage\", \"\"],\n    [\"desiredSnippetLength\", \"\"],\n    [\"maxSnippetLength\", \"\"],\n    [\"summaryLength\", \"\"],\n]);\n\nconst props = new Map<string, string>([]);\n\nfunction toPropCase(str: string) {\n    return str.replace(/^(.)/, ($1) => $1.toUpperCase());\n}\n\n/**\n * Creates a new instance of the SearchQueryBuilder\n * \n * @param queryText Initial query text\n * @param _query Any initial query configuration\n */\nexport function SearchQueryBuilder(queryText = \"\", _query = {}): ISearchQueryBuilder {\n\n    return new Proxy(<any>{\n        query: Object.assign({\n            Querytext: queryText,\n        }, _query),\n    },\n        {\n            get(self, propertyKey, proxy) {\n\n                const pk = propertyKey.toString();\n\n                if (pk === \"toSearchQuery\") {\n                    return () => self.query;\n                }\n\n                if (funcs.has(pk)) {\n                    return (...value: any[]) => {\n                        const mappedPk = funcs.get(pk);\n                        self.query[mappedPk.length > 0 ? mappedPk : toPropCase(pk)] = value.length > 1 ? value : value[0];\n                        return proxy;\n                    };\n                }\n                const propKey = props.has(pk) ? props.get(pk) : toPropCase(pk);\n                self.query[propKey] = true;\n                return proxy;\n            },\n        });\n}\n\nexport type SearchQueryInit = string | SearchQuery | ISearchQueryBuilder;\n\n/**\n * Describes the search API\n *\n */\n@defaultPath(\"_api/search/postquery\")\nexport class Search extends SharePointQueryableInstance {\n\n    /**\n     * @returns Promise\n     */\n    public execute(queryInit: SearchQueryInit): Promise<SearchResults> {\n\n        const query = this.parseQuery(queryInit);\n\n        const postBody = jsS({\n            request: extend(\n                metadata(\"Microsoft.Office.Server.Search.REST.SearchRequest\"),\n                Object.assign(\n                    {},\n                    query,\n                    {\n                        HitHighlightedProperties: this.fixArrProp(query.HitHighlightedProperties),\n                        Properties: this.fixArrProp(query.Properties),\n                        RefinementFilters: this.fixArrProp(query.RefinementFilters),\n                        ReorderingRules: this.fixArrProp(query.ReorderingRules),\n                        SelectProperties: this.fixArrProp(query.SelectProperties),\n                        SortList: this.fixArrProp(query.SortList),\n                    })),\n        });\n\n        // if we are using caching with this search request, then we need to handle some work upfront to enable that\n        if (this._useCaching) {\n\n            // force use of the cache for this request if .usingCaching was called\n            this._forceCaching = true;\n\n            // because all the requests use the same url they would collide in the cache we use a special key\n            const cacheKey = `PnPjs.SearchWithCaching(${getHashCode(postBody)})`;\n\n            if (objectDefinedNotNull(this._cachingOptions)) {\n                // if our key ends in the postquery url we overwrite it\n                if (/\\/_api\\/search\\/postquery$/i.test(this._cachingOptions.key)) {\n                    this._cachingOptions.key = cacheKey;\n                }\n            } else {\n                this._cachingOptions = new CachingOptions(cacheKey);\n            }\n        }\n\n        return this.postCore({ body: postBody }).then((data) => new SearchResults(data, this.toUrl(), query));\n    }\n\n    /**\n     * Fix array property\n     *\n     * @param prop property to fix for container struct\n     */\n    private fixArrProp(prop: any): { results: any[] } {\n        if (typeof prop === \"undefined\") {\n            return ({ results: [] });\n        }\n        prop = isArray(prop) ? prop : [prop];\n        return hOP(prop, \"results\") ? prop : { results: prop };\n    }\n\n    /**\n     * Translates one of the query initializers into a SearchQuery instance\n     * \n     * @param query \n     */\n    private parseQuery(query: SearchQueryInit): SearchQuery {\n\n        let finalQuery: SearchQuery;\n\n        if (typeof query === \"string\") {\n            finalQuery = { Querytext: query };\n        } else if ((query as ISearchQueryBuilder).toSearchQuery) {\n            finalQuery = (query as ISearchQueryBuilder).toSearchQuery();\n        } else {\n            finalQuery = <SearchQuery>query;\n        }\n\n        return finalQuery;\n    }\n}\n\n/**\n * Describes the SearchResults class, which returns the formatted and raw version of the query response\n */\nexport class SearchResults {\n\n    /**\n     * Creates a new instance of the SearchResult class\n     *\n     */\n    constructor(rawResponse: any,\n        private _url: string,\n        private _query: SearchQuery,\n        private _raw: SearchResponse = null,\n        private _primary: SearchResult[] = null) {\n\n        this._raw = rawResponse.postquery ? rawResponse.postquery : rawResponse;\n    }\n\n    public get ElapsedTime(): number {\n        return this.RawSearchResults.ElapsedTime;\n    }\n\n    public get RowCount(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.RowCount;\n    }\n\n    public get TotalRows(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.TotalRows;\n    }\n\n    public get TotalRowsIncludingDuplicates(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.TotalRowsIncludingDuplicates;\n    }\n\n    public get RawSearchResults(): SearchResponse {\n        return this._raw;\n    }\n\n    public get PrimarySearchResults(): SearchResult[] {\n        if (this._primary === null) {\n            this._primary = this.formatSearchResults(this._raw.PrimaryQueryResult.RelevantResults.Table.Rows);\n        }\n        return this._primary;\n    }\n\n    /**\n     * Gets a page of results\n     *\n     * @param pageNumber Index of the page to return. Used to determine StartRow\n     * @param pageSize Optional, items per page (default = 10)\n     */\n    public getPage(pageNumber: number, pageSize?: number): Promise<SearchResults> {\n\n        // if we got all the available rows we don't have another page\n        if (this.TotalRows < this.RowCount) {\n            return Promise.resolve(null);\n        }\n\n        // if pageSize is supplied, then we use that regardless of any previous values\n        // otherwise get the previous RowLimit or default to 10\n        const rows = pageSize !== undefined ? pageSize : hOP(this._query, \"RowLimit\") ? this._query.RowLimit : 10;\n\n        const query: SearchQuery = extend(this._query, {\n            RowLimit: rows,\n            StartRow: rows * (pageNumber - 1),\n        });\n\n        // we have reached the end\n        if (query.StartRow > this.TotalRows) {\n            return Promise.resolve(null);\n        }\n\n        const search = new Search(this._url, null);\n        return search.execute(query);\n    }\n\n    /**\n     * Formats a search results array\n     *\n     * @param rawResults The array to process\n     */\n    protected formatSearchResults(rawResults: any): SearchResult[] {\n\n        const results = new Array<SearchResult>();\n        const tempResults = rawResults.results ? rawResults.results : rawResults;\n\n        for (const tempResult of tempResults) {\n\n            const cells: { Key: string, Value: any }[] = tempResult.Cells.results ? tempResult.Cells.results : tempResult.Cells;\n\n            results.push(cells.reduce((res, cell) => {\n\n                Object.defineProperty(res, cell.Key,\n                    {\n                        configurable: false,\n                        enumerable: true,\n                        value: cell.Value,\n                        writable: false,\n                    });\n\n                return res;\n\n            }, {}));\n        }\n\n        return results;\n    }\n}\n\n/**\n * Describes the SearchQuery interface\n */\nexport interface SearchQuery {\n\n    /**\n     * A string that contains the text for the search query.\n     */\n    Querytext?: string;\n\n    /**\n     * A string that contains the text that replaces the query text, as part of a query transform.\n     */\n    QueryTemplate?: string;\n\n    /**\n     * A Boolean value that specifies whether the result tables that are returned for\n     * the result block are mixed with the result tables that are returned for the original query.\n     */\n    EnableInterleaving?: boolean;\n\n    /**\n     * A Boolean value that specifies whether stemming is enabled.\n     */\n    EnableStemming?: boolean;\n\n    /**\n     * A Boolean value that specifies whether duplicate items are removed from the results.\n     */\n    TrimDuplicates?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the exact terms in the search query are used to find matches, or if nicknames are used also.\n     */\n    EnableNicknames?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the query uses the FAST Query Language (FQL).\n     */\n    EnableFQL?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the phonetic forms of the query terms are used to find matches.\n     */\n    EnablePhonetic?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to perform result type processing for the query.\n     */\n    BypassResultTypes?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to return best bet results for the query.\n     * This parameter is used only when EnableQueryRules is set to true, otherwise it is ignored.\n     */\n    ProcessBestBets?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to enable query rules for the query.\n     */\n    EnableQueryRules?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to sort search results.\n     */\n    EnableSorting?: boolean;\n\n    /**\n     * Specifies whether to return block rank log information in the BlockRankLog property of the interleaved result table.\n     * A block rank log contains the textual information on the block score and the documents that were de-duplicated.\n     */\n    GenerateBlockRankLog?: boolean;\n\n    /**\n     * The result source ID to use for executing the search query.\n     */\n    SourceId?: string;\n\n    /**\n     * The ID of the ranking model to use for the query.\n     */\n    RankingModelId?: string;\n\n    /**\n     * The first row that is included in the search results that are returned.\n     * You use this parameter when you want to implement paging for search results.\n     */\n    StartRow?: number;\n\n    /**\n     * The maximum number of rows overall that are returned in the search results.\n     * Compared to RowsPerPage, RowLimit is the maximum number of rows returned overall.\n     */\n    RowLimit?: number;\n\n    /**\n     * The maximum number of rows to return per page.\n     * Compared to RowLimit, RowsPerPage refers to the maximum number of rows to return per page,\n     * and is used primarily when you want to implement paging for search results.\n     */\n    RowsPerPage?: number;\n\n    /**\n     * The managed properties to return in the search results.\n     */\n    SelectProperties?: string[];\n\n    /**\n     * The locale ID (LCID) for the query.\n     */\n    Culture?: number;\n\n    /**\n     * The set of refinement filters used when issuing a refinement query (FQL)\n     */\n    RefinementFilters?: string[];\n\n    /**\n     * The set of refiners to return in a search result.\n     */\n    Refiners?: string;\n\n    /**\n     * The additional query terms to append to the query.\n     */\n    HiddenConstraints?: string;\n\n    /**\n     * The list of properties by which the search results are ordered.\n     */\n    SortList?: Sort[];\n\n    /**\n     * The amount of time in milliseconds before the query request times out.\n     */\n    Timeout?: number;\n\n    /**\n     * The properties to highlight in the search result summary when the property value matches the search terms entered by the user.\n     */\n    HitHighlightedProperties?: string[];\n\n    /**\n     * The type of the client that issued the query.\n     */\n    ClientType?: string;\n\n    /**\n     * The GUID for the user who submitted the search query.\n     */\n    PersonalizationData?: string;\n\n    /**\n     * The URL for the search results page.\n     */\n    ResultsUrl?: string;\n\n    /**\n     * Custom tags that identify the query. You can specify multiple query tags\n     */\n    QueryTag?: string;\n\n    /**\n     * Properties to be used to configure the search query\n     */\n    Properties?: SearchProperty[];\n\n    /**\n     *  A Boolean value that specifies whether to return personal favorites with the search results.\n     */\n    ProcessPersonalFavorites?: boolean;\n\n    /**\n     * The location of the queryparametertemplate.xml file. This file is used to enable anonymous users to make Search REST queries.\n     */\n    QueryTemplatePropertiesUrl?: string;\n\n    /**\n     * Special rules for reordering search results.\n     * These rules can specify that documents matching certain conditions are ranked higher or lower in the results.\n     * This property applies only when search results are sorted based on rank.\n     */\n    ReorderingRules?: ReorderingRule[];\n\n    /**\n     * The number of properties to show hit highlighting for in the search results.\n     */\n    HitHighlightedMultivaluePropertyLimit?: number;\n\n    /**\n     * A Boolean value that specifies whether the hit highlighted properties can be ordered.\n     */\n    EnableOrderingHitHighlightedProperty?: boolean;\n\n    /**\n     * The managed properties that are used to determine how to collapse individual search results.\n     * Results are collapsed into one or a specified number of results if they match any of the individual collapse specifications.\n     * In a collapse specification, results are collapsed if their properties match all individual properties in the collapse specification.\n     */\n    CollapseSpecification?: string;\n\n    /**\n     * The locale identifier (LCID) of the user interface\n     */\n    UIlanguage?: number;\n\n    /**\n     * The preferred number of characters to display in the hit-highlighted summary generated for a search result.\n     */\n    DesiredSnippetLength?: number;\n\n    /**\n     * The maximum number of characters to display in the hit-highlighted summary generated for a search result.\n     */\n    MaxSnippetLength?: number;\n\n    /**\n     * The number of characters to display in the result summary for a search result.\n     */\n    SummaryLength?: number;\n\n}\n\n/**\n * Provides hints at the properties which may be available on the result object\n */\nexport interface SearchResult {\n\n    Rank?: number;\n    DocId?: number;\n    WorkId?: number;\n    Title?: string;\n    Author?: string;\n    Size?: number;\n    Path?: string;\n    Description?: string;\n    Write?: Date;\n    LastModifiedTime?: Date;\n    CollapsingStatus?: number;\n    HitHighlightedSummary?: string;\n    HitHighlightedProperties?: string;\n    contentclass?: string;\n    PictureThumbnailURL?: string;\n    ServerRedirectedURL?: string;\n    ServerRedirectedEmbedURL?: string;\n    ServerRedirectedPreviewURL?: string;\n    FileExtension?: string;\n    ContentTypeId?: string;\n    ParentLink?: string;\n    ViewsLifetime?: number;\n    ViewsRecent?: number;\n    SectionNames?: string;\n    SectionIndexes?: string;\n    SiteLogo?: string;\n    SiteDescription?: string;\n    importance?: number;\n    SiteName?: string;\n    IsDocument?: boolean;\n    FileType?: string;\n    IsContainer?: boolean;\n    WebTemplate?: string;\n    SPWebUrl?: string;\n    UniqueId?: string;\n    ProgId?: string;\n    OriginalPath?: string;\n    RenderTemplateId?: string;\n    PartitionId?: string;\n    UrlZone?: number;\n    Culture?: string;\n}\n\nexport interface SearchResponse {\n    ElapsedTime: number;\n    Properties?: { Key: string, Value: any, ValueType: string }[];\n    PrimaryQueryResult?: ResultTableCollection;\n    SecondaryQueryResults?: ResultTableCollection[];\n    SpellingSuggestion?: string;\n    TriggeredRules?: any[];\n}\n\nexport interface ResultTableCollection {\n\n    QueryErrors?: Map<string, any>;\n    QueryId?: string;\n    QueryRuleId?: string;\n    CustomResults?: ResultTable;\n    RefinementResults?: ResultTable;\n    RelevantResults?: ResultTable;\n    SpecialTermResults?: ResultTable;\n}\n\nexport interface IRefiner {\n    Name: string;\n    Entries: { RefinementCount: string; RefinementName: string; RefinementToken: string; RefinementValue: string; }[];\n}\nexport interface ResultTable {\n    GroupTemplateId?: string;\n    ItemTemplateId?: string;\n    Properties?: { Key: string, Value: any, ValueType: string }[];\n    Table?: { Rows: { Cells: { Key: string, Value: any, ValueType: string }[] }[] };\n    Refiners?: IRefiner[];\n    ResultTitle?: string;\n    ResultTitleUrl?: string;\n    RowCount?: number;\n    TableType?: string;\n    TotalRows?: number;\n    TotalRowsIncludingDuplicates?: number;\n}\n\n/**\n * Defines how search results are sorted.\n */\nexport interface Sort {\n\n    /**\n     * The name for a property by which the search results are ordered.\n     */\n    Property: string;\n\n    /**\n     * The direction in which search results are ordered.\n     */\n    Direction: SortDirection;\n}\n\n/**\n * Defines one search property\n */\nexport interface SearchProperty {\n    Name: string;\n    Value: SearchPropertyValue;\n}\n\n/**\n * Defines one search property value. Set only one of StrlVal/BoolVal/IntVal/StrArray.\n */\nexport interface SearchPropertyValue {\n    StrVal?: string;\n    BoolVal?: boolean;\n    IntVal?: number;\n    StrArray?: string[];\n    QueryPropertyValueTypeIndex: QueryPropertyValueType;\n}\n\n/**\n * defines the SortDirection enum\n */\nexport enum SortDirection {\n    Ascending = 0,\n    Descending = 1,\n    FQLFormula = 2,\n}\n\n/**\n * Defines how ReorderingRule interface, used for reordering results\n */\nexport interface ReorderingRule {\n\n    /**\n     * The value to match on\n     */\n    MatchValue: string;\n\n    /**\n     * The rank boosting\n     */\n    Boost: number;\n\n    /**\n    * The rank boosting\n    */\n    MatchType: ReorderingRuleMatchType;\n}\n\n/**\n * defines the ReorderingRuleMatchType  enum\n */\nexport enum ReorderingRuleMatchType {\n    ResultContainsKeyword = 0,\n    TitleContainsKeyword = 1,\n    TitleMatchesKeyword = 2,\n    UrlStartsWith = 3,\n    UrlExactlyMatches = 4,\n    ContentTypeIs = 5,\n    FileExtensionMatches = 6,\n    ResultHasTag = 7,\n    ManualCondition = 8,\n}\n\n/**\n * Specifies the type value for the property\n */\nexport enum QueryPropertyValueType {\n    None = 0,\n    StringType = 1,\n    Int32Type = 2,\n    BooleanType = 3,\n    StringArrayType = 4,\n    UnSupportedType = 5,\n}\n\nexport class SearchBuiltInSourceId {\n    public static readonly Documents = \"e7ec8cee-ded8-43c9-beb5-436b54b31e84\";\n    public static readonly ItemsMatchingContentType = \"5dc9f503-801e-4ced-8a2c-5d1237132419\";\n    public static readonly ItemsMatchingTag = \"e1327b9c-2b8c-4b23-99c9-3730cb29c3f7\";\n    public static readonly ItemsRelatedToCurrentUser = \"48fec42e-4a92-48ce-8363-c2703a40e67d\";\n    public static readonly ItemsWithSameKeywordAsThisItem = \"5c069288-1d17-454a-8ac6-9c642a065f48\";\n    public static readonly LocalPeopleResults = \"b09a7990-05ea-4af9-81ef-edfab16c4e31\";\n    public static readonly LocalReportsAndDataResults = \"203fba36-2763-4060-9931-911ac8c0583b\";\n    public static readonly LocalSharePointResults = \"8413cd39-2156-4e00-b54d-11efd9abdb89\";\n    public static readonly LocalVideoResults = \"78b793ce-7956-4669-aa3b-451fc5defebf\";\n    public static readonly Pages = \"5e34578e-4d08-4edc-8bf3-002acf3cdbcc\";\n    public static readonly Pictures = \"38403c8c-3975-41a8-826e-717f2d41568a\";\n    public static readonly Popular = \"97c71db1-58ce-4891-8b64-585bc2326c12\";\n    public static readonly RecentlyChangedItems = \"ba63bbae-fa9c-42c0-b027-9a878f16557c\";\n    public static readonly RecommendedItems = \"ec675252-14fa-4fbe-84dd-8d098ed74181\";\n    public static readonly Wiki = \"9479bf85-e257-4318-b5a8-81a180f5faa1\";\n}\n","import { SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { hOP } from \"@pnp/common\";\n\n/**\n * Defines a query execute against the search/suggest endpoint (see https://msdn.microsoft.com/en-us/library/office/dn194079.aspx)\n */\nexport interface SearchSuggestQuery {\n\n    [key: string]: string | number | boolean;\n\n    /**\n     * A string that contains the text for the search query.\n     */\n    querytext: string;\n\n    /**\n     * The number of query suggestions to retrieve. Must be greater than zero (0). The default value is 5.\n     */\n    count?: number;\n\n    /**\n     * The number of personal results to retrieve. Must be greater than zero (0). The default value is 5.\n     */\n    personalCount?: number;\n\n    /**\n     * A Boolean value that specifies whether to retrieve pre-query or post-query suggestions. true to return pre-query suggestions; otherwise, false. The default value is false.\n     */\n    preQuery?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to hit-highlight or format in bold the query suggestions. true to format in bold the terms in the returned query suggestions\n     * that match terms in the specified query; otherwise, false. The default value is true.\n     */\n    hitHighlighting?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to capitalize the first letter in each term in the returned query suggestions. true to capitalize the first letter in each term;\n     * otherwise, false. The default value is false.\n     */\n    capitalize?: boolean;\n\n    /**\n     * The locale ID (LCID) for the query (see https://msdn.microsoft.com/en-us/library/cc233982.aspx).\n     */\n    culture?: string;\n\n    /**\n     * A Boolean value that specifies whether stemming is enabled. true to enable stemming; otherwise, false. The default value is true.\n     */\n    stemming?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to include people names in the returned query suggestions. true to include people names in the returned query suggestions;\n     * otherwise, false. The default value is true.\n     */\n    includePeople?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to turn on query rules for this query. true to turn on query rules; otherwise, false. The default value is true.\n     */\n    queryRules?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to return query suggestions for prefix matches. true to return query suggestions based on prefix matches, otherwise, false when\n     * query suggestions should match the full query word.\n     */\n    prefixMatch?: boolean;\n}\n\n@defaultPath(\"_api/search/suggest\")\nexport class SearchSuggest extends SharePointQueryableInstance {\n\n    public execute(query: SearchSuggestQuery): Promise<SearchSuggestResult> {\n        this.mapQueryToQueryString(query);\n        return this.get().then(response => {\n            const mapper = hOP(response, \"suggest\") ? (s: string) => response.suggest[s].results : (s: string) => response[s];\n            return {\n                PeopleNames: mapper(\"PeopleNames\"),\n                PersonalResults: mapper(\"PersonalResults\"),\n                Queries: mapper(\"Queries\"),\n            };\n        });\n    }\n\n    private mapQueryToQueryString(query: SearchSuggestQuery): void {\n\n        const setProp = (q: SearchSuggestQuery) => (checkProp: string) => (sp: string) => {\n            if (hOP(q, checkProp)) {\n                this.query.set(sp, q[checkProp].toString());\n            }\n        };\n\n        this.query.set(\"querytext\", `'${query.querytext}'`);\n\n        const querySetter = setProp(query);\n\n        querySetter(\"count\")(\"inumberofquerysuggestions\");\n        querySetter(\"personalCount\")(\"inumberofresultsuggestions\");\n        querySetter(\"preQuery\")(\"fprequerysuggestions\");\n        querySetter(\"hitHighlighting\")(\"fhithighlighting\");\n        querySetter(\"capitalize\")(\"fcapitalizefirstletters\");\n        querySetter(\"culture\")(\"culture\");\n        querySetter(\"stemming\")(\"enablestemming\");\n        querySetter(\"includePeople\")(\"showpeoplenamesuggestions\");\n        querySetter(\"queryRules\")(\"enablequeryrules\");\n        querySetter(\"prefixMatch\")(\"fprefixmatchallterms\");\n    }\n}\n\nexport interface SearchSuggestResult {\n    readonly PeopleNames: string[];\n    readonly PersonalResults: PersonalResultSuggestion[];\n    readonly Queries: any[];\n}\n\nexport interface ESearchSuggestResult {\n    readonly PeopleNames: string[];\n    readonly PersonalResults: PersonalResultSuggestion[];\n    readonly Queries: any[];\n}\n\nexport interface PersonalResultSuggestion {\n    readonly HighlightedTitle?: string;\n    readonly IsBestBet?: boolean;\n    readonly Title?: string;\n    readonly TypeId?: string;\n    readonly Url?: string;\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { ClientPeoplePickerQueryParameters, HashTagCollection, PeoplePickerEntity, UserProfile } from \"./types\";\nimport { extend, jsS } from \"@pnp/common\";\nimport { metadata } from \"./utils/metadata\";\n\nexport class UserProfileQuery extends SharePointQueryableInstance {\n\n    private clientPeoplePickerQuery: ClientPeoplePickerQuery;\n    private profileLoader: ProfileLoader;\n\n    /**\n     * Creates a new instance of the UserProfileQuery class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this user profile query\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/sp.userprofiles.peoplemanager\") {\n        super(baseUrl, path);\n\n        this.clientPeoplePickerQuery = (new ClientPeoplePickerQuery(baseUrl)).configureFrom(this);\n        this.profileLoader = (new ProfileLoader(baseUrl)).configureFrom(this);\n    }\n\n    /**\n     * The url of the edit profile page for the current user\n     */\n    public get editProfileLink(): Promise<string> {\n        return this.clone(UserProfileQuery, \"EditProfileLink\").get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user's \"People I'm Following\" list is public\n     */\n    public get isMyPeopleListPublic(): Promise<boolean> {\n        return this.clone(UserProfileQuery, \"IsMyPeopleListPublic\").get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user is being followed by the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public amIFollowedBy(loginName: string): Promise<boolean> {\n        const q = this.clone(UserProfileQuery, \"amifollowedby(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user is following the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public amIFollowing(loginName: string): Promise<boolean> {\n        const q = this.clone(UserProfileQuery, \"amifollowing(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets tags that the current user is following\n     *\n     * @param maxCount The maximum number of tags to retrieve (default is 20)\n     */\n    public getFollowedTags(maxCount = 20): Promise<string[]> {\n        return this.clone(UserProfileQuery, `getfollowedtags(${maxCount})`).get();\n    }\n\n    /**\n     * Gets the people who are following the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public getFollowersFor(loginName: string): Promise<any[]> {\n        const q = this.clone(UserProfileQuery, \"getfollowersfor(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets the people who are following the current user\n     *\n     */\n    public get myFollowers(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"getmyfollowers\");\n    }\n\n    /**\n     * Gets user properties for the current user\n     *\n     */\n    public get myProperties(): SharePointQueryableInstance {\n        return new UserProfileQuery(this, \"getmyproperties\");\n    }\n\n    /**\n     * Gets the people who the specified user is following\n     *\n     * @param loginName The account name of the user.\n     */\n    public getPeopleFollowedBy(loginName: string): Promise<any[]> {\n        const q = this.clone(UserProfileQuery, \"getpeoplefollowedby(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets user properties for the specified user.\n     *\n     * @param loginName The account name of the user.\n     */\n    public getPropertiesFor(loginName: string): Promise<any> {\n        const q = this.clone(UserProfileQuery, \"getpropertiesfor(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets the 20 most popular hash tags over the past week, sorted so that the most popular tag appears first\n     *\n     */\n    public get trendingTags(): Promise<HashTagCollection> {\n        const q = this.clone(UserProfileQuery, null);\n        q.concat(\".gettrendingtags\");\n        return q.get();\n    }\n\n    /**\n     * Gets the specified user profile property for the specified user\n     *\n     * @param loginName The account name of the user\n     * @param propertyName The case-sensitive name of the property to get\n     */\n    public getUserProfilePropertyFor(loginName: string, propertyName: string): Promise<string> {\n        const q = this.clone(UserProfileQuery, `getuserprofilepropertyfor(accountname=@v, propertyname='${propertyName}')`);\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Removes the specified user from the user's list of suggested people to follow\n     *\n     * @param loginName The account name of the user\n     */\n    public hideSuggestion(loginName: string): Promise<void> {\n        const q = this.clone(UserProfileQuery, \"hidesuggestion(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.postCore();\n    }\n\n    /**\n     * A boolean values that indicates whether the first user is following the second user\n     *\n     * @param follower The account name of the user who might be following the followee\n     * @param followee The account name of the user who might be followed by the follower\n     */\n    public isFollowing(follower: string, followee: string): Promise<boolean> {\n        const q = this.clone(UserProfileQuery, null);\n        q.concat(`.isfollowing(possiblefolloweraccountname=@v, possiblefolloweeaccountname=@y)`);\n        q.query.set(\"@v\", `'${encodeURIComponent(follower)}'`);\n        q.query.set(\"@y\", `'${encodeURIComponent(followee)}'`);\n        return q.get();\n    }\n\n    /**\n     * Uploads and sets the user profile picture (Users can upload a picture to their own profile only). Not supported for batching.\n     *\n     * @param profilePicSource Blob data representing the user's picture in BMP, JPEG, or PNG format of up to 4.76MB\n     */\n    public setMyProfilePic(profilePicSource: Blob): Promise<void> {\n\n        return new Promise<void>((resolve, reject) => {\n\n            let buffer: any = null;\n            const reader = new FileReader();\n            reader.onload = (e: any) => buffer = e.target.result;\n            reader.readAsArrayBuffer(profilePicSource);\n            const request = new UserProfileQuery(this, \"setmyprofilepicture\");\n            request.postCore({\n                body: String.fromCharCode.apply(null, <any>new Uint16Array(buffer)),\n            }).then(_ => resolve()).catch(e => reject(e));\n\n        });\n    }\n\n    /**\n     * Sets single value User Profile property\n     *\n     * @param accountName The account name of the user\n     * @param propertyName Property name\n     * @param propertyValue Property value\n     */\n    public setSingleValueProfileProperty(accountName: string, propertyName: string, propertyValue: string): Promise<void> {\n        const postBody: string = jsS({\n            accountName: accountName,\n            propertyName: propertyName,\n            propertyValue: propertyValue,\n        });\n\n        return this.clone(UserProfileQuery, \"SetSingleValueProfileProperty\")\n            .postCore({ body: postBody });\n    }\n\n    /**\n     * Sets multi valued User Profile property\n     *\n     * @param accountName The account name of the user\n     * @param propertyName Property name\n     * @param propertyValues Property values\n     */\n    public setMultiValuedProfileProperty(accountName: string, propertyName: string, propertyValues: string[]): Promise<void> {\n        const postBody: string = jsS({\n            accountName: accountName,\n            propertyName: propertyName,\n            propertyValues: propertyValues,\n        });\n\n        return this.clone(UserProfileQuery, \"SetMultiValuedProfileProperty\")\n            .postCore({ body: postBody });\n    }\n\n    /**\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only)\n     *\n     * @param emails The email addresses of the users to provision sites for\n     */\n    public createPersonalSiteEnqueueBulk(...emails: string[]): Promise<void> {\n        return this.profileLoader.createPersonalSiteEnqueueBulk(emails);\n    }\n\n    /**\n     * Gets the user profile of the site owner\n     *\n     */\n    public get ownerUserProfile(): Promise<UserProfile> {\n        return this.profileLoader.ownerUserProfile;\n    }\n\n    /**\n     * Gets the user profile for the current user\n     */\n    public get userProfile(): Promise<any> {\n        return this.profileLoader.userProfile;\n    }\n\n    /**\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files\n     *\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\n     */\n    public createPersonalSite(interactiveRequest = false): Promise<void> {\n        return this.profileLoader.createPersonalSite(interactiveRequest);\n    }\n\n    /**\n     * Sets the privacy settings for this profile\n     *\n     * @param share true to make all social data public; false to make all social data private\n     */\n    public shareAllSocialData(share: boolean): Promise<void> {\n        return this.profileLoader.shareAllSocialData(share);\n    }\n\n    /**\n     * Resolves user or group using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform resolve\n     */\n    public clientPeoplePickerResolveUser(queryParams: ClientPeoplePickerQueryParameters): Promise<PeoplePickerEntity> {\n        return this.clientPeoplePickerQuery.clientPeoplePickerResolveUser(queryParams);\n    }\n\n    /**\n     * Searches for users or groups using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform search\n     */\n    public clientPeoplePickerSearchUser(queryParams: ClientPeoplePickerQueryParameters): Promise<PeoplePickerEntity[]> {\n        return this.clientPeoplePickerQuery.clientPeoplePickerSearchUser(queryParams);\n    }\n}\n\n@defaultPath(\"_api/sp.userprofiles.profileloader.getprofileloader\")\nclass ProfileLoader extends SharePointQueryable {\n\n    /**\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only) Doesn't support batching\n     *\n     * @param emails The email addresses of the users to provision sites for\n     */\n    public createPersonalSiteEnqueueBulk(emails: string[]): Promise<void> {\n\n        return this.clone(ProfileLoader, \"createpersonalsiteenqueuebulk\", false).postCore({\n            body: jsS({ \"emailIDs\": emails }),\n        });\n    }\n\n    /**\n     * Gets the user profile of the site owner.\n     *\n     */\n    public get ownerUserProfile(): Promise<UserProfile> {\n        let q = this.getParent(ProfileLoader, this.parentUrl, \"_api/sp.userprofiles.profileloader.getowneruserprofile\");\n\n        if (this.hasBatch) {\n            q = q.inBatch(this.batch);\n        }\n\n        return q.postCore<UserProfile>();\n    }\n\n    /**\n     * Gets the user profile of the current user.\n     *\n     */\n    public get userProfile(): Promise<UserProfile> {\n        return this.clone(ProfileLoader, \"getuserprofile\").postCore<UserProfile>();\n    }\n\n    /**\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files.\n     *\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\n     */\n    public createPersonalSite(interactiveRequest = false): Promise<void> {\n        return this.clone(ProfileLoader, `getuserprofile/createpersonalsiteenque(${interactiveRequest})`).postCore();\n    }\n\n    /**\n     * Sets the privacy settings for this profile\n     *\n     * @param share true to make all social data public; false to make all social data private.\n     */\n    public shareAllSocialData(share: boolean): Promise<void> {\n        return this.clone(ProfileLoader, `getuserprofile/shareallsocialdata(${share})`).postCore();\n    }\n}\n\n@defaultPath(\"_api/sp.ui.applicationpages.clientpeoplepickerwebserviceinterface\")\nclass ClientPeoplePickerQuery extends SharePointQueryable {\n\n    /**\n     * Resolves user or group using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform resolve\n     */\n    public clientPeoplePickerResolveUser(queryParams: ClientPeoplePickerQueryParameters): Promise<PeoplePickerEntity> {\n        const q = this.clone(ClientPeoplePickerQuery, null);\n        q.concat(\".clientpeoplepickerresolveuser\");\n        return q.postCore<string | { ClientPeoplePickerResolveUser: string }>({\n            body: this.createClientPeoplePickerQueryParametersRequestBody(queryParams),\n        })\n            .then(res => {\n                if (typeof res === \"object\") {\n                    return res.ClientPeoplePickerResolveUser;\n                }\n                return res;\n            })\n            .then(JSON.parse);\n    }\n\n    /**\n     * Searches for users or groups using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform search\n     */\n    public clientPeoplePickerSearchUser(queryParams: ClientPeoplePickerQueryParameters): Promise<PeoplePickerEntity[]> {\n        const q = this.clone(ClientPeoplePickerQuery, null);\n        q.concat(\".clientpeoplepickersearchuser\");\n        return q.postCore<string | { ClientPeoplePickerSearchUser: string }>({\n            body: this.createClientPeoplePickerQueryParametersRequestBody(queryParams),\n        })\n            .then(res => {\n                if (typeof res === \"object\") {\n                    return res.ClientPeoplePickerSearchUser;\n                }\n                return res;\n            })\n            .then(JSON.parse);\n    }\n\n    /**\n     * Creates ClientPeoplePickerQueryParameters request body\n     *\n     * @param queryParams The query parameters to create request body\n     */\n    private createClientPeoplePickerQueryParametersRequestBody(queryParams: ClientPeoplePickerQueryParameters): string {\n        return jsS({\n            \"queryParams\":\n                extend(metadata(\"SP.UI.ApplicationPages.ClientPeoplePickerQueryParameters\"), queryParams),\n        });\n    }\n}\n","import {\n    SharePointQueryableInstance,\n    defaultPath,\n} from \"./sharepointqueryable\";\n\nimport { jsS, hOP } from \"@pnp/common\";\nimport { metadata } from \"./utils/metadata\";\n\nexport interface SocialMethods {\n    my: MySocialQueryMethods;\n    getFollowedSitesUri(): Promise<string>;\n    getFollowedDocumentsUri(): Promise<string>;\n    follow(actorInfo: SocialActorInfo): Promise<SocialFollowResult>;\n    isFollowed(actorInfo: SocialActorInfo): Promise<boolean>;\n    stopFollowing(actorInfo: SocialActorInfo): Promise<void>;\n}\n\n/**\n * Exposes social following methods\n */\n@defaultPath(\"_api/social.following\")\nexport class SocialQuery extends SharePointQueryableInstance implements SocialMethods {\n\n    public get my(): MySocialQueryMethods {\n        return new MySocialQuery(this);\n    }\n\n    /**\n     * Gets a URI to a site that lists the current user's followed sites.\n     */\n    public getFollowedSitesUri(): Promise<string> {\n        return this.clone(SocialQuery, \"FollowedSitesUri\").get().then(r => {\n            return r.FollowedSitesUri || r;\n        });\n    }\n\n    /**\n     * Gets a URI to a site that lists the current user's followed documents.\n     */\n    public getFollowedDocumentsUri(): Promise<string> {\n        return this.clone(SocialQuery, \"FollowedDocumentsUri\").get().then(r => {\n            return r.FollowedDocumentsUri || r;\n        });\n    }\n\n    /**\n     * Makes the current user start following a user, document, site, or tag\n     *\n     * @param actorInfo The actor to start following\n     */\n    public follow(actorInfo: SocialActorInfo): Promise<SocialFollowResult> {\n        return this.clone(SocialQuery, \"follow\").postCore({ body: this.createSocialActorInfoRequestBody(actorInfo) });\n    }\n\n    /**\n     * Indicates whether the current user is following a specified user, document, site, or tag\n     *\n     * @param actorInfo The actor to find the following status for\n     */\n    public isFollowed(actorInfo: SocialActorInfo): Promise<boolean> {\n        return this.clone(SocialQuery, \"isfollowed\").postCore({ body: this.createSocialActorInfoRequestBody(actorInfo) });\n    }\n\n    /**\n     * Makes the current user stop following a user, document, site, or tag\n     *\n     * @param actorInfo The actor to stop following\n     */\n    public stopFollowing(actorInfo: SocialActorInfo): Promise<void> {\n        return this.clone(SocialQuery, \"stopfollowing\").postCore({ body: this.createSocialActorInfoRequestBody(actorInfo) });\n    }\n\n    /**\n     * Creates SocialActorInfo request body\n     *\n     * @param actorInfo The actor to create request body\n     */\n    private createSocialActorInfoRequestBody(actorInfo: SocialActorInfo): string {\n        return jsS({\n            \"actor\":\n                Object.assign(metadata(\"SP.Social.SocialActorInfo\"), {\n                    Id: null,\n                }, actorInfo),\n        });\n    }\n}\n\n/**\n * Defines the public methods exposed by the my endpoint\n */\nexport interface MySocialQueryMethods {\n    /**\n     * Gets this user's data\n     */\n    get(): Promise<MySocialData>;\n    /**\n     * Gets users, documents, sites, and tags that the current user is following.\n     * \n     * @param types Bitwise set of SocialActorTypes to retrieve\n     */\n    followed(types: SocialActorTypes): Promise<SocialActor[]>;\n    /**\n     * Gets the count of users, documents, sites, and tags that the current user is following.\n     * \n     * @param types Bitwise set of SocialActorTypes to retrieve\n     */\n    followedCount(types: SocialActorTypes): Promise<number>;\n    /**\n     * Gets the users who are following the current user.\n     */\n    followers(): Promise<SocialActor[]>;\n    /**\n     * Gets users who the current user might want to follow.\n     */\n    suggestions(): Promise<SocialActor[]>;\n}\n\n@defaultPath(\"my\")\nexport class MySocialQuery extends SharePointQueryableInstance implements MySocialQueryMethods {\n\n    /**\n     * Gets users, documents, sites, and tags that the current user is following.\n     * \n     * @param types Bitwise set of SocialActorTypes to retrieve\n     */\n    public followed(types: SocialActorTypes): Promise<SocialActor[]> {\n        return this.clone(MySocialQuery, `followed(types=${types})`).get().then(r => {\n            return hOP(r, \"Followed\") ? r.Followed.results : r;\n        });\n    }\n\n    /**\n     * Gets the count of users, documents, sites, and tags that the current user is following.\n     * \n     * @param types Bitwise set of SocialActorTypes to retrieve\n     */\n    public followedCount(types: SocialActorTypes): Promise<number> {\n        return this.clone(MySocialQuery, `followedcount(types=${types})`).get().then(r => {\n            return r.FollowedCount || r;\n        });\n    }\n\n    /**\n     * Gets the users who are following the current user.\n     */\n    public followers(): Promise<SocialActor[]> {\n        return this.clone(MySocialQuery, \"followers\").get().then(r => {\n            return hOP(r, \"Followers\") ? r.Followers.results : r;\n        });\n    }\n\n    /**\n     * Gets users who the current user might want to follow.\n     */\n    public suggestions(): Promise<SocialActor[]> {\n        return this.clone(MySocialQuery, \"suggestions\").get().then(r => {\n            return hOP(r, \"Suggestions\") ? r.Suggestions.results : r;\n        });\n    }\n}\n\n/**\n * Social actor info\n *\n */\nexport interface SocialActorInfo {\n    AccountName?: string;\n    ActorType: SocialActorType;\n    ContentUri?: string;\n    Id?: string;\n    TagGuid?: string;\n}\n\n/**\n * Social actor type\n *\n */\nexport const enum SocialActorType {\n    User,\n    Document,\n    Site,\n    Tag,\n}\n\n/**\n * Social actor type\n *\n */\n/* tslint:disable:no-bitwise */\nexport const enum SocialActorTypes {\n    None = 0,\n    User = 1 << SocialActorType.User,\n    Document = 1 << SocialActorType.Document,\n    Site = 1 << SocialActorType.Site,\n    Tag = 1 << SocialActorType.Tag,\n    /**\n     * The set excludes documents and sites that do not have feeds.\n     */\n    ExcludeContentWithoutFeeds = 268435456,\n    /**\n     * The set includes group sites\n     */\n    IncludeGroupsSites = 536870912,\n    /**\n     * The set includes only items created within the last 24 hours\n     */\n    WithinLast24Hours = 1073741824,\n}\n/* tslint:enable */\n\n/**\n * Result from following\n *\n */\nexport const enum SocialFollowResult {\n    Ok = 0,\n    AlreadyFollowing = 1,\n    LimitReached = 2,\n    InternalError = 3,\n}\n\n/**\n * Specifies an exception or status code.\n */\nexport const enum SocialStatusCode {\n    /**\n     * The operation completed successfully\n     */\n    OK,\n    /**\n     * The request is invalid.\n     */\n    InvalidRequest,\n    /**\n     *  The current user is not authorized to perform the operation.\n     */\n    AccessDenied,\n    /**\n     * The target of the operation was not found.\n     */\n    ItemNotFound,\n    /**\n     * The operation is invalid for the target's current state. \n     */\n    InvalidOperation,\n    /**\n     * The operation completed without modifying the target.\n     */\n    ItemNotModified,\n    /**\n     * The operation failed because an internal error occurred.\n     */\n    InternalError,\n    /**\n     * The operation failed because the server could not access the distributed cache.\n     */\n    CacheReadError,\n    /**\n     * The operation succeeded but the server could not update the distributed cache.\n     */\n    CacheUpdateError,\n    /**\n     * No personal site exists for the current user, and no further information is available.\n     */\n    PersonalSiteNotFound,\n    /**\n     * No personal site exists for the current user, and a previous attempt to create one failed.\n     */\n    FailedToCreatePersonalSite,\n    /**\n     * No personal site exists for the current user, and a previous attempt to create one was not authorized.\n     */\n    NotAuthorizedToCreatePersonalSite,\n    /**\n     * No personal site exists for the current user, and no attempt should be made to create one.\n     */\n    CannotCreatePersonalSite,\n    /**\n     * The operation was rejected because an internal limit had been reached.\n     */\n    LimitReached,\n    /**\n     * The operation failed because an error occurred during the processing of the specified attachment.\n     */\n    AttachmentError,\n    /**\n     * The operation succeeded with recoverable errors; the returned data is incomplete.\n     */\n    PartialData,\n    /**\n     * A required SharePoint feature is not enabled.\n     */\n    FeatureDisabled,\n    /**\n     * The site's storage quota has been exceeded.\n     */\n    StorageQuotaExceeded,\n    /**\n     * The operation failed because the server could not access the database.\n     */\n    DatabaseError,\n}\n\nexport interface SocialActor {\n    /**\n     * Gets the actor type.\n     */\n    ActorType: SocialActorType;\n    /**\n     * Gets the actor's unique identifier.\n     */\n    Id: string;\n    /**\n     * Gets the actor's canonical URI.\n     */\n    Uri: string;\n    /**\n     * Gets the actor's display name.\n     */\n    Name: string;\n    /**\n     * Returns true if the current user is following the actor, false otherwise.\n     */\n    IsFollowed: boolean;\n    /**\n     * Gets a code that indicates recoverable errors that occurred during actor retrieval\n     */\n    Status: SocialStatusCode;\n    /**\n     * Returns true if the Actor can potentially be followed, false otherwise.\n     */\n    CanFollow: boolean;\n    /**\n     * Gets the actor's image URI. Only valid when ActorType is User, Document, or Site\n     */\n    ImageUri: string;\n    /**\n     * Gets the actor's account name. Only valid when ActorType is User\n     */\n    AccountName: string;\n    /**\n     * Gets the actor's email address. Only valid when ActorType is User\n     */\n    EmailAddress: string;\n    /**\n     * Gets the actor's title. Only valid when ActorType is User\n     */\n    Title: string;\n    /**\n     * Gets the text of the actor's most recent post. Only valid when ActorType is User\n     */\n    StatusText: string;\n    /**\n     * Gets the URI of the actor's personal site. Only valid when ActorType is User\n     */\n    PersonalSiteUri: string;\n    /**\n     * Gets the URI of the actor's followed content folder. Only valid when this represents the current user\n     */\n    FollowedContentUri: string;\n    /**\n     * Gets the actor's content URI. Only valid when ActorType is Document, or Site\n     */\n    ContentUri: string;\n    /**\n     * Gets the actor's library URI. Only valid when ActorType is Document\n     */\n    LibraryUri: string;\n    /**\n     * Gets the actor's tag GUID. Only valid when ActorType is Tag\n     */\n    TagGuid: string;\n}\n\n/**\n * Defines the properties retrurned from the my endpoint\n */\nexport interface MySocialData {\n    SocialActor: SocialActor;\n    MyFollowedDocumentsUri: string;\n    MyFollowedSitesUri: string;\n}\n","import { SharePointQueryable } from \"./sharepointqueryable\";\nimport { extend, jsS, hOP } from \"@pnp/common\";\nimport { EmailProperties } from \"./types\";\nimport { SPBatch } from \"./batch\";\nimport { ICachingOptions } from \"@pnp/odata\";\nimport { File } from \"./files\";\nimport { odataUrlFrom } from \"./odata\";\nimport { PrincipalInfo, PrincipalType, PrincipalSource, WikiPageCreationInformation } from \"./types\";\nimport { metadata } from \"./utils/metadata\";\n\n/**\n * Public interface for the utility methods to limit SharePointQueryable method exposure\n */\nexport interface UtilityMethods {\n  usingCaching(options?: ICachingOptions): this;\n  inBatch(batch: SPBatch): this;\n  sendEmail(props: EmailProperties): Promise<void>;\n  getCurrentUserEmailAddresses(): Promise<string>;\n  resolvePrincipal(email: string,\n    scopes: PrincipalType,\n    sources: PrincipalSource,\n    inputIsEmailOnly: boolean,\n    addToUserInfoList: boolean,\n    matchUserInfoList?: boolean): Promise<PrincipalInfo>;\n  searchPrincipals(input: string,\n    scopes: PrincipalType,\n    sources: PrincipalSource,\n    groupName: string,\n    maxCount: number): Promise<PrincipalInfo[]>;\n  createEmailBodyForInvitation(pageAddress: string): Promise<string>;\n  expandGroupsToPrincipals(inputs: string[], maxCount?: number): Promise<PrincipalInfo[]>;\n  createWikiPage(info: WikiPageCreationInformation): Promise<CreateWikiPageResult>;\n  containsInvalidFileFolderChars(input: string, onPremise?: boolean): boolean;\n  stripInvalidFileFolderChars(input: string, replacer?: string, onPremise?: boolean): string;\n}\n\n/**\n * Allows for calling of the static SP.Utilities.Utility methods by supplying the method name\n */\nexport class UtilityMethod extends SharePointQueryable implements UtilityMethods {\n  private static readonly InvalidFileFolderNameCharsOnlineRegex = /[\"*:<>?/\\\\|\\x00-\\x1f\\x7f-\\x9f]/g;\n  private static readonly InvalidFileFolderNameCharsOnPremiseRegex = /[\"#%*:<>?/\\\\|\\x00-\\x1f\\x7f-\\x9f]/g;\n\n  /**\n   * Creates a new instance of the Utility method class\n   *\n   * @param baseUrl The parent url provider\n   * @param methodName The static method name to call on the utility class\n   */\n  constructor(baseUrl: string | SharePointQueryable, methodName: string) {\n\n    super(UtilityMethod.getBaseUrl(baseUrl), `_api/SP.Utilities.Utility.${methodName}`);\n  }\n\n  private static getBaseUrl(candidate: string | SharePointQueryable) {\n\n    if (typeof candidate === \"string\") {\n      return candidate;\n    }\n\n    const c = candidate as SharePointQueryable;\n    const url = c.toUrl();\n    const index = url.indexOf(\"_api/\");\n    if (index < 0) {\n      return url;\n    }\n\n    return url.substr(0, index);\n  }\n\n  public excute<T>(props: any): Promise<T> {\n\n    return this.postCore<T>({\n      body: jsS(props),\n    });\n  }\n\n  /**\n   * Sends an email based on the supplied properties\n   *\n   * @param props The properties of the email to send\n   */\n  public sendEmail(props: EmailProperties): Promise<void> {\n\n    const params = {\n      properties: extend(metadata(\"SP.Utilities.EmailProperties\"), {\n        Body: props.Body,\n        From: props.From,\n        Subject: props.Subject,\n      }),\n    };\n\n    if (props.To && props.To.length > 0) {\n\n      params.properties = extend(params.properties, {\n        To: { results: props.To },\n      });\n    }\n\n    if (props.CC && props.CC.length > 0) {\n\n      params.properties = extend(params.properties, {\n        CC: { results: props.CC },\n      });\n    }\n\n    if (props.BCC && props.BCC.length > 0) {\n\n      params.properties = extend(params.properties, {\n        BCC: { results: props.BCC },\n      });\n    }\n\n    if (props.AdditionalHeaders) {\n      params.properties = extend(params.properties, {\n        AdditionalHeaders: props.AdditionalHeaders,\n      });\n    }\n\n    return this.clone(UtilityMethod, \"SendEmail\", true).excute<void>(params);\n  }\n\n  public getCurrentUserEmailAddresses(): Promise<string> {\n\n    return this.clone(UtilityMethod, \"GetCurrentUserEmailAddresses\", true).excute<string>({}).then(r => {\n      return hOP(r, \"GetCurrentUserEmailAddresses\") ? (<any>r).GetCurrentUserEmailAddresses : r;\n    });\n  }\n\n  public resolvePrincipal(input: string,\n    scopes: PrincipalType,\n    sources: PrincipalSource,\n    inputIsEmailOnly: boolean,\n    addToUserInfoList: boolean,\n    matchUserInfoList = false): Promise<PrincipalInfo> {\n\n    const params = {\n      addToUserInfoList: addToUserInfoList,\n      input: input,\n      inputIsEmailOnly: inputIsEmailOnly,\n      matchUserInfoList: matchUserInfoList,\n      scopes: scopes,\n      sources: sources,\n    };\n\n    return this.clone(UtilityMethod, \"ResolvePrincipalInCurrentContext\", true).excute<PrincipalInfo>(params).then(r => {\n      return hOP(r, \"ResolvePrincipalInCurrentContext\") ? (<any>r).ResolvePrincipalInCurrentContext : r;\n    });\n  }\n\n  public searchPrincipals(input: string,\n    scopes: PrincipalType,\n    sources: PrincipalSource,\n    groupName: string,\n    maxCount: number): Promise<PrincipalInfo[]> {\n\n    const params = {\n      groupName: groupName,\n      input: input,\n      maxCount: maxCount,\n      scopes: scopes,\n      sources: sources,\n    };\n\n    return this.clone(UtilityMethod, \"SearchPrincipalsUsingContextWeb\", true).excute<PrincipalInfo[] | { SearchPrincipalsUsingContextWeb: PrincipalInfo[] }>(params).then(r => {\n      return hOP(r, \"SearchPrincipalsUsingContextWeb\") ? (<any>r).SearchPrincipalsUsingContextWeb : r;\n    });\n  }\n\n  public createEmailBodyForInvitation(pageAddress: string): Promise<string> {\n\n    const params = {\n      pageAddress: pageAddress,\n    };\n\n    return this.clone(UtilityMethod, \"CreateEmailBodyForInvitation\", true).excute<string>(params).then(r => {\n      return hOP(r, \"CreateEmailBodyForInvitation\") ? (<any>r).CreateEmailBodyForInvitation : r;\n    });\n  }\n\n  public expandGroupsToPrincipals(inputs: string[], maxCount = 30): Promise<PrincipalInfo[]> {\n\n    const params = {\n      inputs: inputs,\n      maxCount: maxCount,\n    };\n\n    return this.clone(UtilityMethod, \"ExpandGroupsToPrincipals\", true).excute<PrincipalInfo[]>(params).then(r => {\n      return hOP(r, \"ExpandGroupsToPrincipals\") ? (<any>r).ExpandGroupsToPrincipals : r;\n    });\n  }\n\n  public createWikiPage(info: WikiPageCreationInformation): Promise<CreateWikiPageResult> {\n\n    return this.clone(UtilityMethod, \"CreateWikiPageInContextWeb\", true).excute<CreateWikiPageResult>({\n      parameters: info,\n    }).then(r => {\n      return {\n        data: hOP(r, \"CreateWikiPageInContextWeb\") ? (<any>r).CreateWikiPageInContextWeb : r,\n        file: new File(odataUrlFrom(r)),\n      };\n    });\n  }\n\n  /**\n   * Checks if file or folder name contains invalid characters\n   *\n   * @param input File or folder name to check\n   * @param onPremise Set to true for SharePoint On-Premise\n   * @returns True if contains invalid chars, false otherwise\n   */\n  public containsInvalidFileFolderChars(input: string, onPremise = false): boolean {\n    if (onPremise) {\n      UtilityMethod.InvalidFileFolderNameCharsOnPremiseRegex.lastIndex = 0;\n      return (UtilityMethod.InvalidFileFolderNameCharsOnPremiseRegex.test(input));\n    } else {\n      UtilityMethod.InvalidFileFolderNameCharsOnlineRegex.lastIndex = 0;\n      return (UtilityMethod.InvalidFileFolderNameCharsOnlineRegex.test(input));\n    }\n  }\n\n  /**\n   * Removes invalid characters from file or folder name\n   *\n   * @param input File or folder name\n   * @param replacer Value that will replace invalid characters\n   * @param onPremise Set to true for SharePoint On-Premise\n   * @returns File or folder name with replaced invalid characters\n   */\n  public stripInvalidFileFolderChars(input: string, replacer = \"\", onPremise = false): string {\n    if (onPremise) {\n      return input.replace(UtilityMethod.InvalidFileFolderNameCharsOnPremiseRegex, replacer);\n    } else {\n      return input.replace(UtilityMethod.InvalidFileFolderNameCharsOnlineRegex, replacer);\n    }\n  }\n}\n\nexport interface CreateWikiPageResult {\n  data: any;\n  file: File;\n}\n","import { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { HubSite as IHubSite } from \"./types\";\n\n/**\n * Describes a collection of Hub Sites\n *\n */\n@defaultPath(\"_api/hubsites\")\nexport class HubSites extends SharePointQueryableCollection<IHubSite[]> {\n\n    /**\t    \n     * Gets a Hub Site from the collection by id\t     \n     *\t    \n     * @param id The Id of the Hub Site\t    \n     */\n    public getById(id: string): HubSite {\n        return new HubSite(this, `GetById?hubSiteId='${id}'`);\n\n    }\n\n}\n\nexport class HubSite extends SharePointQueryableInstance<IHubSite> { }\n","import { Search, SearchResults, SearchQueryInit } from \"./search\";\nimport { SearchSuggest, SearchSuggestQuery, SearchSuggestResult } from \"./searchsuggest\";\nimport { Site } from \"./site\";\nimport { Web } from \"./webs\";\nimport { ConfigOptions } from \"@pnp/common\";\nimport { UserProfileQuery } from \"./userprofiles\";\nimport { INavigationService, NavigationService } from \"./navigation\";\nimport { SPBatch } from \"./batch\";\nimport { SocialQuery, SocialMethods } from \"./social\";\nimport { SiteScripts, SiteScriptUtilityMethods } from \"./sitescripts\";\nimport { SiteDesigns, SiteDesignsUtilityMethods } from \"./sitedesigns\";\nimport { UtilityMethod, UtilityMethods } from \"./utilities\";\nimport { SharePointQueryableConstructor, SharePointQueryable } from \"./sharepointqueryable\";\nimport {\n    setup as _setup,\n    SPConfiguration,\n} from \"./config/splibconfig\";\nimport { ICachingOptions } from \"@pnp/odata\";\nimport { HubSites } from \"./hubsites\";\n\n/**\n * Root of the SharePoint REST module\n */\nexport class SPRest {\n\n    /** \n     * Creates a new instance of the SPRest class\n     * \n     * @param options Additional options\n     * @param baseUrl A string that should form the base part of the url\n     */\n    constructor(protected _options: ConfigOptions = {}, protected _baseUrl = \"\") { }\n\n    /**\n     * Configures instance with additional options and baseUrl.\n     * Provided configuration used by other objects in a chain\n     * \n     * @param options Additional options\n     * @param baseUrl A string that should form the base part of the url\n     */\n    public configure(options: ConfigOptions, baseUrl = \"\"): SPRest {\n        return new SPRest(options, baseUrl);\n    }\n\n    /**\n     * Global SharePoint configuration options\n     * \n     * @param config The SharePoint configuration to apply\n     */\n    public setup(config: SPConfiguration) {\n        _setup(config);\n    }\n\n    /**\n     * Executes a search against this web context\n     *\n     * @param query The SearchQuery definition\n     */\n    public searchSuggest(query: string | SearchSuggestQuery): Promise<SearchSuggestResult> {\n\n        let finalQuery: SearchSuggestQuery;\n\n        if (typeof query === \"string\") {\n            finalQuery = { querytext: query };\n        } else {\n            finalQuery = query;\n        }\n\n        return this.create(SearchSuggest).execute(finalQuery);\n    }\n\n    /**\n     * Executes a search against this web context\n     *\n     * @param query The SearchQuery definition\n     */\n    public search(query: SearchQueryInit): Promise<SearchResults> {\n        return this.create(Search).execute(query);\n    }\n\n    /**\n     * Executes the provided search query, caching the results\n     * \n     * @param query The SearchQuery definition\n     * @param options The set of caching options used to store the results\n     */\n    public searchWithCaching(query: SearchQueryInit, options?: ICachingOptions): Promise<SearchResults> {\n        return this.create(Search).usingCaching(options).execute(query);\n    }\n\n    /**\n     * Begins a site collection scoped REST request\n     *\n     */\n    public get site(): Site {\n        return this.create(Site);\n    }\n\n    /**\n     * Begins a web scoped REST request\n     *\n     */\n    public get web(): Web {\n        return this.create(Web);\n    }\n\n    /**\n     * Access to user profile methods\n     *\n     */\n    public get profiles(): UserProfileQuery {\n        return this.create(UserProfileQuery);\n    }\n\n    /**\n     * Access to social methods\n     */\n    public get social(): SocialMethods {\n        return this.create(SocialQuery);\n    }\n\n    /**\n     * Access to the site collection level navigation service\n     */\n    public get navigation(): INavigationService {\n        return this.create(NavigationService);\n    }\n\n    /**\n     * Creates a new batch object for use with the SharePointQueryable.addToBatch method\n     *\n     */\n    public createBatch(): SPBatch {\n        return this.web.createBatch();\n    }\n\n    /**\n     * Static utilities methods from SP.Utilities.Utility\n     */\n    public get utility(): UtilityMethods {\n        return this.create(UtilityMethod, \"\");\n    }\n\n    /**\n     * Access to sitescripts methods\n     */\n    public get siteScripts(): SiteScriptUtilityMethods {\n        return this.create(SiteScripts, \"\");\n    }\n\n    /**\n     * Access to sitedesigns methods\n     */\n    public get siteDesigns(): SiteDesignsUtilityMethods {\n        return this.create(SiteDesigns, \"\");\n    }\n\n    /**\n     * Access to Hub Site methods\n     */\n    public get hubSites(): HubSites {\n        return this.create(HubSites);\n    }\n\n    /**\n     * Gets the Web instance representing the tenant app catalog web\n     */\n    public getTenantAppCatalogWeb(): Promise<Web> {\n        return this.create(Web, \"_api/SP_TenantSettings_Current\").get<{ CorporateCatalogUrl: string }>().then(r => {\n            return (new Web(r.CorporateCatalogUrl)).configure(this._options);\n        });\n    }\n\n    /**\n     * Handles creating and configuring the objects returned from this class\n     * \n     * @param fm The factory method used to create the instance\n     * @param path Optional additional path information to pass to the factory method\n     */\n    private create<T extends SharePointQueryable>(fm: SharePointQueryableConstructor<T>, path?: string): T {\n        return new fm(this._baseUrl, path).configure(this._options);\n    }\n}\n\nexport const sp = new SPRest();\n"],"names":["__","stringIsNullOrEmpty","hOP","Logger","combine","tslib_1.__extends","extend","ODataParserBase","RuntimeConfig","FetchClient","ODataDefaultParser","mergeHeaders","getCtxCallback","isUrlAbsolute","global","mergeOptions","getGUID","ODataQueryable","jsS","ControlMode","FieldTypes","DateTimeFieldFormatType","DateTimeFieldFriendlyFormatType","AddFieldOptions","CalendarType","UrlFieldFormatType","PermissionKind","PrincipalType","PrincipalSource","RoleType","PageType","SharingLinkKind","SharingRole","SharingOperationStatusCode","SPSharedObjectType","SharingDomainRestrictionMode","RenderListDataOptions","FieldUserSelectionMode","ChoiceFieldFormatType","UrlZone","TextParser","BlobParser","BufferParser","JSONParser","isArray","SiteScripts","CheckinType","WebPartsPersonalizationScope","MoveOperations","TemplateFileType","ODataBatch","dateAdd","PromotedState","objectDefinedNotNull","getHashCode","CachingOptions","SortDirection","ReorderingRuleMatchType","QueryPropertyValueType","SocialActorType","SocialActorTypes","SocialFollowResult","SocialStatusCode","_setup"],"mappings":"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"}