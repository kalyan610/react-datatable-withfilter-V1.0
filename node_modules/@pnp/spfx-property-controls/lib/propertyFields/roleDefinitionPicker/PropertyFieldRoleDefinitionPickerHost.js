var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { Dropdown } from "office-ui-fabric-react/lib/Dropdown";
import { Async } from 'office-ui-fabric-react/lib/Utilities';
import { Label } from 'office-ui-fabric-react/lib/Label';
import { SPRoleDefinitionPickerService } from '../../services/SPRoleDefinitionPickerService';
import FieldErrorMessage from '../errorMessage/FieldErrorMessage';
import * as telemetry from '../../common/telemetry';
/**
 * Renders the controls for PropertyFieldRoleDefinitionPicker component
 */
var PropertyFieldRoleDefinitionPickerHost = /** @class */ (function (_super) {
    __extends(PropertyFieldRoleDefinitionPickerHost, _super);
    /**
     * Constructor method
     */
    function PropertyFieldRoleDefinitionPickerHost(props) {
        var _this = _super.call(this, props) || this;
        _this.options = [];
        _this.selectedOptions = [];
        _this.resultsRoleDefinition = new Array();
        telemetry.track('PropertyFieldRoleDefinitionPicker', {
            disabled: props.disabled
        });
        _this.state = {
            results: _this.options,
            errorMessage: '',
            loading: false
        };
        _this.async = new Async(_this);
        _this.onChanged = _this.onChanged.bind(_this);
        return _this;
    }
    PropertyFieldRoleDefinitionPickerHost.prototype.componentDidMount = function () {
        // Start retrieving the list role definitions
        this.loadRoleDefinitions();
    };
    PropertyFieldRoleDefinitionPickerHost.prototype.componentDidUpdate = function (prevProps, _prevState) {
        if (this.props.webAbsoluteUrl !== prevProps.webAbsoluteUrl) {
            this.loadRoleDefinitions();
        }
    };
    /**
     * Loads the role definitions from a SharePoint web
     */
    PropertyFieldRoleDefinitionPickerHost.prototype.loadRoleDefinitions = function () {
        var _this = this;
        this.options = [];
        this.selectedOptions = [];
        var roleDefinitionService = new SPRoleDefinitionPickerService(this.props, this.props.context);
        var roleDefinitionsToExclude = this.props.roleDefinitionsToExclude ? this.props.roleDefinitionsToExclude : [];
        var selectedRoleDefinitions = this.props.selectedRoleDefinition ? this.props.selectedRoleDefinition : [];
        if (this.props.roleDefinitions && this.props.roleDefinitions.length > 0) {
            this.props.roleDefinitions.forEach(function (i) {
                if (selectedRoleDefinitions.indexOf(i.Name) === -1) {
                    selectedRoleDefinitions.push(i.Name);
                }
            });
        }
        roleDefinitionService.getRoleDefinitions().then(function (response) {
            // Start mapping the roleDefinitions that are selected
            response.value.forEach(function (roleDefinition) {
                if (roleDefinitionsToExclude.indexOf(roleDefinition.Name) === -1) {
                    _this.options.push({
                        key: roleDefinition.Id,
                        text: roleDefinition.Name,
                        selected: selectedRoleDefinitions.indexOf(roleDefinition.Name) >= 0 ? true : false
                    });
                    _this.resultsRoleDefinition.push(roleDefinition);
                }
            });
            _this.selectedOptions = _this.options.filter(function (o) { return o.selected === true; });
            var selectedRoleDefinitionInformation = [];
            _this.resultsRoleDefinition.forEach(function (value) {
                _this.selectedOptions.forEach(function (i) {
                    if (value.Id === i.key) {
                        selectedRoleDefinitionInformation.push(value);
                    }
                });
            });
            if (_this.props.multiSelect === true) {
                _this.props.properties[_this.props.targetProperty] = selectedRoleDefinitionInformation;
            }
            else {
                _this.props.properties[_this.props.targetProperty] = selectedRoleDefinitionInformation[0];
            }
            // Update the current component state
            _this.setState({
                results: _this.options,
                roleDefinitionInformationResult: _this.resultsRoleDefinition
            });
        }).catch(function (error) {
            _this.setState({
                errorMessage: JSON.stringify(error),
                loading: false
            });
        });
    };
    /**
     * Raises when a role definition has been selected
     */
    PropertyFieldRoleDefinitionPickerHost.prototype.onChanged = function (option, _index) {
        var _this = this;
        var selectedRoleDefinitionInformation = [];
        if (this.props.multiSelect) {
            if (option && option.selected) {
                this.selectedOptions.push({
                    key: option.key,
                    text: option.text,
                    selected: option.selected
                });
            }
            else {
                this.selectedOptions = this.selectedOptions.filter(function (o) { return o.key !== option.key; });
            }
            this.state.roleDefinitionInformationResult.forEach(function (value) {
                _this.selectedOptions.forEach(function (i) {
                    if (value.Id === i.key) {
                        selectedRoleDefinitionInformation.push(value);
                    }
                });
            });
        }
        else {
            this.selectedOptions.push({
                key: option.key,
                text: option.text
            });
            this.selectedOptions = this.selectedOptions.filter(function (o) { return o.key === option.key; });
            selectedRoleDefinitionInformation = this.state.roleDefinitionInformationResult.filter(function (i) { return i.Id === _this.selectedOptions[0].key; });
        }
        this.props.onPropertyChange(this.props.targetProperty, this.props.roleDefinitions, selectedRoleDefinitionInformation);
        if (typeof this.props.onChange !== 'undefined' && this.props.onChange !== null) {
            this.props.onChange(this.props.targetProperty, selectedRoleDefinitionInformation);
        }
        this.setState({
            results: this.options,
        });
    };
    /**
     * Called when the component will unmount
     */
    PropertyFieldRoleDefinitionPickerHost.prototype.componentWillUnmount = function () {
        if (typeof this.async !== 'undefined') {
            this.async.dispose();
        }
    };
    /**
     * Renders the SPRoleDefinitionPicker controls with Office UI Fabric
     */
    PropertyFieldRoleDefinitionPickerHost.prototype.render = function () {
        // Renders content
        var multiSelectAllowed = true;
        if (this.props.multiSelect !== undefined) {
            multiSelectAllowed = this.props.multiSelect;
        }
        return (React.createElement("div", null,
            this.props.label && React.createElement(Label, null, this.props.label),
            multiSelectAllowed &&
                React.createElement(Dropdown, { options: this.state.results, onChanged: this.onChanged, multiSelect: true, selectedKeys: this.selectedOptions.map(function (item) { return item.key; }) || [], key: this.props.key, disabled: this.props.disabled || false }),
            !multiSelectAllowed &&
                React.createElement(Dropdown, { options: this.state.results, onChanged: this.onChanged, multiSelect: false, selectedKey: this.selectedOptions.map(function (item) { return item.key; }) || [], key: this.props.key, disabled: this.props.disabled || false }),
            React.createElement(FieldErrorMessage, { errorMessage: this.state.errorMessage })));
    };
    return PropertyFieldRoleDefinitionPickerHost;
}(React.Component));
export default PropertyFieldRoleDefinitionPickerHost;
//# sourceMappingURL=PropertyFieldRoleDefinitionPickerHost.js.map