var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from "react";
import { getId } from 'office-ui-fabric-react/lib/Utilities';
import { PrimaryButton, DefaultButton } from 'office-ui-fabric-react/lib/Button';
import { Icon } from 'office-ui-fabric-react/lib/Icon';
import { SearchBox } from 'office-ui-fabric-react/lib/SearchBox';
import * as strings from 'PropertyControlStrings';
import { FluentIconsService } from '../../services/FluentIconsService';
import * as telemetry from '../../common/telemetry';
import { Dialog, DialogType, DialogFooter } from 'office-ui-fabric-react/lib/Dialog';
import { initializeIcons } from 'office-ui-fabric-react/lib/Icons';
import { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel';
import debounce from 'lodash/debounce';
import styles from './IconPicker.module.scss';
import { Label } from 'office-ui-fabric-react/lib/Label';
initializeIcons();
var PropertyFieldIconPickerHost = /** @class */ (function (_super) {
    __extends(PropertyFieldIconPickerHost, _super);
    function PropertyFieldIconPickerHost(props) {
        var _this = _super.call(this, props) || this;
        _this.radioIdBase = getId("radio");
        _this.closePanel = function () {
            _this.setState({
                currentIcon: _this.props.currentIcon,
                isPanelOpen: false
            });
        };
        _this.iconPickerOnClick = function () {
            _this.setState({
                isPanelOpen: true,
                items: _this._fluentIconsService.getAll() //IconNames.Icons
            });
        };
        _this.iconOnClick = function (iconName) {
            if (_this.props.onChanged) {
                if (typeof _this.props.onChanged !== 'undefined' && _this.props.onChanged !== null) {
                    _this.props.onChange(_this.props.targetProperty, iconName);
                }
            }
            _this.setState({
                currentIcon: iconName
            });
        };
        _this.onAbort = function () {
            _this.setState({
                items: _this._fluentIconsService.getAll() //IconNames.Icons
            });
        };
        _this.onChange = function (newValue) {
            var items;
            if (newValue && newValue.trim().length > 2) {
                items = _this._fluentIconsService.search(newValue); /*IconNames.Icons.filter(item => {
                  return item.toLocaleLowerCase().indexOf(newValue.toLocaleLowerCase()) !== -1;
                });*/
            }
            else {
                items = _this._fluentIconsService.getAll(); //IconNames.Icons;
            }
            _this.setState({
                items: items
            });
        };
        _this.confirmSelection = function () {
            if (_this.props.onSave) {
                _this.props.onSave(_this.state.currentIcon);
                _this.props.properties[_this.props.targetProperty] = _this.state.currentIcon;
                _this.props.onPropertyChange(_this.props.targetProperty, _this.props.currentIcon, _this.state.currentIcon);
                if (typeof _this.props.onChange !== 'undefined' && _this.props.onChange !== null) {
                    _this.props.onChange(_this.props.targetProperty, _this.state.currentIcon);
                }
            }
            _this.setState({
                isPanelOpen: false
            });
        };
        _this.renderPanelNav = function (props, defaultRender) {
            return React.createElement("div", { className: styles.navArea },
                React.createElement("h2", { className: styles.headTitle }, strings.SelectIcon),
                React.createElement(SearchBox, { className: styles.searchBox, onAbort: _this.onAbort, "data-automation-id": "icon-picker-search", onSearch: debounce(_this.onChange, 300), onChange: debounce(_this.onChange, 300) }),
                React.createElement("div", { className: styles.closeBtnContainer }, defaultRender(props)));
        };
        _this.renderPanelContent = function () {
            return React.createElement("div", null, _this.renderIcons());
        };
        _this.renderPanelFooter = function () {
            return React.createElement("div", { className: styles.footer, "data-automation-id": "icon-picker-footer" },
                React.createElement(PrimaryButton, { text: strings.SaveButtonLabel, onClick: _this.confirmSelection, disabled: !_this.state.currentIcon, className: styles.btnSave, "data-automation-id": "icon-picker-save" }),
                React.createElement("div", { className: styles.selectionDisplay + " " + (!_this.state.currentIcon ? 'noSelection' : '') },
                    React.createElement("span", { className: styles.selectionLabel },
                        strings.SelectedLabel,
                        ":"),
                    React.createElement(Icon, { iconName: _this.state.currentIcon, className: styles.selectionIcon })),
                React.createElement(DefaultButton, { text: strings.CancelButtonLabel, onClick: _this.closePanel, className: styles.btnCancel, "data-automation-id": "icon-picker-close" }));
        };
        _this.renderIcons = function () {
            return (React.createElement("ul", { className: styles.iconList }, _this.state.items.map(_this.renderIcon)));
        };
        _this.renderIcon = function (item) {
            var radioId = _this.radioIdBase + "-" + item;
            return React.createElement("li", { className: styles.iconItem },
                React.createElement("input", { type: "radio", name: _this.radioIdBase, id: radioId, className: styles.iconRadio, "data-automation-id": "icon-picker-" + item, checked: item == _this.state.currentIcon, onChange: function () { return _this.iconOnClick(item); } }),
                React.createElement("label", { className: styles.iconLabel, htmlFor: radioId, title: item },
                    React.createElement(Icon, { iconName: item, className: styles.iconGlyph }),
                    React.createElement("span", { className: styles.iconName }, item)));
        };
        telemetry.track('PropertyFieldIconPicker', {
            disabled: props.disabled
        });
        _this._fluentIconsService = new FluentIconsService();
        _this.state = {
            currentIcon: _this.props.currentIcon || null,
            isPanelOpen: false,
            items: _this._fluentIconsService.getAll()
        };
        return _this;
    }
    PropertyFieldIconPickerHost.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (prevProps.currentIcon !== this.props.currentIcon) {
            this.setState({
                currentIcon: this.props.currentIcon
            });
        }
    };
    PropertyFieldIconPickerHost.prototype.render = function () {
        var _a = this.props, buttonLabel = _a.buttonLabel, buttonClassName = _a.buttonClassName, disabled = _a.disabled, panelClassName = _a.panelClassName, label = _a.label;
        var renderOption = this.props.renderOption;
        var iconProps = { iconName: this.props.currentIcon };
        renderOption = renderOption === undefined ? 'panel' : renderOption;
        return React.createElement("div", null,
            label && label.length > 0 && React.createElement(Label, null, label),
            React.createElement(PrimaryButton, { text: buttonLabel, onClick: this.iconPickerOnClick, className: buttonClassName, disabled: disabled, iconProps: iconProps, "data-automation-id": "icon-picker-open" }),
            renderOption === 'panel' ?
                React.createElement(Panel, { isOpen: this.state.isPanelOpen, onDismiss: this.closePanel, type: PanelType.medium, "data-automation-id": "icon-picker-panel", closeButtonAriaLabel: strings.CloseButton, className: panelClassName, onRenderNavigation: this.renderPanelNav, onRenderFooterContent: this.renderPanelFooter }, this.renderPanelContent())
                :
                    React.createElement(Dialog, { hidden: !this.state.isPanelOpen, onDismiss: this.closePanel, isBlocking: true, containerClassName: styles.dialog, dialogContentProps: {
                            type: DialogType.normal,
                            title: strings.SelectIcon,
                            showCloseButton: true,
                            className: panelClassName
                        } },
                        React.createElement(SearchBox, { className: styles.searchBox, onAbort: this.onAbort, "data-automation-id": "icon-picker-search", onSearch: debounce(this.onChange, 300), onChange: debounce(this.onChange, 300) }),
                        React.createElement("div", { className: styles.dialogIconsContainer }, this.renderPanelContent()),
                        React.createElement(DialogFooter, null,
                            React.createElement("div", { className: styles.dialogFooter },
                                React.createElement(Icon, { iconName: this.state.currentIcon, className: styles.dialogSelectedIcons }),
                                React.createElement(PrimaryButton, { className: styles.save, text: strings.SaveButtonLabel, onClick: this.confirmSelection, disabled: !this.state.currentIcon, "data-automation-id": "icon-picker-save" }),
                                React.createElement(DefaultButton, { text: strings.CancelButtonLabel, onClick: this.closePanel, className: styles.btnCancel, "data-automation-id": "icon-picker-close" })))));
    };
    return PropertyFieldIconPickerHost;
}(React.Component));
export default PropertyFieldIconPickerHost;
//# sourceMappingURL=PropertyFieldIconPickerHost.js.map