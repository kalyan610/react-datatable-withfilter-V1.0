var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { Async } from 'office-ui-fabric-react/lib/Utilities';
import { PrimaryButton, DefaultButton, IconButton } from 'office-ui-fabric-react/lib/Button';
import { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel';
import { PropertyFieldCodeEditorLanguages } from './IPropertyFieldCodeEditor';
import { Label } from 'office-ui-fabric-react/lib/Label';
import { TextField } from 'office-ui-fabric-react/lib/TextField';
import { CodeFormatter } from './CodeFormatter';
import styles from './PropertyFieldCodeEditorHost.module.scss';
import FieldErrorMessage from '../errorMessage/FieldErrorMessage';
import * as telemetry from '../../common/telemetry';
import * as strings from 'PropertyControlStrings';
import AceEditor from 'react-ace';
import 'brace/mode/json';
import 'brace/mode/javascript';
import 'brace/mode/sass';
import 'brace/mode/typescript';
import 'brace/mode/html';
import 'brace/mode/handlebars';
import 'brace/mode/xml';
import 'brace/theme/monokai';
/**
 * Renders the controls for PropertyFieldCodeEditor component
 */
var PropertyFieldCodeEditorHost = /** @class */ (function (_super) {
    __extends(PropertyFieldCodeEditorHost, _super);
    /**
     * Constructor method
     */
    function PropertyFieldCodeEditorHost(props) {
        var _this = _super.call(this, props) || this;
        _this.cancel = true;
        telemetry.track('PropertyFieldCodeEditor', {
            language: props.language,
            disabled: props.disabled
        });
        _this.state = {
            code: typeof _this.props.initialValue !== 'undefined' ? _this.props.initialValue : '',
            loaded: false,
            openPanel: false,
            errorMessage: ''
        };
        _this.onOpenPanel = _this.onOpenPanel.bind(_this);
        _this.onClosePanel = _this.onClosePanel.bind(_this);
        _this.onFormatCode = _this.onFormatCode.bind(_this);
        _this.onChange = _this.onChange.bind(_this);
        _this.onSave = _this.onSave.bind(_this);
        _this.async = new Async(_this);
        return _this;
    }
    /**
     * componentWillUpdate lifecycle hook
     *
     * @param nextProps
     * @param nextState
     */
    PropertyFieldCodeEditorHost.prototype.componentWillUpdate = function (nextProps, nextState) {
        if (nextProps.initialValue !== this.props.initialValue) {
            this.setState({
                code: typeof nextProps.initialValue !== 'undefined' ? nextProps.initialValue : ''
            });
        }
    };
    /**
     * Open the right Panel
     */
    PropertyFieldCodeEditorHost.prototype.onOpenPanel = function () {
        if (this.props.disabled) {
            return;
        }
        // Store the current code value
        this.previousValue = this.state.code;
        this.cancel = true;
        this.setState({
            openPanel: true,
            loaded: false
        });
    };
    /**
     * Close the panel
     */
    PropertyFieldCodeEditorHost.prototype.onClosePanel = function () {
        var _this = this;
        this.setState(function (crntState) {
            var newState = {
                openPanel: false,
                loaded: false
            };
            // Check if the property has to be reset
            if (_this.cancel) {
                newState.code = _this.previousValue;
            }
            return newState;
        });
    };
    /**
     * Format the code
     */
    PropertyFieldCodeEditorHost.prototype.onFormatCode = function () {
        var formattedCode;
        var codeFormatter = new CodeFormatter();
        switch (this.props.language) {
            case PropertyFieldCodeEditorLanguages.JSON: {
                formattedCode = codeFormatter.formatJSON(this.state.code.trim());
                break;
            }
            case PropertyFieldCodeEditorLanguages.XML:
            case PropertyFieldCodeEditorLanguages.HTML: {
                formattedCode = codeFormatter.formatHTML(this.state.code.trim());
                break;
            }
            case PropertyFieldCodeEditorLanguages.Sass:
            case PropertyFieldCodeEditorLanguages.css: {
                formattedCode = codeFormatter.formatCSS(this.state.code.trim());
                break;
            }
            case PropertyFieldCodeEditorLanguages.JavaScript:
            case PropertyFieldCodeEditorLanguages.TypeScript:
            case PropertyFieldCodeEditorLanguages.Handlebars: {
                formattedCode = codeFormatter.formatScript(this.state.code.trim());
                break;
            }
        }
        // const beautify = require('beautify');
        // let formattedCode: any = beautify(this.state.code.trim(), { format: codeLanguage });
        this.setState({ code: formattedCode });
    };
    /**
     * Called when the component will unmount
     */
    PropertyFieldCodeEditorHost.prototype.componentWillUnmount = function () {
        if (typeof this.async !== 'undefined') {
            this.async.dispose();
        }
    };
    /**
     * Called when the save button  gets clicked
     */
    PropertyFieldCodeEditorHost.prototype.onSave = function () {
        this.cancel = false;
        this.props.properties[this.props.targetProperty] = this.state.code;
        this.props.onPropertyChange(this.props.targetProperty, this.props.initialValue, this.state.code);
        // Trigger the apply button
        if (typeof this.props.onChange !== 'undefined' && this.props.onChange !== null) {
            this.props.onChange(this.props.targetProperty, this.state.code);
        }
        this.setState(function (current) { return (__assign({}, current, { openPanel: false })); });
    };
    /**
     * Called when the code gets changed
     */
    PropertyFieldCodeEditorHost.prototype.onChange = function (newValue, event) {
        this.setState(function (current) { return (__assign({}, current, { code: newValue })); });
    };
    /**
     * Renders the SPListpicker controls with Office UI  Fabric
     */
    PropertyFieldCodeEditorHost.prototype.render = function () {
        var _this = this;
        return (React.createElement("div", null,
            this.props.label && React.createElement(Label, null, this.props.label),
            React.createElement("table", { className: styles.codeFieldTable },
                React.createElement("tbody", null,
                    React.createElement("tr", null,
                        React.createElement("td", null,
                            React.createElement(TextField, { disabled: this.props.disabled, onChanged: null, readOnly: true, value: this.state.code, onClick: this.onOpenPanel })),
                        React.createElement("td", { className: styles.codeFieldRow },
                            React.createElement(IconButton, { disabled: this.props.disabled, iconProps: { iconName: 'Code' }, onClick: this.onOpenPanel }))))),
            React.createElement(FieldErrorMessage, { errorMessage: this.state.errorMessage }),
            React.createElement(Panel, { isOpen: this.state.openPanel, hasCloseButton: true, onDismiss: this.onClosePanel, isLightDismiss: true, type: PanelType.medium, headerText: this.props.panelTitle, onRenderFooterContent: function () { return (React.createElement("div", { className: styles.actions },
                    React.createElement("div", { className: "ms-Grid", dir: "ltr" },
                        React.createElement("div", { className: "ms-Grid-row" },
                            React.createElement(PrimaryButton, { iconProps: { iconName: 'Save' }, text: strings.SaveButtonLabel, value: strings.SaveButtonLabel, onClick: _this.onSave }),
                            React.createElement(DefaultButton, { iconProps: { iconName: 'Cancel' }, text: strings.CancelButtonLabel, value: strings.CancelButtonLabel, onClick: _this.onClosePanel }),
                            _this.props.language !== PropertyFieldCodeEditorLanguages["Plain Text"] &&
                                React.createElement(DefaultButton, { color: "ms-bgColor-themeLight", iconProps: { iconName: 'ClearFormatting' }, text: strings.FormatCodeButtonLabel, value: strings.ExportButtonLabel, onClick: _this.onFormatCode }))))); } },
                React.createElement(AceEditor, { mode: this.props.language, theme: "monokai", onChange: this.onChange, value: this.state.code, name: "code-" + this.props.targetProperty, editorProps: { $blockScrolling: true } }))));
    };
    return PropertyFieldCodeEditorHost;
}(React.Component));
export default PropertyFieldCodeEditorHost;
//# sourceMappingURL=PropertyFieldCodeEditorHost.js.map