var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { Label } from 'office-ui-fabric-react/lib/Label';
import { ColorPicker } from 'office-ui-fabric-react/lib/ColorPicker';
import { IconButton } from 'office-ui-fabric-react/lib/Button';
import styles from './PropertyFieldColorPickerHost.module.scss';
import * as strings from 'PropertyControlStrings';
import { PropertyFieldColorPickerStyle } from './IPropertyFieldColorPicker';
import * as telemetry from '../../common/telemetry';
var PropertyFieldColorPickerHost = /** @class */ (function (_super) {
    __extends(PropertyFieldColorPickerHost, _super);
    function PropertyFieldColorPickerHost(props, state) {
        var _this = _super.call(this, props) || this;
        telemetry.track('PropertyFieldColorPicker', {
            disabled: props.disabled
        });
        _this.state = {
            errorMessage: undefined,
            inlinePickerShowing: false
        };
        _this.onTogglePicker = _this.onTogglePicker.bind(_this);
        return _this;
    }
    PropertyFieldColorPickerHost.prototype.render = function () {
        return (React.createElement("div", { className: styles.pfColorPicker + " " + (this.props.isHidden ? styles.hidden : "") },
            this.props.label && React.createElement(Label, null, this.props.label),
            this.props.style === PropertyFieldColorPickerStyle.Inline &&
                React.createElement("table", { className: styles.cpInlineTable },
                    React.createElement("tbody", null,
                        React.createElement("tr", null,
                            React.createElement("td", { style: { width: "100%" } },
                                this.state.inlinePickerShowing &&
                                    React.createElement("div", { className: "ms-slideDownIn20" },
                                        React.createElement(ColorPicker, { color: this.props.selectedColor, onColorChanged: this.props.onColorChanged, alphaSliderHidden: this.props.alphaSliderHidden })),
                                !this.state.inlinePickerShowing &&
                                    React.createElement("div", { className: "ms-slideUpIn20 ms-borderColor-neutralDark", style: { backgroundColor: this.props.selectedColor, border: "1px solid" } }, "\u00A0")),
                            React.createElement("td", { className: styles.cpInlineRow },
                                React.createElement(IconButton, { title: strings.ColorPickerButtonTitle, disabled: this.props.disabled, iconProps: { iconName: this.props.iconName, ariaLabel: strings.ColorPickerButtonTitle }, onClick: this.onTogglePicker }))))),
            this.props.style === PropertyFieldColorPickerStyle.Full && !this.props.disabled &&
                React.createElement("div", null,
                    React.createElement("div", { style: { width: 0, height: 0, overflow: 'hidden' } },
                        React.createElement("input", null)),
                    React.createElement(ColorPicker, { color: this.props.selectedColor, onColorChanged: this.props.onColorChanged, alphaSliderHidden: this.props.alphaSliderHidden })),
            this.props.style === PropertyFieldColorPickerStyle.Full && this.props.disabled &&
                React.createElement("fieldset", { disabled: true, className: styles.disabledCP },
                    React.createElement(ColorPicker, { color: this.props.selectedColor, alphaSliderHidden: this.props.alphaSliderHidden }))));
    };
    PropertyFieldColorPickerHost.prototype.onTogglePicker = function () {
        this.setState({
            inlinePickerShowing: !this.state.inlinePickerShowing
        });
    };
    return PropertyFieldColorPickerHost;
}(React.Component));
export default PropertyFieldColorPickerHost;
//# sourceMappingURL=PropertyFieldColorPickerHost.js.map