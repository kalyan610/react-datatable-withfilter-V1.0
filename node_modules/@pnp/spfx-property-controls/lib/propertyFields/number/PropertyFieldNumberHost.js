var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { TextField } from 'office-ui-fabric-react/lib/TextField';
import * as telemetry from '../../common/telemetry';
import { Async } from 'office-ui-fabric-react/lib/Utilities';
import * as strings from 'PropertyControlStrings';
import { GeneralHelper } from '../../helpers/GeneralHelper';
var PropertyFieldNumberHost = /** @class */ (function (_super) {
    __extends(PropertyFieldNumberHost, _super);
    function PropertyFieldNumberHost(props) {
        var _this = _super.call(this, props) || this;
        /**
         * Validate if field value is a number
         * @param value
         */
        _this._validateNumber = function (value) {
            var nrValue = !GeneralHelper.isDefined(_this.props.precision) || _this.props.precision === 0 ? parseInt(value) : parseFloat(value);
            if (isNaN(nrValue)) {
                return strings.NotNumberValidationMessage + " " + value + ".";
            }
            var _a = _this.props, minValue = _a.minValue, maxValue = _a.maxValue;
            // Check if number is lower or equal to minimum value
            if (GeneralHelper.isDefined(minValue) && nrValue < minValue) {
                return strings.MinimumNumberValidationMessage + " " + minValue;
            }
            // Check if the number is greater than the maximum value
            if (GeneralHelper.isDefined(maxValue) && nrValue > maxValue) {
                return strings.MaximumNumberValidationMessage + " " + maxValue;
            }
            if (_this.props.onGetErrorMessage) {
                return _this.props.onGetErrorMessage(nrValue);
            }
            else {
                return '';
            }
        };
        /**
         * On field change event handler
         */
        _this._onChanged = function (value) {
            var nrValue;
            var precision = _this.props.precision;
            if (!GeneralHelper.isDefined(precision)) {
                nrValue = parseFloat(value);
            }
            else if (precision === 0) {
                nrValue = parseInt(value);
            }
            else {
                var multiplier = Math.pow(10, precision);
                nrValue = Math.round((parseFloat(value) + 0.000000000000001) * multiplier) / multiplier;
            }
            // Update state
            _this.setState({
                value: value,
                roundedValue: nrValue
            });
            var _a = _this.props, minValue = _a.minValue, maxValue = _a.maxValue;
            if (!isNaN(nrValue)) {
                if ((!GeneralHelper.isDefined(minValue) || nrValue >= minValue) && (!GeneralHelper.isDefined(maxValue) || nrValue <= maxValue)) {
                    // Trigger change for the web part
                    _this.props.onChanged(nrValue);
                }
            }
            else {
                _this.props.onChanged(undefined);
            }
        };
        telemetry.track('PropertyFieldNumber', {
            disabled: props.disabled
        });
        _this.state = {
            value: _this.props.value ? _this.props.value.toFixed(props.precision || 0) : null,
            roundedValue: props.value
        };
        _this._async = new Async(_this);
        _this._delayedChange = _this._async.debounce(_this._onChanged, _this.props.deferredValidationTime ? _this.props.deferredValidationTime : 200);
        return _this;
    }
    /**
     * componentDidUpdate lifecycle hook
     *
     * @param prevProps
     * @param prevState
     */
    PropertyFieldNumberHost.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (prevProps.value !== this.props.value && this.props.value !== this.state.roundedValue) {
            this.setState({
                value: GeneralHelper.isDefined(this.props.value) ? this.props.value.toString() : null
            });
        }
    };
    /**
     * Render field
     */
    PropertyFieldNumberHost.prototype.render = function () {
        return (React.createElement("div", null,
            React.createElement(TextField, { label: this.props.label, ariaLabel: this.props.ariaLabel, onChanged: this._delayedChange, value: this.state.value, description: this.props.description, placeholder: this.props.placeholder, errorMessage: this.props.errorMessage, onGetErrorMessage: this._validateNumber, deferredValidationTime: this.props.deferredValidationTime, disabled: this.props.disabled })));
    };
    return PropertyFieldNumberHost;
}(React.Component));
export default PropertyFieldNumberHost;
//# sourceMappingURL=PropertyFieldNumberHost.js.map