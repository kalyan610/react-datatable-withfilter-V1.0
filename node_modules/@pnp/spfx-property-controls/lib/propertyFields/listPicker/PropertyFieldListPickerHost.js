var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import * as React from 'react';
import { Dropdown } from 'office-ui-fabric-react/lib/Dropdown';
import { Async } from 'office-ui-fabric-react/lib/Utilities';
import { Label } from 'office-ui-fabric-react/lib/Label';
import SPListPickerService from '../../services/SPListPickerService';
import FieldErrorMessage from '../errorMessage/FieldErrorMessage';
import * as telemetry from '../../common/telemetry';
// Empty list value, to be checked for single list selection
var EMPTY_LIST_KEY = 'NO_LIST_SELECTED';
/**
 * Renders the controls for PropertyFieldListPicker component
 */
var PropertyFieldListPickerHost = /** @class */ (function (_super) {
    __extends(PropertyFieldListPickerHost, _super);
    /**
     * Constructor method
     */
    function PropertyFieldListPickerHost(props) {
        var _this = _super.call(this, props) || this;
        telemetry.track('PropertyFieldListPicker', {
            disabled: props.disabled
        });
        _this.state = {
            loadedLists: {
                value: []
            },
            results: [],
            errorMessage: ''
        };
        _this.async = new Async(_this);
        _this.validate = _this.validate.bind(_this);
        _this.onChanged = _this.onChanged.bind(_this);
        _this.notifyAfterValidate = _this.notifyAfterValidate.bind(_this);
        _this.delayedValidate = _this.async.debounce(_this.validate, _this.props.deferredValidationTime);
        return _this;
    }
    PropertyFieldListPickerHost.prototype.componentDidMount = function () {
        // Start retrieving the SharePoint lists
        this.loadLists();
    };
    PropertyFieldListPickerHost.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (this.props.baseTemplate !== prevProps.baseTemplate ||
            this.props.webAbsoluteUrl !== prevProps.webAbsoluteUrl) {
            this.loadLists();
        }
    };
    /**
     * Loads the list from SharePoint current web site, or target site if specified by webRelativeUrl
     */
    PropertyFieldListPickerHost.prototype.loadLists = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, context, selectedList, listService, listsToExclude, options, selectedListKey, selectedKey, response;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.props, context = _a.context, selectedList = _a.selectedList;
                        listService = new SPListPickerService(this.props, context);
                        listsToExclude = this.props.listsToExclude || [];
                        options = [];
                        selectedListKey = '';
                        if (selectedList) {
                            selectedListKey = typeof selectedList === 'string' ? selectedList : selectedList.id;
                        }
                        return [4 /*yield*/, listService.getLibs()];
                    case 1:
                        response = _b.sent();
                        // Start mapping the list that are selected
                        response.value.forEach(function (list) {
                            if (selectedListKey === list.Id) {
                                selectedKey = list.Id;
                            }
                            // Make sure that the current list is NOT in the 'listsToExclude' array
                            if (listsToExclude.indexOf(list.Title) === -1 && listsToExclude.indexOf(list.Id) === -1) {
                                options.push({
                                    key: list.Id,
                                    text: list.Title
                                });
                            }
                        });
                        // Option to unselect the list
                        options.unshift({
                            key: EMPTY_LIST_KEY,
                            text: ''
                        });
                        // Update the current component state
                        this.setState({
                            loadedLists: response,
                            results: options,
                            selectedKey: selectedKey
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Raises when a list has been selected
     */
    PropertyFieldListPickerHost.prototype.onChanged = function (option, index) {
        var newValue = option.key;
        this.delayedValidate(newValue);
    };
    /**
     * Validates the new custom field value
     */
    PropertyFieldListPickerHost.prototype.validate = function (value) {
        var _this = this;
        if (this.props.onGetErrorMessage === null || this.props.onGetErrorMessage === undefined) {
            this.notifyAfterValidate(value);
            return;
        }
        if (this.latestValidateValue === value) {
            return;
        }
        this.latestValidateValue = value;
        var errResult = this.props.onGetErrorMessage(value || '');
        if (typeof errResult !== 'undefined') {
            if (typeof errResult === 'string') {
                if (errResult === '') {
                    this.notifyAfterValidate(value);
                }
                this.setState({
                    errorMessage: errResult
                });
            }
            else {
                errResult.then(function (errorMessage) {
                    if (!errorMessage) {
                        _this.notifyAfterValidate(value);
                    }
                    _this.setState({
                        errorMessage: errorMessage
                    });
                });
            }
        }
        else {
            this.notifyAfterValidate(value);
        }
    };
    /**
     * Notifies the parent Web Part of a property value change
     */
    PropertyFieldListPickerHost.prototype.notifyAfterValidate = function (newValue) {
        var _a = this.props, onPropertyChange = _a.onPropertyChange, targetProperty = _a.targetProperty, selectedList = _a.selectedList, includeListTitleAndUrl = _a.includeListTitleAndUrl, properties = _a.properties, onChange = _a.onChange;
        var _b = this.state, results = _b.results, loadedLists = _b.loadedLists;
        // Check if the user wanted to unselect the list
        var propValue;
        if (includeListTitleAndUrl) {
            if (newValue === EMPTY_LIST_KEY) {
                propValue = undefined;
            }
            else {
                var spList = loadedLists.value.filter(function (l) { return l.Id === newValue; })[0];
                propValue = {
                    id: newValue,
                    title: spList.Title,
                    url: spList.RootFolder.ServerRelativeUrl
                };
            }
        }
        else {
            propValue = newValue === EMPTY_LIST_KEY ? '' : newValue;
        }
        // Deselect all options
        var options = this.state.results.map(function (option) {
            if (option.selected) {
                option.selected = false;
            }
            return option;
        });
        // Set the current selected key
        var selectedKey = newValue;
        // Update the state
        this.setState({
            selectedKey: selectedKey,
            results: options
        });
        if (onPropertyChange && propValue !== null) {
            // Store the new property value
            properties[targetProperty] = propValue;
            // Trigger the default onPrpertyChange event
            onPropertyChange(targetProperty, selectedList, propValue);
            // Trigger the apply button
            if (typeof onChange !== 'undefined' && onChange !== null) {
                onChange(targetProperty, propValue);
            }
        }
    };
    /**
     * Called when the component will unmount
     */
    PropertyFieldListPickerHost.prototype.componentWillUnmount = function () {
        if (typeof this.async !== 'undefined') {
            this.async.dispose();
        }
    };
    /**
     * Renders the SPListpicker controls with Office UI Fabric
     */
    PropertyFieldListPickerHost.prototype.render = function () {
        // Renders content
        return (React.createElement("div", null,
            this.props.label && React.createElement(Label, null, this.props.label),
            React.createElement(Dropdown, { disabled: this.props.disabled, label: '', onChanged: this.onChanged, options: this.state.results, selectedKey: this.state.selectedKey }),
            React.createElement(FieldErrorMessage, { errorMessage: this.state.errorMessage })));
    };
    return PropertyFieldListPickerHost;
}(React.Component));
export default PropertyFieldListPickerHost;
//# sourceMappingURL=PropertyFieldListPickerHost.js.map