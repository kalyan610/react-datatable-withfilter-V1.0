var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import * as React from 'react';
import { Label } from 'office-ui-fabric-react/lib/Label';
import { Spinner, SpinnerSize } from 'office-ui-fabric-react/lib/Spinner';
import { Async } from 'office-ui-fabric-react/lib/Utilities';
import { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';
import SPListPickerService from '../../services/SPListPickerService';
import FieldErrorMessage from '../errorMessage/FieldErrorMessage';
import * as telemetry from '../../common/telemetry';
/**
* Renders the controls for PropertyFieldSPListMultiplePicker component
*/
var PropertyFieldListMultiPickerHost = /** @class */ (function (_super) {
    __extends(PropertyFieldListMultiPickerHost, _super);
    /**
    * Constructor
    */
    function PropertyFieldListMultiPickerHost(props) {
        var _this = _super.call(this, props) || this;
        _this.loaded = false;
        telemetry.track('PropertyFieldListMultiPicker', {
            disabled: props.disabled
        });
        _this.onChanged = _this.onChanged.bind(_this);
        _this.onSelectAllChanged = _this.onSelectAllChanged.bind(_this);
        _this.state = {
            loadedLists: {
                value: []
            },
            results: [],
            selectedKeys: [],
            loaded: _this.loaded,
            errorMessage: ''
        };
        _this.async = new Async(_this);
        _this.validate = _this.validate.bind(_this);
        _this.notifyAfterValidate = _this.notifyAfterValidate.bind(_this);
        _this.delayedValidate = _this.async.debounce(_this.validate, _this.props.deferredValidationTime);
        return _this;
    }
    PropertyFieldListMultiPickerHost.prototype.componentDidMount = function () {
        this.loadLists();
    };
    PropertyFieldListMultiPickerHost.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (this.props.baseTemplate !== prevProps.baseTemplate ||
            this.props.webAbsoluteUrl !== prevProps.webAbsoluteUrl) {
            this.loadLists();
        }
    };
    /**
    * Loads the list from SharePoint current web site, or target site if specified by webRelativeUrl
    */
    PropertyFieldListMultiPickerHost.prototype.loadLists = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, context, selectedLists, listService, listsToExclude, selectedListsKeys, firstItem, options, selectedKeys, response;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.props, context = _a.context, selectedLists = _a.selectedLists;
                        listService = new SPListPickerService(this.props, context);
                        listsToExclude = this.props.listsToExclude || [];
                        selectedListsKeys = [];
                        if (selectedLists && selectedLists.length) {
                            firstItem = selectedLists[0];
                            if (typeof firstItem === 'string') {
                                selectedListsKeys = selectedLists;
                            }
                            else {
                                selectedListsKeys = selectedLists.map(function (sl) { return sl.id; });
                            }
                        }
                        options = [];
                        selectedKeys = [];
                        return [4 /*yield*/, listService.getLibs()];
                    case 1:
                        response = _b.sent();
                        response.value.forEach(function (list) {
                            var isSelected = false;
                            var indexInExisting = -1;
                            // Defines if the current list must be selected by default
                            if (selectedListsKeys) {
                                indexInExisting = selectedListsKeys.indexOf(list.Id);
                            }
                            if (indexInExisting > -1) {
                                isSelected = true;
                                selectedKeys.push(list.Id);
                            }
                            // Add the option to the list if not inside the 'listsToExclude' array
                            if (listsToExclude.indexOf(list.Title) === -1 && listsToExclude.indexOf(list.Id) === -1) {
                                options.push({
                                    key: list.Id,
                                    text: list.Title,
                                    checked: isSelected
                                });
                            }
                        });
                        this.loaded = true;
                        this.setState({
                            loadedLists: response,
                            results: options,
                            selectedKeys: selectedKeys,
                            loaded: true
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
    * Raises when a list has been selected
    */
    PropertyFieldListMultiPickerHost.prototype.onChanged = function (element, isChecked) {
        if (element) {
            var value_1 = element.currentTarget.value;
            var selectedKeys = this.state.selectedKeys;
            // Check if the element is selected
            if (isChecked === false) {
                // Remove the unselected item
                selectedKeys = selectedKeys.filter(function (s) { return s !== value_1; });
            }
            else {
                // Add the selected item and filter out the doubles
                selectedKeys.push(value_1);
                selectedKeys = selectedKeys.filter(function (item, pos, self) {
                    return self.indexOf(item) === pos;
                });
            }
            // Update the state and validate
            this.setState({
                selectedKeys: selectedKeys
            });
            this.delayedValidate(selectedKeys);
        }
    };
    /**
     * Raises when the select all checkbox is changed
     */
    PropertyFieldListMultiPickerHost.prototype.onSelectAllChanged = function (element, isChecked) {
        if (element) {
            var selectedKeys_1 = new Array();
            var results = this.state.results;
            if (isChecked === true) {
                results.forEach(function (value) {
                    selectedKeys_1.push(value.key);
                });
            }
            this.setState({
                selectedKeys: selectedKeys_1
            });
            this.delayedValidate(selectedKeys_1);
        }
    };
    /**
    * Validates the new custom field value
    */
    PropertyFieldListMultiPickerHost.prototype.validate = function (value) {
        var _this = this;
        if (this.props.onGetErrorMessage === null || typeof this.props.onGetErrorMessage === 'undefined') {
            this.notifyAfterValidate(value);
            return;
        }
        var errResult = this.props.onGetErrorMessage(value || []);
        if (typeof errResult !== 'undefined') {
            if (typeof errResult === 'string') {
                if (errResult === '') {
                    this.notifyAfterValidate(value);
                }
                this.setState({
                    errorMessage: errResult
                });
            }
            else {
                errResult.then(function (errorMessage) {
                    if (typeof errorMessage === 'undefined' || errorMessage === '') {
                        _this.notifyAfterValidate(value);
                    }
                    _this.setState({
                        errorMessage: errorMessage
                    });
                });
            }
        }
        else {
            this.notifyAfterValidate(value);
        }
    };
    /**
    * Notifies the parent Web Part of a property value change
    */
    PropertyFieldListMultiPickerHost.prototype.notifyAfterValidate = function (newValue) {
        var _a = this.props, onPropertyChange = _a.onPropertyChange, onChange = _a.onChange, selectedLists = _a.selectedLists, targetProperty = _a.targetProperty, properties = _a.properties, includeListTitleAndUrl = _a.includeListTitleAndUrl;
        var loadedLists = this.state.loadedLists;
        var propValue;
        if (!newValue || !newValue.length) {
            propValue = [];
        }
        else {
            if (includeListTitleAndUrl) {
                propValue = loadedLists.value.filter(function (l) { return newValue.indexOf(l.Id) !== -1; }).map(function (l) {
                    return {
                        id: l.Id,
                        title: l.Title,
                        url: l.RootFolder.ServerRelativeUrl
                    };
                });
            }
            else {
                propValue = newValue.slice();
            }
        }
        if (onPropertyChange && newValue !== null) {
            properties[targetProperty] = propValue;
            onPropertyChange(targetProperty, selectedLists, propValue);
            // Trigger the apply button
            if (typeof onChange !== 'undefined' && onChange !== null) {
                onChange(targetProperty, propValue);
            }
        }
    };
    /**
    * Called when the component will unmount
    */
    PropertyFieldListMultiPickerHost.prototype.componentWillUnmount = function () {
        this.async.dispose();
    };
    /**
    * Renders the SPListMultiplePicker controls with Office UI  Fabric
    */
    PropertyFieldListMultiPickerHost.prototype.render = function () {
        var _this = this;
        var _a = this.state, selectedKeys = _a.selectedKeys, results = _a.results, errorMessage = _a.errorMessage;
        var _b = this.props, label = _b.label, disabled = _b.disabled, showSelectAll = _b.showSelectAll, selectAllInList = _b.selectAllInList, selectAllInListLabel = _b.selectAllInListLabel, targetProperty = _b.targetProperty;
        if (this.loaded === false) {
            return (React.createElement("div", null,
                React.createElement(Label, null, label),
                React.createElement(Spinner, { size: SpinnerSize.medium })));
        }
        else {
            var styleOfLabel = {
                color: disabled === true ? '#A6A6A6' : 'auto'
            };
            // Renders content
            return (React.createElement("div", null,
                (showSelectAll === false || selectAllInList === true) &&
                    React.createElement(Label, null, label),
                showSelectAll === true &&
                    React.createElement("div", { style: { marginBottom: '5px' }, className: 'ms-ChoiceField' },
                        React.createElement(Checkbox, { checked: selectedKeys.length === results.length, label: selectAllInList === true ? selectAllInListLabel : label, onChange: this.onSelectAllChanged, styles: {
                                checkbox: {
                                    backgroundColor: (selectedKeys.length > 0 ? '#f4f4f4' : 'inherit'),
                                    visibility: (selectAllInList === false ? 'hidden' : 'visible')
                                }
                            } })),
                results.map(function (item, index) {
                    var uniqueKey = targetProperty + '-' + item.key;
                    return (React.createElement("div", { style: { marginBottom: '5px' }, className: 'ms-ChoiceField', key: uniqueKey },
                        React.createElement(Checkbox, { checked: selectedKeys.indexOf(item.key.toString()) >= 0, disabled: disabled, label: item.text, onChange: _this.onChanged, inputProps: { value: item.key } })));
                }),
                React.createElement(FieldErrorMessage, { errorMessage: errorMessage })));
        }
    };
    return PropertyFieldListMultiPickerHost;
}(React.Component));
export default PropertyFieldListMultiPickerHost;
//# sourceMappingURL=PropertyFieldListMultiPickerHost.js.map