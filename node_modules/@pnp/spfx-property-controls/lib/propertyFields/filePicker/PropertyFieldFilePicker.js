var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as ReactDom from 'react-dom';
import { PropertyPaneFieldType } from '@microsoft/sp-webpart-base';
import PropertyPaneFilePickerHost from './PropertyFieldFilePickerHost';
/**
 * Represents a PropertyFieldFilePicker object
 */
var PropertyFieldFilePickerBuilder = /** @class */ (function () {
    function PropertyFieldFilePickerBuilder(_targetProperty, _properties) {
        var _this = this;
        this.type = PropertyPaneFieldType.Custom;
        this.disabled = false;
        this.required = false;
        this.storeLastActiveTab = true;
        this.render = function (elem, ctx, changeCallback) {
            var element = React.createElement(PropertyPaneFilePickerHost, {
                label: _this.label,
                buttonLabel: _this.buttonLabel,
                context: _this.context,
                buttonIcon: _this.buttonIcon,
                buttonClassName: _this.buttonClassName,
                panelClassName: _this.panelClassName,
                required: _this.required,
                bingAPIKey: _this.bingAPIKey,
                onSave: _this.onSave,
                onChanged: _this.onChanged,
                itemsCountQueryLimit: _this.itemsCountQueryLimit,
                accepts: _this.accepts,
                filePickerResult: _this.filePickerResult,
                hideWebSearchTab: _this.hideWebSearchTab,
                hideRecentTab: _this.hideRecentTab,
                hideSiteFilesTab: _this.hideSiteFilesTab,
                hideLocalUploadTab: _this.hideLocalUploadTab,
                hideLinkUploadTab: _this.hideLinkUploadTab,
                hideOrganisationalAssetTab: _this.hideOrganisationalAssetTab,
                hideOneDriveTab: _this.hideOneDriveTab,
                storeLastActiveTab: _this.storeLastActiveTab,
                hideStockImages: _this.hideStockImages,
                targetProperty: _this.targetProperty,
                properties: _this.customProperties,
                key: _this.key,
                disabled: _this.disabled,
                onDispose: _this.dispose,
                onRender: _this.render,
                onChange: changeCallback,
                onPropertyChange: _this.onPropertyChange
            });
            ReactDom.render(element, elem);
        };
        this.targetProperty = _targetProperty;
        this.properties = _properties;
        this.properties.onDispose = this.dispose;
        this.properties.onRender = this.render;
        this.label = _properties.label;
        this.buttonLabel = _properties.buttonLabel;
        this.context = _properties.context;
        this.buttonIcon = _properties.buttonIcon;
        this.buttonClassName = _properties.buttonClassName;
        this.panelClassName = _properties.panelClassName;
        this.accepts = _properties.accepts;
        this.filePickerResult = _properties.filePickerResult;
        this.required = _properties.required;
        this.bingAPIKey = _properties.bingAPIKey;
        this.onSave = _properties.onSave;
        this.onChanged = _properties.onChanged;
        this.itemsCountQueryLimit = _properties.itemsCountQueryLimit !== undefined ? _properties.itemsCountQueryLimit : 100;
        this.hideWebSearchTab = _properties.hideWebSearchTab !== undefined ? _properties.hideWebSearchTab : true;
        this.hideRecentTab = _properties.hideRecentTab !== undefined ? _properties.hideRecentTab : false;
        this.hideSiteFilesTab = _properties.hideSiteFilesTab !== undefined ? _properties.hideSiteFilesTab : false;
        this.hideLocalUploadTab = _properties.hideLocalUploadTab !== undefined ? _properties.hideLocalUploadTab : false;
        this.hideLinkUploadTab = _properties.hideLinkUploadTab !== undefined ? _properties.hideLinkUploadTab : false;
        this.hideOrganisationalAssetTab = _properties.hideOrganisationalAssetTab !== undefined ? _properties.hideOrganisationalAssetTab : false;
        this.hideOneDriveTab = _properties.hideOneDriveTab !== undefined ? _properties.hideOneDriveTab : false;
        this.storeLastActiveTab = _properties.storeLastActiveTab !== undefined ? _properties.storeLastActiveTab : true;
        this.hideStockImages = _properties.hideStockImages !== undefined ? _properties.hideStockImages : false;
        this.onPropertyChange = _properties.onPropertyChange;
        this.customProperties = _properties.properties;
        this.key = _properties.key;
        this.context = _properties.context;
        if (_properties.disabled === true) {
            this.disabled = _properties.disabled;
        }
    }
    PropertyFieldFilePickerBuilder.prototype.dispose = function (elem) {
    };
    PropertyFieldFilePickerBuilder.prototype.onPropertyChange = function (propertyPath, oldValue, newValue) {
    };
    return PropertyFieldFilePickerBuilder;
}());
/**
 * Helper method to create a File Picker component on the PropertyPane.
 * @param targetProperty - Target property the File Picker component is associated to.
 * @param properties - Strongly typed File Picker component properties.
 */
export function PropertyFieldFilePicker(targetProperty, properties) {
    return new PropertyFieldFilePickerBuilder(targetProperty, __assign({}, properties, { targetProperty: targetProperty, onRender: null, onDispose: null }));
}
//# sourceMappingURL=PropertyFieldFilePicker.js.map